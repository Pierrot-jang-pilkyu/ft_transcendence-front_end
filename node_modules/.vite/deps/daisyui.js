import {
  __commonJS
} from "./chunk-UXIASGQL.js";

// node_modules/picocolors/picocolors.browser.js
var require_picocolors_browser = __commonJS({
  "node_modules/picocolors/picocolors.browser.js"(exports, module) {
    var x = String;
    var create = function() {
      return { isColorSupported: false, reset: x, bold: x, dim: x, italic: x, underline: x, inverse: x, hidden: x, strikethrough: x, black: x, red: x, green: x, yellow: x, blue: x, magenta: x, cyan: x, white: x, gray: x, bgBlack: x, bgRed: x, bgGreen: x, bgYellow: x, bgBlue: x, bgMagenta: x, bgCyan: x, bgWhite: x };
    };
    module.exports = create();
    module.exports.createColors = create;
  }
});

// node_modules/tailwindcss/lib/util/log.js
var require_log = __commonJS({
  "node_modules/tailwindcss/lib/util/log.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all)
        Object.defineProperty(target, name, {
          enumerable: true,
          get: all[name]
        });
    }
    _export(exports, {
      dim: function() {
        return dim;
      },
      default: function() {
        return _default;
      }
    });
    var _picocolors = _interop_require_default(require_picocolors_browser());
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var alreadyShown = /* @__PURE__ */ new Set();
    function log(type, messages, key) {
      if (typeof process !== "undefined" && process.env.JEST_WORKER_ID)
        return;
      if (key && alreadyShown.has(key))
        return;
      if (key)
        alreadyShown.add(key);
      console.warn("");
      messages.forEach((message) => console.warn(type, "-", message));
    }
    function dim(input) {
      return _picocolors.default.dim(input);
    }
    var _default = {
      info(key, messages) {
        log(_picocolors.default.bold(_picocolors.default.cyan("info")), ...Array.isArray(key) ? [
          key
        ] : [
          messages,
          key
        ]);
      },
      warn(key, messages) {
        log(_picocolors.default.bold(_picocolors.default.yellow("warn")), ...Array.isArray(key) ? [
          key
        ] : [
          messages,
          key
        ]);
      },
      risk(key, messages) {
        log(_picocolors.default.bold(_picocolors.default.magenta("risk")), ...Array.isArray(key) ? [
          key
        ] : [
          messages,
          key
        ]);
      }
    };
  }
});

// node_modules/tailwindcss/lib/public/colors.js
var require_colors = __commonJS({
  "node_modules/tailwindcss/lib/public/colors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function() {
        return _default;
      }
    });
    var _log = _interop_require_default(require_log());
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    function warn({ version, from, to }) {
      _log.default.warn(`${from}-color-renamed`, [
        `As of Tailwind CSS ${version}, \`${from}\` has been renamed to \`${to}\`.`,
        "Update your configuration file to silence this warning."
      ]);
    }
    var _default = {
      inherit: "inherit",
      current: "currentColor",
      transparent: "transparent",
      black: "#000",
      white: "#fff",
      slate: {
        50: "#f8fafc",
        100: "#f1f5f9",
        200: "#e2e8f0",
        300: "#cbd5e1",
        400: "#94a3b8",
        500: "#64748b",
        600: "#475569",
        700: "#334155",
        800: "#1e293b",
        900: "#0f172a",
        950: "#020617"
      },
      gray: {
        50: "#f9fafb",
        100: "#f3f4f6",
        200: "#e5e7eb",
        300: "#d1d5db",
        400: "#9ca3af",
        500: "#6b7280",
        600: "#4b5563",
        700: "#374151",
        800: "#1f2937",
        900: "#111827",
        950: "#030712"
      },
      zinc: {
        50: "#fafafa",
        100: "#f4f4f5",
        200: "#e4e4e7",
        300: "#d4d4d8",
        400: "#a1a1aa",
        500: "#71717a",
        600: "#52525b",
        700: "#3f3f46",
        800: "#27272a",
        900: "#18181b",
        950: "#09090b"
      },
      neutral: {
        50: "#fafafa",
        100: "#f5f5f5",
        200: "#e5e5e5",
        300: "#d4d4d4",
        400: "#a3a3a3",
        500: "#737373",
        600: "#525252",
        700: "#404040",
        800: "#262626",
        900: "#171717",
        950: "#0a0a0a"
      },
      stone: {
        50: "#fafaf9",
        100: "#f5f5f4",
        200: "#e7e5e4",
        300: "#d6d3d1",
        400: "#a8a29e",
        500: "#78716c",
        600: "#57534e",
        700: "#44403c",
        800: "#292524",
        900: "#1c1917",
        950: "#0c0a09"
      },
      red: {
        50: "#fef2f2",
        100: "#fee2e2",
        200: "#fecaca",
        300: "#fca5a5",
        400: "#f87171",
        500: "#ef4444",
        600: "#dc2626",
        700: "#b91c1c",
        800: "#991b1b",
        900: "#7f1d1d",
        950: "#450a0a"
      },
      orange: {
        50: "#fff7ed",
        100: "#ffedd5",
        200: "#fed7aa",
        300: "#fdba74",
        400: "#fb923c",
        500: "#f97316",
        600: "#ea580c",
        700: "#c2410c",
        800: "#9a3412",
        900: "#7c2d12",
        950: "#431407"
      },
      amber: {
        50: "#fffbeb",
        100: "#fef3c7",
        200: "#fde68a",
        300: "#fcd34d",
        400: "#fbbf24",
        500: "#f59e0b",
        600: "#d97706",
        700: "#b45309",
        800: "#92400e",
        900: "#78350f",
        950: "#451a03"
      },
      yellow: {
        50: "#fefce8",
        100: "#fef9c3",
        200: "#fef08a",
        300: "#fde047",
        400: "#facc15",
        500: "#eab308",
        600: "#ca8a04",
        700: "#a16207",
        800: "#854d0e",
        900: "#713f12",
        950: "#422006"
      },
      lime: {
        50: "#f7fee7",
        100: "#ecfccb",
        200: "#d9f99d",
        300: "#bef264",
        400: "#a3e635",
        500: "#84cc16",
        600: "#65a30d",
        700: "#4d7c0f",
        800: "#3f6212",
        900: "#365314",
        950: "#1a2e05"
      },
      green: {
        50: "#f0fdf4",
        100: "#dcfce7",
        200: "#bbf7d0",
        300: "#86efac",
        400: "#4ade80",
        500: "#22c55e",
        600: "#16a34a",
        700: "#15803d",
        800: "#166534",
        900: "#14532d",
        950: "#052e16"
      },
      emerald: {
        50: "#ecfdf5",
        100: "#d1fae5",
        200: "#a7f3d0",
        300: "#6ee7b7",
        400: "#34d399",
        500: "#10b981",
        600: "#059669",
        700: "#047857",
        800: "#065f46",
        900: "#064e3b",
        950: "#022c22"
      },
      teal: {
        50: "#f0fdfa",
        100: "#ccfbf1",
        200: "#99f6e4",
        300: "#5eead4",
        400: "#2dd4bf",
        500: "#14b8a6",
        600: "#0d9488",
        700: "#0f766e",
        800: "#115e59",
        900: "#134e4a",
        950: "#042f2e"
      },
      cyan: {
        50: "#ecfeff",
        100: "#cffafe",
        200: "#a5f3fc",
        300: "#67e8f9",
        400: "#22d3ee",
        500: "#06b6d4",
        600: "#0891b2",
        700: "#0e7490",
        800: "#155e75",
        900: "#164e63",
        950: "#083344"
      },
      sky: {
        50: "#f0f9ff",
        100: "#e0f2fe",
        200: "#bae6fd",
        300: "#7dd3fc",
        400: "#38bdf8",
        500: "#0ea5e9",
        600: "#0284c7",
        700: "#0369a1",
        800: "#075985",
        900: "#0c4a6e",
        950: "#082f49"
      },
      blue: {
        50: "#eff6ff",
        100: "#dbeafe",
        200: "#bfdbfe",
        300: "#93c5fd",
        400: "#60a5fa",
        500: "#3b82f6",
        600: "#2563eb",
        700: "#1d4ed8",
        800: "#1e40af",
        900: "#1e3a8a",
        950: "#172554"
      },
      indigo: {
        50: "#eef2ff",
        100: "#e0e7ff",
        200: "#c7d2fe",
        300: "#a5b4fc",
        400: "#818cf8",
        500: "#6366f1",
        600: "#4f46e5",
        700: "#4338ca",
        800: "#3730a3",
        900: "#312e81",
        950: "#1e1b4b"
      },
      violet: {
        50: "#f5f3ff",
        100: "#ede9fe",
        200: "#ddd6fe",
        300: "#c4b5fd",
        400: "#a78bfa",
        500: "#8b5cf6",
        600: "#7c3aed",
        700: "#6d28d9",
        800: "#5b21b6",
        900: "#4c1d95",
        950: "#2e1065"
      },
      purple: {
        50: "#faf5ff",
        100: "#f3e8ff",
        200: "#e9d5ff",
        300: "#d8b4fe",
        400: "#c084fc",
        500: "#a855f7",
        600: "#9333ea",
        700: "#7e22ce",
        800: "#6b21a8",
        900: "#581c87",
        950: "#3b0764"
      },
      fuchsia: {
        50: "#fdf4ff",
        100: "#fae8ff",
        200: "#f5d0fe",
        300: "#f0abfc",
        400: "#e879f9",
        500: "#d946ef",
        600: "#c026d3",
        700: "#a21caf",
        800: "#86198f",
        900: "#701a75",
        950: "#4a044e"
      },
      pink: {
        50: "#fdf2f8",
        100: "#fce7f3",
        200: "#fbcfe8",
        300: "#f9a8d4",
        400: "#f472b6",
        500: "#ec4899",
        600: "#db2777",
        700: "#be185d",
        800: "#9d174d",
        900: "#831843",
        950: "#500724"
      },
      rose: {
        50: "#fff1f2",
        100: "#ffe4e6",
        200: "#fecdd3",
        300: "#fda4af",
        400: "#fb7185",
        500: "#f43f5e",
        600: "#e11d48",
        700: "#be123c",
        800: "#9f1239",
        900: "#881337",
        950: "#4c0519"
      },
      get lightBlue() {
        warn({
          version: "v2.2",
          from: "lightBlue",
          to: "sky"
        });
        return this.sky;
      },
      get warmGray() {
        warn({
          version: "v3.0",
          from: "warmGray",
          to: "stone"
        });
        return this.stone;
      },
      get trueGray() {
        warn({
          version: "v3.0",
          from: "trueGray",
          to: "neutral"
        });
        return this.neutral;
      },
      get coolGray() {
        warn({
          version: "v3.0",
          from: "coolGray",
          to: "gray"
        });
        return this.gray;
      },
      get blueGray() {
        warn({
          version: "v3.0",
          from: "blueGray",
          to: "slate"
        });
        return this.slate;
      }
    };
  }
});

// node_modules/tailwindcss/colors.js
var require_colors2 = __commonJS({
  "node_modules/tailwindcss/colors.js"(exports, module) {
    var colors = require_colors();
    module.exports = (colors.__esModule ? colors : { default: colors }).default;
  }
});

// node_modules/camelcase-css/index-es5.js
var require_index_es5 = __commonJS({
  "node_modules/camelcase-css/index-es5.js"(exports, module) {
    "use strict";
    var pattern = /-(\w|$)/g;
    var callback = function callback2(dashChar, char) {
      return char.toUpperCase();
    };
    var camelCaseCSS = function camelCaseCSS2(property) {
      property = property.toLowerCase();
      if (property === "float") {
        return "cssFloat";
      } else if (property.charCodeAt(0) === 45 && property.charCodeAt(1) === 109 && property.charCodeAt(2) === 115 && property.charCodeAt(3) === 45) {
        return property.substr(1).replace(pattern, callback);
      } else {
        return property.replace(pattern, callback);
      }
    };
    module.exports = camelCaseCSS;
  }
});

// node_modules/postcss-js/objectifier.js
var require_objectifier = __commonJS({
  "node_modules/postcss-js/objectifier.js"(exports, module) {
    var camelcase = require_index_es5();
    var UNITLESS = {
      boxFlex: true,
      boxFlexGroup: true,
      columnCount: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      strokeDashoffset: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    function atRule(node) {
      if (typeof node.nodes === "undefined") {
        return true;
      } else {
        return process2(node);
      }
    }
    function process2(node) {
      let name;
      let result = {};
      node.each((child) => {
        if (child.type === "atrule") {
          name = "@" + child.name;
          if (child.params)
            name += " " + child.params;
          if (typeof result[name] === "undefined") {
            result[name] = atRule(child);
          } else if (Array.isArray(result[name])) {
            result[name].push(atRule(child));
          } else {
            result[name] = [result[name], atRule(child)];
          }
        } else if (child.type === "rule") {
          let body = process2(child);
          if (result[child.selector]) {
            for (let i in body) {
              result[child.selector][i] = body[i];
            }
          } else {
            result[child.selector] = body;
          }
        } else if (child.type === "decl") {
          if (child.prop[0] === "-" && child.prop[1] === "-") {
            name = child.prop;
          } else if (child.parent && child.parent.selector === ":export") {
            name = child.prop;
          } else {
            name = camelcase(child.prop);
          }
          let value = child.value;
          if (!isNaN(child.value) && UNITLESS[name]) {
            value = parseFloat(child.value);
          }
          if (child.important)
            value += " !important";
          if (typeof result[name] === "undefined") {
            result[name] = value;
          } else if (Array.isArray(result[name])) {
            result[name].push(value);
          } else {
            result[name] = [result[name], value];
          }
        }
      });
      return result;
    }
    module.exports = process2;
  }
});

// (disabled):node_modules/postcss/lib/terminal-highlight
var require_terminal_highlight = __commonJS({
  "(disabled):node_modules/postcss/lib/terminal-highlight"() {
  }
});

// node_modules/postcss/lib/css-syntax-error.js
var require_css_syntax_error = __commonJS({
  "node_modules/postcss/lib/css-syntax-error.js"(exports, module) {
    "use strict";
    var pico = require_picocolors_browser();
    var terminalHighlight = require_terminal_highlight();
    var CssSyntaxError = class _CssSyntaxError extends Error {
      constructor(message, line, column, source, file, plugin) {
        super(message);
        this.name = "CssSyntaxError";
        this.reason = message;
        if (file) {
          this.file = file;
        }
        if (source) {
          this.source = source;
        }
        if (plugin) {
          this.plugin = plugin;
        }
        if (typeof line !== "undefined" && typeof column !== "undefined") {
          if (typeof line === "number") {
            this.line = line;
            this.column = column;
          } else {
            this.line = line.line;
            this.column = line.column;
            this.endLine = column.line;
            this.endColumn = column.column;
          }
        }
        this.setMessage();
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, _CssSyntaxError);
        }
      }
      setMessage() {
        this.message = this.plugin ? this.plugin + ": " : "";
        this.message += this.file ? this.file : "<css input>";
        if (typeof this.line !== "undefined") {
          this.message += ":" + this.line + ":" + this.column;
        }
        this.message += ": " + this.reason;
      }
      showSourceCode(color) {
        if (!this.source)
          return "";
        let css = this.source;
        if (color == null)
          color = pico.isColorSupported;
        if (terminalHighlight) {
          if (color)
            css = terminalHighlight(css);
        }
        let lines = css.split(/\r?\n/);
        let start = Math.max(this.line - 3, 0);
        let end = Math.min(this.line + 2, lines.length);
        let maxWidth = String(end).length;
        let mark, aside;
        if (color) {
          let { bold, gray, red } = pico.createColors(true);
          mark = (text) => bold(red(text));
          aside = (text) => gray(text);
        } else {
          mark = aside = (str) => str;
        }
        return lines.slice(start, end).map((line, index) => {
          let number = start + 1 + index;
          let gutter = " " + (" " + number).slice(-maxWidth) + " | ";
          if (number === this.line) {
            let spacing = aside(gutter.replace(/\d/g, " ")) + line.slice(0, this.column - 1).replace(/[^\t]/g, " ");
            return mark(">") + aside(gutter) + line + "\n " + spacing + mark("^");
          }
          return " " + aside(gutter) + line;
        }).join("\n");
      }
      toString() {
        let code = this.showSourceCode();
        if (code) {
          code = "\n\n" + code + "\n";
        }
        return this.name + ": " + this.message + code;
      }
    };
    module.exports = CssSyntaxError;
    CssSyntaxError.default = CssSyntaxError;
  }
});

// node_modules/postcss/lib/symbols.js
var require_symbols = __commonJS({
  "node_modules/postcss/lib/symbols.js"(exports, module) {
    "use strict";
    module.exports.isClean = Symbol("isClean");
    module.exports.my = Symbol("my");
  }
});

// node_modules/postcss/lib/stringifier.js
var require_stringifier = __commonJS({
  "node_modules/postcss/lib/stringifier.js"(exports, module) {
    "use strict";
    var DEFAULT_RAW = {
      after: "\n",
      beforeClose: "\n",
      beforeComment: "\n",
      beforeDecl: "\n",
      beforeOpen: " ",
      beforeRule: "\n",
      colon: ": ",
      commentLeft: " ",
      commentRight: " ",
      emptyBody: "",
      indent: "    ",
      semicolon: false
    };
    function capitalize(str) {
      return str[0].toUpperCase() + str.slice(1);
    }
    var Stringifier = class {
      constructor(builder) {
        this.builder = builder;
      }
      atrule(node, semicolon) {
        let name = "@" + node.name;
        let params = node.params ? this.rawValue(node, "params") : "";
        if (typeof node.raws.afterName !== "undefined") {
          name += node.raws.afterName;
        } else if (params) {
          name += " ";
        }
        if (node.nodes) {
          this.block(node, name + params);
        } else {
          let end = (node.raws.between || "") + (semicolon ? ";" : "");
          this.builder(name + params + end, node);
        }
      }
      beforeAfter(node, detect) {
        let value;
        if (node.type === "decl") {
          value = this.raw(node, null, "beforeDecl");
        } else if (node.type === "comment") {
          value = this.raw(node, null, "beforeComment");
        } else if (detect === "before") {
          value = this.raw(node, null, "beforeRule");
        } else {
          value = this.raw(node, null, "beforeClose");
        }
        let buf = node.parent;
        let depth = 0;
        while (buf && buf.type !== "root") {
          depth += 1;
          buf = buf.parent;
        }
        if (value.includes("\n")) {
          let indent = this.raw(node, null, "indent");
          if (indent.length) {
            for (let step = 0; step < depth; step++)
              value += indent;
          }
        }
        return value;
      }
      block(node, start) {
        let between = this.raw(node, "between", "beforeOpen");
        this.builder(start + between + "{", node, "start");
        let after;
        if (node.nodes && node.nodes.length) {
          this.body(node);
          after = this.raw(node, "after");
        } else {
          after = this.raw(node, "after", "emptyBody");
        }
        if (after)
          this.builder(after);
        this.builder("}", node, "end");
      }
      body(node) {
        let last = node.nodes.length - 1;
        while (last > 0) {
          if (node.nodes[last].type !== "comment")
            break;
          last -= 1;
        }
        let semicolon = this.raw(node, "semicolon");
        for (let i = 0; i < node.nodes.length; i++) {
          let child = node.nodes[i];
          let before = this.raw(child, "before");
          if (before)
            this.builder(before);
          this.stringify(child, last !== i || semicolon);
        }
      }
      comment(node) {
        let left = this.raw(node, "left", "commentLeft");
        let right = this.raw(node, "right", "commentRight");
        this.builder("/*" + left + node.text + right + "*/", node);
      }
      decl(node, semicolon) {
        let between = this.raw(node, "between", "colon");
        let string = node.prop + between + this.rawValue(node, "value");
        if (node.important) {
          string += node.raws.important || " !important";
        }
        if (semicolon)
          string += ";";
        this.builder(string, node);
      }
      document(node) {
        this.body(node);
      }
      raw(node, own, detect) {
        let value;
        if (!detect)
          detect = own;
        if (own) {
          value = node.raws[own];
          if (typeof value !== "undefined")
            return value;
        }
        let parent = node.parent;
        if (detect === "before") {
          if (!parent || parent.type === "root" && parent.first === node) {
            return "";
          }
          if (parent && parent.type === "document") {
            return "";
          }
        }
        if (!parent)
          return DEFAULT_RAW[detect];
        let root = node.root();
        if (!root.rawCache)
          root.rawCache = {};
        if (typeof root.rawCache[detect] !== "undefined") {
          return root.rawCache[detect];
        }
        if (detect === "before" || detect === "after") {
          return this.beforeAfter(node, detect);
        } else {
          let method = "raw" + capitalize(detect);
          if (this[method]) {
            value = this[method](root, node);
          } else {
            root.walk((i) => {
              value = i.raws[own];
              if (typeof value !== "undefined")
                return false;
            });
          }
        }
        if (typeof value === "undefined")
          value = DEFAULT_RAW[detect];
        root.rawCache[detect] = value;
        return value;
      }
      rawBeforeClose(root) {
        let value;
        root.walk((i) => {
          if (i.nodes && i.nodes.length > 0) {
            if (typeof i.raws.after !== "undefined") {
              value = i.raws.after;
              if (value.includes("\n")) {
                value = value.replace(/[^\n]+$/, "");
              }
              return false;
            }
          }
        });
        if (value)
          value = value.replace(/\S/g, "");
        return value;
      }
      rawBeforeComment(root, node) {
        let value;
        root.walkComments((i) => {
          if (typeof i.raws.before !== "undefined") {
            value = i.raws.before;
            if (value.includes("\n")) {
              value = value.replace(/[^\n]+$/, "");
            }
            return false;
          }
        });
        if (typeof value === "undefined") {
          value = this.raw(node, null, "beforeDecl");
        } else if (value) {
          value = value.replace(/\S/g, "");
        }
        return value;
      }
      rawBeforeDecl(root, node) {
        let value;
        root.walkDecls((i) => {
          if (typeof i.raws.before !== "undefined") {
            value = i.raws.before;
            if (value.includes("\n")) {
              value = value.replace(/[^\n]+$/, "");
            }
            return false;
          }
        });
        if (typeof value === "undefined") {
          value = this.raw(node, null, "beforeRule");
        } else if (value) {
          value = value.replace(/\S/g, "");
        }
        return value;
      }
      rawBeforeOpen(root) {
        let value;
        root.walk((i) => {
          if (i.type !== "decl") {
            value = i.raws.between;
            if (typeof value !== "undefined")
              return false;
          }
        });
        return value;
      }
      rawBeforeRule(root) {
        let value;
        root.walk((i) => {
          if (i.nodes && (i.parent !== root || root.first !== i)) {
            if (typeof i.raws.before !== "undefined") {
              value = i.raws.before;
              if (value.includes("\n")) {
                value = value.replace(/[^\n]+$/, "");
              }
              return false;
            }
          }
        });
        if (value)
          value = value.replace(/\S/g, "");
        return value;
      }
      rawColon(root) {
        let value;
        root.walkDecls((i) => {
          if (typeof i.raws.between !== "undefined") {
            value = i.raws.between.replace(/[^\s:]/g, "");
            return false;
          }
        });
        return value;
      }
      rawEmptyBody(root) {
        let value;
        root.walk((i) => {
          if (i.nodes && i.nodes.length === 0) {
            value = i.raws.after;
            if (typeof value !== "undefined")
              return false;
          }
        });
        return value;
      }
      rawIndent(root) {
        if (root.raws.indent)
          return root.raws.indent;
        let value;
        root.walk((i) => {
          let p = i.parent;
          if (p && p !== root && p.parent && p.parent === root) {
            if (typeof i.raws.before !== "undefined") {
              let parts = i.raws.before.split("\n");
              value = parts[parts.length - 1];
              value = value.replace(/\S/g, "");
              return false;
            }
          }
        });
        return value;
      }
      rawSemicolon(root) {
        let value;
        root.walk((i) => {
          if (i.nodes && i.nodes.length && i.last.type === "decl") {
            value = i.raws.semicolon;
            if (typeof value !== "undefined")
              return false;
          }
        });
        return value;
      }
      rawValue(node, prop) {
        let value = node[prop];
        let raw = node.raws[prop];
        if (raw && raw.value === value) {
          return raw.raw;
        }
        return value;
      }
      root(node) {
        this.body(node);
        if (node.raws.after)
          this.builder(node.raws.after);
      }
      rule(node) {
        this.block(node, this.rawValue(node, "selector"));
        if (node.raws.ownSemicolon) {
          this.builder(node.raws.ownSemicolon, node, "end");
        }
      }
      stringify(node, semicolon) {
        if (!this[node.type]) {
          throw new Error(
            "Unknown AST node type " + node.type + ". Maybe you need to change PostCSS stringifier."
          );
        }
        this[node.type](node, semicolon);
      }
    };
    module.exports = Stringifier;
    Stringifier.default = Stringifier;
  }
});

// node_modules/postcss/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/postcss/lib/stringify.js"(exports, module) {
    "use strict";
    var Stringifier = require_stringifier();
    function stringify(node, builder) {
      let str = new Stringifier(builder);
      str.stringify(node);
    }
    module.exports = stringify;
    stringify.default = stringify;
  }
});

// node_modules/postcss/lib/node.js
var require_node = __commonJS({
  "node_modules/postcss/lib/node.js"(exports, module) {
    "use strict";
    var { isClean, my } = require_symbols();
    var CssSyntaxError = require_css_syntax_error();
    var Stringifier = require_stringifier();
    var stringify = require_stringify();
    function cloneNode(obj, parent) {
      let cloned = new obj.constructor();
      for (let i in obj) {
        if (!Object.prototype.hasOwnProperty.call(obj, i)) {
          continue;
        }
        if (i === "proxyCache")
          continue;
        let value = obj[i];
        let type = typeof value;
        if (i === "parent" && type === "object") {
          if (parent)
            cloned[i] = parent;
        } else if (i === "source") {
          cloned[i] = value;
        } else if (Array.isArray(value)) {
          cloned[i] = value.map((j) => cloneNode(j, cloned));
        } else {
          if (type === "object" && value !== null)
            value = cloneNode(value);
          cloned[i] = value;
        }
      }
      return cloned;
    }
    var Node = class {
      constructor(defaults = {}) {
        this.raws = {};
        this[isClean] = false;
        this[my] = true;
        for (let name in defaults) {
          if (name === "nodes") {
            this.nodes = [];
            for (let node of defaults[name]) {
              if (typeof node.clone === "function") {
                this.append(node.clone());
              } else {
                this.append(node);
              }
            }
          } else {
            this[name] = defaults[name];
          }
        }
      }
      addToError(error) {
        error.postcssNode = this;
        if (error.stack && this.source && /\n\s{4}at /.test(error.stack)) {
          let s = this.source;
          error.stack = error.stack.replace(
            /\n\s{4}at /,
            `$&${s.input.from}:${s.start.line}:${s.start.column}$&`
          );
        }
        return error;
      }
      after(add) {
        this.parent.insertAfter(this, add);
        return this;
      }
      assign(overrides = {}) {
        for (let name in overrides) {
          this[name] = overrides[name];
        }
        return this;
      }
      before(add) {
        this.parent.insertBefore(this, add);
        return this;
      }
      cleanRaws(keepBetween) {
        delete this.raws.before;
        delete this.raws.after;
        if (!keepBetween)
          delete this.raws.between;
      }
      clone(overrides = {}) {
        let cloned = cloneNode(this);
        for (let name in overrides) {
          cloned[name] = overrides[name];
        }
        return cloned;
      }
      cloneAfter(overrides = {}) {
        let cloned = this.clone(overrides);
        this.parent.insertAfter(this, cloned);
        return cloned;
      }
      cloneBefore(overrides = {}) {
        let cloned = this.clone(overrides);
        this.parent.insertBefore(this, cloned);
        return cloned;
      }
      error(message, opts = {}) {
        if (this.source) {
          let { end, start } = this.rangeBy(opts);
          return this.source.input.error(
            message,
            { column: start.column, line: start.line },
            { column: end.column, line: end.line },
            opts
          );
        }
        return new CssSyntaxError(message);
      }
      getProxyProcessor() {
        return {
          get(node, prop) {
            if (prop === "proxyOf") {
              return node;
            } else if (prop === "root") {
              return () => node.root().toProxy();
            } else {
              return node[prop];
            }
          },
          set(node, prop, value) {
            if (node[prop] === value)
              return true;
            node[prop] = value;
            if (prop === "prop" || prop === "value" || prop === "name" || prop === "params" || prop === "important" || /* c8 ignore next */
            prop === "text") {
              node.markDirty();
            }
            return true;
          }
        };
      }
      markDirty() {
        if (this[isClean]) {
          this[isClean] = false;
          let next = this;
          while (next = next.parent) {
            next[isClean] = false;
          }
        }
      }
      next() {
        if (!this.parent)
          return void 0;
        let index = this.parent.index(this);
        return this.parent.nodes[index + 1];
      }
      positionBy(opts, stringRepresentation) {
        let pos = this.source.start;
        if (opts.index) {
          pos = this.positionInside(opts.index, stringRepresentation);
        } else if (opts.word) {
          stringRepresentation = this.toString();
          let index = stringRepresentation.indexOf(opts.word);
          if (index !== -1)
            pos = this.positionInside(index, stringRepresentation);
        }
        return pos;
      }
      positionInside(index, stringRepresentation) {
        let string = stringRepresentation || this.toString();
        let column = this.source.start.column;
        let line = this.source.start.line;
        for (let i = 0; i < index; i++) {
          if (string[i] === "\n") {
            column = 1;
            line += 1;
          } else {
            column += 1;
          }
        }
        return { column, line };
      }
      prev() {
        if (!this.parent)
          return void 0;
        let index = this.parent.index(this);
        return this.parent.nodes[index - 1];
      }
      rangeBy(opts) {
        let start = {
          column: this.source.start.column,
          line: this.source.start.line
        };
        let end = this.source.end ? {
          column: this.source.end.column + 1,
          line: this.source.end.line
        } : {
          column: start.column + 1,
          line: start.line
        };
        if (opts.word) {
          let stringRepresentation = this.toString();
          let index = stringRepresentation.indexOf(opts.word);
          if (index !== -1) {
            start = this.positionInside(index, stringRepresentation);
            end = this.positionInside(index + opts.word.length, stringRepresentation);
          }
        } else {
          if (opts.start) {
            start = {
              column: opts.start.column,
              line: opts.start.line
            };
          } else if (opts.index) {
            start = this.positionInside(opts.index);
          }
          if (opts.end) {
            end = {
              column: opts.end.column,
              line: opts.end.line
            };
          } else if (opts.endIndex) {
            end = this.positionInside(opts.endIndex);
          } else if (opts.index) {
            end = this.positionInside(opts.index + 1);
          }
        }
        if (end.line < start.line || end.line === start.line && end.column <= start.column) {
          end = { column: start.column + 1, line: start.line };
        }
        return { end, start };
      }
      raw(prop, defaultType) {
        let str = new Stringifier();
        return str.raw(this, prop, defaultType);
      }
      remove() {
        if (this.parent) {
          this.parent.removeChild(this);
        }
        this.parent = void 0;
        return this;
      }
      replaceWith(...nodes) {
        if (this.parent) {
          let bookmark = this;
          let foundSelf = false;
          for (let node of nodes) {
            if (node === this) {
              foundSelf = true;
            } else if (foundSelf) {
              this.parent.insertAfter(bookmark, node);
              bookmark = node;
            } else {
              this.parent.insertBefore(bookmark, node);
            }
          }
          if (!foundSelf) {
            this.remove();
          }
        }
        return this;
      }
      root() {
        let result = this;
        while (result.parent && result.parent.type !== "document") {
          result = result.parent;
        }
        return result;
      }
      toJSON(_, inputs) {
        let fixed = {};
        let emitInputs = inputs == null;
        inputs = inputs || /* @__PURE__ */ new Map();
        let inputsNextIndex = 0;
        for (let name in this) {
          if (!Object.prototype.hasOwnProperty.call(this, name)) {
            continue;
          }
          if (name === "parent" || name === "proxyCache")
            continue;
          let value = this[name];
          if (Array.isArray(value)) {
            fixed[name] = value.map((i) => {
              if (typeof i === "object" && i.toJSON) {
                return i.toJSON(null, inputs);
              } else {
                return i;
              }
            });
          } else if (typeof value === "object" && value.toJSON) {
            fixed[name] = value.toJSON(null, inputs);
          } else if (name === "source") {
            let inputId = inputs.get(value.input);
            if (inputId == null) {
              inputId = inputsNextIndex;
              inputs.set(value.input, inputsNextIndex);
              inputsNextIndex++;
            }
            fixed[name] = {
              end: value.end,
              inputId,
              start: value.start
            };
          } else {
            fixed[name] = value;
          }
        }
        if (emitInputs) {
          fixed.inputs = [...inputs.keys()].map((input) => input.toJSON());
        }
        return fixed;
      }
      toProxy() {
        if (!this.proxyCache) {
          this.proxyCache = new Proxy(this, this.getProxyProcessor());
        }
        return this.proxyCache;
      }
      toString(stringifier = stringify) {
        if (stringifier.stringify)
          stringifier = stringifier.stringify;
        let result = "";
        stringifier(this, (i) => {
          result += i;
        });
        return result;
      }
      warn(result, text, opts) {
        let data = { node: this };
        for (let i in opts)
          data[i] = opts[i];
        return result.warn(text, data);
      }
      get proxyOf() {
        return this;
      }
    };
    module.exports = Node;
    Node.default = Node;
  }
});

// node_modules/postcss/lib/declaration.js
var require_declaration = __commonJS({
  "node_modules/postcss/lib/declaration.js"(exports, module) {
    "use strict";
    var Node = require_node();
    var Declaration = class extends Node {
      constructor(defaults) {
        if (defaults && typeof defaults.value !== "undefined" && typeof defaults.value !== "string") {
          defaults = { ...defaults, value: String(defaults.value) };
        }
        super(defaults);
        this.type = "decl";
      }
      get variable() {
        return this.prop.startsWith("--") || this.prop[0] === "$";
      }
    };
    module.exports = Declaration;
    Declaration.default = Declaration;
  }
});

// browser-external:source-map-js
var require_source_map_js = __commonJS({
  "browser-external:source-map-js"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "source-map-js" has been externalized for browser compatibility. Cannot access "source-map-js.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:path
var require_path = __commonJS({
  "browser-external:path"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "path" has been externalized for browser compatibility. Cannot access "path.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:url
var require_url = __commonJS({
  "browser-external:url"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "url" has been externalized for browser compatibility. Cannot access "url.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/nanoid/non-secure/index.cjs
var require_non_secure = __commonJS({
  "node_modules/nanoid/non-secure/index.cjs"(exports, module) {
    var urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
    var customAlphabet = (alphabet, defaultSize = 21) => {
      return (size = defaultSize) => {
        let id = "";
        let i = size;
        while (i--) {
          id += alphabet[Math.random() * alphabet.length | 0];
        }
        return id;
      };
    };
    var nanoid = (size = 21) => {
      let id = "";
      let i = size;
      while (i--) {
        id += urlAlphabet[Math.random() * 64 | 0];
      }
      return id;
    };
    module.exports = { nanoid, customAlphabet };
  }
});

// browser-external:fs
var require_fs = __commonJS({
  "browser-external:fs"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs" has been externalized for browser compatibility. Cannot access "fs.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/postcss/lib/previous-map.js
var require_previous_map = __commonJS({
  "node_modules/postcss/lib/previous-map.js"(exports, module) {
    "use strict";
    var { SourceMapConsumer, SourceMapGenerator } = require_source_map_js();
    var { existsSync, readFileSync } = require_fs();
    var { dirname, join } = require_path();
    function fromBase64(str) {
      if (Buffer) {
        return Buffer.from(str, "base64").toString();
      } else {
        return window.atob(str);
      }
    }
    var PreviousMap = class {
      constructor(css, opts) {
        if (opts.map === false)
          return;
        this.loadAnnotation(css);
        this.inline = this.startWith(this.annotation, "data:");
        let prev = opts.map ? opts.map.prev : void 0;
        let text = this.loadMap(opts.from, prev);
        if (!this.mapFile && opts.from) {
          this.mapFile = opts.from;
        }
        if (this.mapFile)
          this.root = dirname(this.mapFile);
        if (text)
          this.text = text;
      }
      consumer() {
        if (!this.consumerCache) {
          this.consumerCache = new SourceMapConsumer(this.text);
        }
        return this.consumerCache;
      }
      decodeInline(text) {
        let baseCharsetUri = /^data:application\/json;charset=utf-?8;base64,/;
        let baseUri = /^data:application\/json;base64,/;
        let charsetUri = /^data:application\/json;charset=utf-?8,/;
        let uri = /^data:application\/json,/;
        if (charsetUri.test(text) || uri.test(text)) {
          return decodeURIComponent(text.substr(RegExp.lastMatch.length));
        }
        if (baseCharsetUri.test(text) || baseUri.test(text)) {
          return fromBase64(text.substr(RegExp.lastMatch.length));
        }
        let encoding = text.match(/data:application\/json;([^,]+),/)[1];
        throw new Error("Unsupported source map encoding " + encoding);
      }
      getAnnotationURL(sourceMapString) {
        return sourceMapString.replace(/^\/\*\s*# sourceMappingURL=/, "").trim();
      }
      isMap(map) {
        if (typeof map !== "object")
          return false;
        return typeof map.mappings === "string" || typeof map._mappings === "string" || Array.isArray(map.sections);
      }
      loadAnnotation(css) {
        let comments = css.match(/\/\*\s*# sourceMappingURL=/gm);
        if (!comments)
          return;
        let start = css.lastIndexOf(comments.pop());
        let end = css.indexOf("*/", start);
        if (start > -1 && end > -1) {
          this.annotation = this.getAnnotationURL(css.substring(start, end));
        }
      }
      loadFile(path) {
        this.root = dirname(path);
        if (existsSync(path)) {
          this.mapFile = path;
          return readFileSync(path, "utf-8").toString().trim();
        }
      }
      loadMap(file, prev) {
        if (prev === false)
          return false;
        if (prev) {
          if (typeof prev === "string") {
            return prev;
          } else if (typeof prev === "function") {
            let prevPath = prev(file);
            if (prevPath) {
              let map = this.loadFile(prevPath);
              if (!map) {
                throw new Error(
                  "Unable to load previous source map: " + prevPath.toString()
                );
              }
              return map;
            }
          } else if (prev instanceof SourceMapConsumer) {
            return SourceMapGenerator.fromSourceMap(prev).toString();
          } else if (prev instanceof SourceMapGenerator) {
            return prev.toString();
          } else if (this.isMap(prev)) {
            return JSON.stringify(prev);
          } else {
            throw new Error(
              "Unsupported previous source map format: " + prev.toString()
            );
          }
        } else if (this.inline) {
          return this.decodeInline(this.annotation);
        } else if (this.annotation) {
          let map = this.annotation;
          if (file)
            map = join(dirname(file), map);
          return this.loadFile(map);
        }
      }
      startWith(string, start) {
        if (!string)
          return false;
        return string.substr(0, start.length) === start;
      }
      withContent() {
        return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);
      }
    };
    module.exports = PreviousMap;
    PreviousMap.default = PreviousMap;
  }
});

// node_modules/postcss/lib/input.js
var require_input = __commonJS({
  "node_modules/postcss/lib/input.js"(exports, module) {
    "use strict";
    var { SourceMapConsumer, SourceMapGenerator } = require_source_map_js();
    var { fileURLToPath, pathToFileURL } = require_url();
    var { isAbsolute, resolve } = require_path();
    var { nanoid } = require_non_secure();
    var terminalHighlight = require_terminal_highlight();
    var CssSyntaxError = require_css_syntax_error();
    var PreviousMap = require_previous_map();
    var fromOffsetCache = Symbol("fromOffsetCache");
    var sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);
    var pathAvailable = Boolean(resolve && isAbsolute);
    var Input = class {
      constructor(css, opts = {}) {
        if (css === null || typeof css === "undefined" || typeof css === "object" && !css.toString) {
          throw new Error(`PostCSS received ${css} instead of CSS string`);
        }
        this.css = css.toString();
        if (this.css[0] === "\uFEFF" || this.css[0] === "￾") {
          this.hasBOM = true;
          this.css = this.css.slice(1);
        } else {
          this.hasBOM = false;
        }
        if (opts.from) {
          if (!pathAvailable || /^\w+:\/\//.test(opts.from) || isAbsolute(opts.from)) {
            this.file = opts.from;
          } else {
            this.file = resolve(opts.from);
          }
        }
        if (pathAvailable && sourceMapAvailable) {
          let map = new PreviousMap(this.css, opts);
          if (map.text) {
            this.map = map;
            let file = map.consumer().file;
            if (!this.file && file)
              this.file = this.mapResolve(file);
          }
        }
        if (!this.file) {
          this.id = "<input css " + nanoid(6) + ">";
        }
        if (this.map)
          this.map.file = this.from;
      }
      error(message, line, column, opts = {}) {
        let result, endLine, endColumn;
        if (line && typeof line === "object") {
          let start = line;
          let end = column;
          if (typeof start.offset === "number") {
            let pos = this.fromOffset(start.offset);
            line = pos.line;
            column = pos.col;
          } else {
            line = start.line;
            column = start.column;
          }
          if (typeof end.offset === "number") {
            let pos = this.fromOffset(end.offset);
            endLine = pos.line;
            endColumn = pos.col;
          } else {
            endLine = end.line;
            endColumn = end.column;
          }
        } else if (!column) {
          let pos = this.fromOffset(line);
          line = pos.line;
          column = pos.col;
        }
        let origin = this.origin(line, column, endLine, endColumn);
        if (origin) {
          result = new CssSyntaxError(
            message,
            origin.endLine === void 0 ? origin.line : { column: origin.column, line: origin.line },
            origin.endLine === void 0 ? origin.column : { column: origin.endColumn, line: origin.endLine },
            origin.source,
            origin.file,
            opts.plugin
          );
        } else {
          result = new CssSyntaxError(
            message,
            endLine === void 0 ? line : { column, line },
            endLine === void 0 ? column : { column: endColumn, line: endLine },
            this.css,
            this.file,
            opts.plugin
          );
        }
        result.input = { column, endColumn, endLine, line, source: this.css };
        if (this.file) {
          if (pathToFileURL) {
            result.input.url = pathToFileURL(this.file).toString();
          }
          result.input.file = this.file;
        }
        return result;
      }
      fromOffset(offset) {
        let lastLine, lineToIndex;
        if (!this[fromOffsetCache]) {
          let lines = this.css.split("\n");
          lineToIndex = new Array(lines.length);
          let prevIndex = 0;
          for (let i = 0, l = lines.length; i < l; i++) {
            lineToIndex[i] = prevIndex;
            prevIndex += lines[i].length + 1;
          }
          this[fromOffsetCache] = lineToIndex;
        } else {
          lineToIndex = this[fromOffsetCache];
        }
        lastLine = lineToIndex[lineToIndex.length - 1];
        let min = 0;
        if (offset >= lastLine) {
          min = lineToIndex.length - 1;
        } else {
          let max = lineToIndex.length - 2;
          let mid;
          while (min < max) {
            mid = min + (max - min >> 1);
            if (offset < lineToIndex[mid]) {
              max = mid - 1;
            } else if (offset >= lineToIndex[mid + 1]) {
              min = mid + 1;
            } else {
              min = mid;
              break;
            }
          }
        }
        return {
          col: offset - lineToIndex[min] + 1,
          line: min + 1
        };
      }
      mapResolve(file) {
        if (/^\w+:\/\//.test(file)) {
          return file;
        }
        return resolve(this.map.consumer().sourceRoot || this.map.root || ".", file);
      }
      origin(line, column, endLine, endColumn) {
        if (!this.map)
          return false;
        let consumer = this.map.consumer();
        let from = consumer.originalPositionFor({ column, line });
        if (!from.source)
          return false;
        let to;
        if (typeof endLine === "number") {
          to = consumer.originalPositionFor({ column: endColumn, line: endLine });
        }
        let fromUrl;
        if (isAbsolute(from.source)) {
          fromUrl = pathToFileURL(from.source);
        } else {
          fromUrl = new URL(
            from.source,
            this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)
          );
        }
        let result = {
          column: from.column,
          endColumn: to && to.column,
          endLine: to && to.line,
          line: from.line,
          url: fromUrl.toString()
        };
        if (fromUrl.protocol === "file:") {
          if (fileURLToPath) {
            result.file = fileURLToPath(fromUrl);
          } else {
            throw new Error(`file: protocol is not available in this PostCSS build`);
          }
        }
        let source = consumer.sourceContentFor(from.source);
        if (source)
          result.source = source;
        return result;
      }
      toJSON() {
        let json = {};
        for (let name of ["hasBOM", "css", "file", "id"]) {
          if (this[name] != null) {
            json[name] = this[name];
          }
        }
        if (this.map) {
          json.map = { ...this.map };
          if (json.map.consumerCache) {
            json.map.consumerCache = void 0;
          }
        }
        return json;
      }
      get from() {
        return this.file || this.id;
      }
    };
    module.exports = Input;
    Input.default = Input;
    if (terminalHighlight && terminalHighlight.registerInput) {
      terminalHighlight.registerInput(Input);
    }
  }
});

// node_modules/postcss/lib/map-generator.js
var require_map_generator = __commonJS({
  "node_modules/postcss/lib/map-generator.js"(exports, module) {
    "use strict";
    var { SourceMapConsumer, SourceMapGenerator } = require_source_map_js();
    var { dirname, relative, resolve, sep } = require_path();
    var { pathToFileURL } = require_url();
    var Input = require_input();
    var sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);
    var pathAvailable = Boolean(dirname && resolve && relative && sep);
    var MapGenerator = class {
      constructor(stringify, root, opts, cssString) {
        this.stringify = stringify;
        this.mapOpts = opts.map || {};
        this.root = root;
        this.opts = opts;
        this.css = cssString;
        this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute;
        this.memoizedFileURLs = /* @__PURE__ */ new Map();
        this.memoizedPaths = /* @__PURE__ */ new Map();
        this.memoizedURLs = /* @__PURE__ */ new Map();
      }
      addAnnotation() {
        let content;
        if (this.isInline()) {
          content = "data:application/json;base64," + this.toBase64(this.map.toString());
        } else if (typeof this.mapOpts.annotation === "string") {
          content = this.mapOpts.annotation;
        } else if (typeof this.mapOpts.annotation === "function") {
          content = this.mapOpts.annotation(this.opts.to, this.root);
        } else {
          content = this.outputFile() + ".map";
        }
        let eol = "\n";
        if (this.css.includes("\r\n"))
          eol = "\r\n";
        this.css += eol + "/*# sourceMappingURL=" + content + " */";
      }
      applyPrevMaps() {
        for (let prev of this.previous()) {
          let from = this.toUrl(this.path(prev.file));
          let root = prev.root || dirname(prev.file);
          let map;
          if (this.mapOpts.sourcesContent === false) {
            map = new SourceMapConsumer(prev.text);
            if (map.sourcesContent) {
              map.sourcesContent = map.sourcesContent.map(() => null);
            }
          } else {
            map = prev.consumer();
          }
          this.map.applySourceMap(map, from, this.toUrl(this.path(root)));
        }
      }
      clearAnnotation() {
        if (this.mapOpts.annotation === false)
          return;
        if (this.root) {
          let node;
          for (let i = this.root.nodes.length - 1; i >= 0; i--) {
            node = this.root.nodes[i];
            if (node.type !== "comment")
              continue;
            if (node.text.indexOf("# sourceMappingURL=") === 0) {
              this.root.removeChild(i);
            }
          }
        } else if (this.css) {
          this.css = this.css.replace(/(\n)?\/\*#[\S\s]*?\*\/$/gm, "");
        }
      }
      generate() {
        this.clearAnnotation();
        if (pathAvailable && sourceMapAvailable && this.isMap()) {
          return this.generateMap();
        } else {
          let result = "";
          this.stringify(this.root, (i) => {
            result += i;
          });
          return [result];
        }
      }
      generateMap() {
        if (this.root) {
          this.generateString();
        } else if (this.previous().length === 1) {
          let prev = this.previous()[0].consumer();
          prev.file = this.outputFile();
          this.map = SourceMapGenerator.fromSourceMap(prev);
        } else {
          this.map = new SourceMapGenerator({ file: this.outputFile() });
          this.map.addMapping({
            generated: { column: 0, line: 1 },
            original: { column: 0, line: 1 },
            source: this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>"
          });
        }
        if (this.isSourcesContent())
          this.setSourcesContent();
        if (this.root && this.previous().length > 0)
          this.applyPrevMaps();
        if (this.isAnnotation())
          this.addAnnotation();
        if (this.isInline()) {
          return [this.css];
        } else {
          return [this.css, this.map];
        }
      }
      generateString() {
        this.css = "";
        this.map = new SourceMapGenerator({ file: this.outputFile() });
        let line = 1;
        let column = 1;
        let noSource = "<no source>";
        let mapping = {
          generated: { column: 0, line: 0 },
          original: { column: 0, line: 0 },
          source: ""
        };
        let lines, last;
        this.stringify(this.root, (str, node, type) => {
          this.css += str;
          if (node && type !== "end") {
            mapping.generated.line = line;
            mapping.generated.column = column - 1;
            if (node.source && node.source.start) {
              mapping.source = this.sourcePath(node);
              mapping.original.line = node.source.start.line;
              mapping.original.column = node.source.start.column - 1;
              this.map.addMapping(mapping);
            } else {
              mapping.source = noSource;
              mapping.original.line = 1;
              mapping.original.column = 0;
              this.map.addMapping(mapping);
            }
          }
          lines = str.match(/\n/g);
          if (lines) {
            line += lines.length;
            last = str.lastIndexOf("\n");
            column = str.length - last;
          } else {
            column += str.length;
          }
          if (node && type !== "start") {
            let p = node.parent || { raws: {} };
            let childless = node.type === "decl" || node.type === "atrule" && !node.nodes;
            if (!childless || node !== p.last || p.raws.semicolon) {
              if (node.source && node.source.end) {
                mapping.source = this.sourcePath(node);
                mapping.original.line = node.source.end.line;
                mapping.original.column = node.source.end.column - 1;
                mapping.generated.line = line;
                mapping.generated.column = column - 2;
                this.map.addMapping(mapping);
              } else {
                mapping.source = noSource;
                mapping.original.line = 1;
                mapping.original.column = 0;
                mapping.generated.line = line;
                mapping.generated.column = column - 1;
                this.map.addMapping(mapping);
              }
            }
          }
        });
      }
      isAnnotation() {
        if (this.isInline()) {
          return true;
        }
        if (typeof this.mapOpts.annotation !== "undefined") {
          return this.mapOpts.annotation;
        }
        if (this.previous().length) {
          return this.previous().some((i) => i.annotation);
        }
        return true;
      }
      isInline() {
        if (typeof this.mapOpts.inline !== "undefined") {
          return this.mapOpts.inline;
        }
        let annotation = this.mapOpts.annotation;
        if (typeof annotation !== "undefined" && annotation !== true) {
          return false;
        }
        if (this.previous().length) {
          return this.previous().some((i) => i.inline);
        }
        return true;
      }
      isMap() {
        if (typeof this.opts.map !== "undefined") {
          return !!this.opts.map;
        }
        return this.previous().length > 0;
      }
      isSourcesContent() {
        if (typeof this.mapOpts.sourcesContent !== "undefined") {
          return this.mapOpts.sourcesContent;
        }
        if (this.previous().length) {
          return this.previous().some((i) => i.withContent());
        }
        return true;
      }
      outputFile() {
        if (this.opts.to) {
          return this.path(this.opts.to);
        } else if (this.opts.from) {
          return this.path(this.opts.from);
        } else {
          return "to.css";
        }
      }
      path(file) {
        if (this.mapOpts.absolute)
          return file;
        if (file.charCodeAt(0) === 60)
          return file;
        if (/^\w+:\/\//.test(file))
          return file;
        let cached = this.memoizedPaths.get(file);
        if (cached)
          return cached;
        let from = this.opts.to ? dirname(this.opts.to) : ".";
        if (typeof this.mapOpts.annotation === "string") {
          from = dirname(resolve(from, this.mapOpts.annotation));
        }
        let path = relative(from, file);
        this.memoizedPaths.set(file, path);
        return path;
      }
      previous() {
        if (!this.previousMaps) {
          this.previousMaps = [];
          if (this.root) {
            this.root.walk((node) => {
              if (node.source && node.source.input.map) {
                let map = node.source.input.map;
                if (!this.previousMaps.includes(map)) {
                  this.previousMaps.push(map);
                }
              }
            });
          } else {
            let input = new Input(this.css, this.opts);
            if (input.map)
              this.previousMaps.push(input.map);
          }
        }
        return this.previousMaps;
      }
      setSourcesContent() {
        let already = {};
        if (this.root) {
          this.root.walk((node) => {
            if (node.source) {
              let from = node.source.input.from;
              if (from && !already[from]) {
                already[from] = true;
                let fromUrl = this.usesFileUrls ? this.toFileUrl(from) : this.toUrl(this.path(from));
                this.map.setSourceContent(fromUrl, node.source.input.css);
              }
            }
          });
        } else if (this.css) {
          let from = this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>";
          this.map.setSourceContent(from, this.css);
        }
      }
      sourcePath(node) {
        if (this.mapOpts.from) {
          return this.toUrl(this.mapOpts.from);
        } else if (this.usesFileUrls) {
          return this.toFileUrl(node.source.input.from);
        } else {
          return this.toUrl(this.path(node.source.input.from));
        }
      }
      toBase64(str) {
        if (Buffer) {
          return Buffer.from(str).toString("base64");
        } else {
          return window.btoa(unescape(encodeURIComponent(str)));
        }
      }
      toFileUrl(path) {
        let cached = this.memoizedFileURLs.get(path);
        if (cached)
          return cached;
        if (pathToFileURL) {
          let fileURL = pathToFileURL(path).toString();
          this.memoizedFileURLs.set(path, fileURL);
          return fileURL;
        } else {
          throw new Error(
            "`map.absolute` option is not available in this PostCSS build"
          );
        }
      }
      toUrl(path) {
        let cached = this.memoizedURLs.get(path);
        if (cached)
          return cached;
        if (sep === "\\") {
          path = path.replace(/\\/g, "/");
        }
        let url = encodeURI(path).replace(/[#?]/g, encodeURIComponent);
        this.memoizedURLs.set(path, url);
        return url;
      }
    };
    module.exports = MapGenerator;
  }
});

// node_modules/postcss/lib/comment.js
var require_comment = __commonJS({
  "node_modules/postcss/lib/comment.js"(exports, module) {
    "use strict";
    var Node = require_node();
    var Comment = class extends Node {
      constructor(defaults) {
        super(defaults);
        this.type = "comment";
      }
    };
    module.exports = Comment;
    Comment.default = Comment;
  }
});

// node_modules/postcss/lib/container.js
var require_container = __commonJS({
  "node_modules/postcss/lib/container.js"(exports, module) {
    "use strict";
    var { isClean, my } = require_symbols();
    var Declaration = require_declaration();
    var Comment = require_comment();
    var Node = require_node();
    var parse;
    var Rule;
    var AtRule;
    var Root;
    function cleanSource(nodes) {
      return nodes.map((i) => {
        if (i.nodes)
          i.nodes = cleanSource(i.nodes);
        delete i.source;
        return i;
      });
    }
    function markDirtyUp(node) {
      node[isClean] = false;
      if (node.proxyOf.nodes) {
        for (let i of node.proxyOf.nodes) {
          markDirtyUp(i);
        }
      }
    }
    var Container = class _Container extends Node {
      append(...children) {
        for (let child of children) {
          let nodes = this.normalize(child, this.last);
          for (let node of nodes)
            this.proxyOf.nodes.push(node);
        }
        this.markDirty();
        return this;
      }
      cleanRaws(keepBetween) {
        super.cleanRaws(keepBetween);
        if (this.nodes) {
          for (let node of this.nodes)
            node.cleanRaws(keepBetween);
        }
      }
      each(callback) {
        if (!this.proxyOf.nodes)
          return void 0;
        let iterator = this.getIterator();
        let index, result;
        while (this.indexes[iterator] < this.proxyOf.nodes.length) {
          index = this.indexes[iterator];
          result = callback(this.proxyOf.nodes[index], index);
          if (result === false)
            break;
          this.indexes[iterator] += 1;
        }
        delete this.indexes[iterator];
        return result;
      }
      every(condition) {
        return this.nodes.every(condition);
      }
      getIterator() {
        if (!this.lastEach)
          this.lastEach = 0;
        if (!this.indexes)
          this.indexes = {};
        this.lastEach += 1;
        let iterator = this.lastEach;
        this.indexes[iterator] = 0;
        return iterator;
      }
      getProxyProcessor() {
        return {
          get(node, prop) {
            if (prop === "proxyOf") {
              return node;
            } else if (!node[prop]) {
              return node[prop];
            } else if (prop === "each" || typeof prop === "string" && prop.startsWith("walk")) {
              return (...args) => {
                return node[prop](
                  ...args.map((i) => {
                    if (typeof i === "function") {
                      return (child, index) => i(child.toProxy(), index);
                    } else {
                      return i;
                    }
                  })
                );
              };
            } else if (prop === "every" || prop === "some") {
              return (cb) => {
                return node[prop](
                  (child, ...other) => cb(child.toProxy(), ...other)
                );
              };
            } else if (prop === "root") {
              return () => node.root().toProxy();
            } else if (prop === "nodes") {
              return node.nodes.map((i) => i.toProxy());
            } else if (prop === "first" || prop === "last") {
              return node[prop].toProxy();
            } else {
              return node[prop];
            }
          },
          set(node, prop, value) {
            if (node[prop] === value)
              return true;
            node[prop] = value;
            if (prop === "name" || prop === "params" || prop === "selector") {
              node.markDirty();
            }
            return true;
          }
        };
      }
      index(child) {
        if (typeof child === "number")
          return child;
        if (child.proxyOf)
          child = child.proxyOf;
        return this.proxyOf.nodes.indexOf(child);
      }
      insertAfter(exist, add) {
        let existIndex = this.index(exist);
        let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse();
        existIndex = this.index(exist);
        for (let node of nodes)
          this.proxyOf.nodes.splice(existIndex + 1, 0, node);
        let index;
        for (let id in this.indexes) {
          index = this.indexes[id];
          if (existIndex < index) {
            this.indexes[id] = index + nodes.length;
          }
        }
        this.markDirty();
        return this;
      }
      insertBefore(exist, add) {
        let existIndex = this.index(exist);
        let type = existIndex === 0 ? "prepend" : false;
        let nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse();
        existIndex = this.index(exist);
        for (let node of nodes)
          this.proxyOf.nodes.splice(existIndex, 0, node);
        let index;
        for (let id in this.indexes) {
          index = this.indexes[id];
          if (existIndex <= index) {
            this.indexes[id] = index + nodes.length;
          }
        }
        this.markDirty();
        return this;
      }
      normalize(nodes, sample) {
        if (typeof nodes === "string") {
          nodes = cleanSource(parse(nodes).nodes);
        } else if (Array.isArray(nodes)) {
          nodes = nodes.slice(0);
          for (let i of nodes) {
            if (i.parent)
              i.parent.removeChild(i, "ignore");
          }
        } else if (nodes.type === "root" && this.type !== "document") {
          nodes = nodes.nodes.slice(0);
          for (let i of nodes) {
            if (i.parent)
              i.parent.removeChild(i, "ignore");
          }
        } else if (nodes.type) {
          nodes = [nodes];
        } else if (nodes.prop) {
          if (typeof nodes.value === "undefined") {
            throw new Error("Value field is missed in node creation");
          } else if (typeof nodes.value !== "string") {
            nodes.value = String(nodes.value);
          }
          nodes = [new Declaration(nodes)];
        } else if (nodes.selector) {
          nodes = [new Rule(nodes)];
        } else if (nodes.name) {
          nodes = [new AtRule(nodes)];
        } else if (nodes.text) {
          nodes = [new Comment(nodes)];
        } else {
          throw new Error("Unknown node type in node creation");
        }
        let processed = nodes.map((i) => {
          if (!i[my])
            _Container.rebuild(i);
          i = i.proxyOf;
          if (i.parent)
            i.parent.removeChild(i);
          if (i[isClean])
            markDirtyUp(i);
          if (typeof i.raws.before === "undefined") {
            if (sample && typeof sample.raws.before !== "undefined") {
              i.raws.before = sample.raws.before.replace(/\S/g, "");
            }
          }
          i.parent = this.proxyOf;
          return i;
        });
        return processed;
      }
      prepend(...children) {
        children = children.reverse();
        for (let child of children) {
          let nodes = this.normalize(child, this.first, "prepend").reverse();
          for (let node of nodes)
            this.proxyOf.nodes.unshift(node);
          for (let id in this.indexes) {
            this.indexes[id] = this.indexes[id] + nodes.length;
          }
        }
        this.markDirty();
        return this;
      }
      push(child) {
        child.parent = this;
        this.proxyOf.nodes.push(child);
        return this;
      }
      removeAll() {
        for (let node of this.proxyOf.nodes)
          node.parent = void 0;
        this.proxyOf.nodes = [];
        this.markDirty();
        return this;
      }
      removeChild(child) {
        child = this.index(child);
        this.proxyOf.nodes[child].parent = void 0;
        this.proxyOf.nodes.splice(child, 1);
        let index;
        for (let id in this.indexes) {
          index = this.indexes[id];
          if (index >= child) {
            this.indexes[id] = index - 1;
          }
        }
        this.markDirty();
        return this;
      }
      replaceValues(pattern, opts, callback) {
        if (!callback) {
          callback = opts;
          opts = {};
        }
        this.walkDecls((decl) => {
          if (opts.props && !opts.props.includes(decl.prop))
            return;
          if (opts.fast && !decl.value.includes(opts.fast))
            return;
          decl.value = decl.value.replace(pattern, callback);
        });
        this.markDirty();
        return this;
      }
      some(condition) {
        return this.nodes.some(condition);
      }
      walk(callback) {
        return this.each((child, i) => {
          let result;
          try {
            result = callback(child, i);
          } catch (e) {
            throw child.addToError(e);
          }
          if (result !== false && child.walk) {
            result = child.walk(callback);
          }
          return result;
        });
      }
      walkAtRules(name, callback) {
        if (!callback) {
          callback = name;
          return this.walk((child, i) => {
            if (child.type === "atrule") {
              return callback(child, i);
            }
          });
        }
        if (name instanceof RegExp) {
          return this.walk((child, i) => {
            if (child.type === "atrule" && name.test(child.name)) {
              return callback(child, i);
            }
          });
        }
        return this.walk((child, i) => {
          if (child.type === "atrule" && child.name === name) {
            return callback(child, i);
          }
        });
      }
      walkComments(callback) {
        return this.walk((child, i) => {
          if (child.type === "comment") {
            return callback(child, i);
          }
        });
      }
      walkDecls(prop, callback) {
        if (!callback) {
          callback = prop;
          return this.walk((child, i) => {
            if (child.type === "decl") {
              return callback(child, i);
            }
          });
        }
        if (prop instanceof RegExp) {
          return this.walk((child, i) => {
            if (child.type === "decl" && prop.test(child.prop)) {
              return callback(child, i);
            }
          });
        }
        return this.walk((child, i) => {
          if (child.type === "decl" && child.prop === prop) {
            return callback(child, i);
          }
        });
      }
      walkRules(selector, callback) {
        if (!callback) {
          callback = selector;
          return this.walk((child, i) => {
            if (child.type === "rule") {
              return callback(child, i);
            }
          });
        }
        if (selector instanceof RegExp) {
          return this.walk((child, i) => {
            if (child.type === "rule" && selector.test(child.selector)) {
              return callback(child, i);
            }
          });
        }
        return this.walk((child, i) => {
          if (child.type === "rule" && child.selector === selector) {
            return callback(child, i);
          }
        });
      }
      get first() {
        if (!this.proxyOf.nodes)
          return void 0;
        return this.proxyOf.nodes[0];
      }
      get last() {
        if (!this.proxyOf.nodes)
          return void 0;
        return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];
      }
    };
    Container.registerParse = (dependant) => {
      parse = dependant;
    };
    Container.registerRule = (dependant) => {
      Rule = dependant;
    };
    Container.registerAtRule = (dependant) => {
      AtRule = dependant;
    };
    Container.registerRoot = (dependant) => {
      Root = dependant;
    };
    module.exports = Container;
    Container.default = Container;
    Container.rebuild = (node) => {
      if (node.type === "atrule") {
        Object.setPrototypeOf(node, AtRule.prototype);
      } else if (node.type === "rule") {
        Object.setPrototypeOf(node, Rule.prototype);
      } else if (node.type === "decl") {
        Object.setPrototypeOf(node, Declaration.prototype);
      } else if (node.type === "comment") {
        Object.setPrototypeOf(node, Comment.prototype);
      } else if (node.type === "root") {
        Object.setPrototypeOf(node, Root.prototype);
      }
      node[my] = true;
      if (node.nodes) {
        node.nodes.forEach((child) => {
          Container.rebuild(child);
        });
      }
    };
  }
});

// node_modules/postcss/lib/document.js
var require_document = __commonJS({
  "node_modules/postcss/lib/document.js"(exports, module) {
    "use strict";
    var Container = require_container();
    var LazyResult;
    var Processor;
    var Document = class extends Container {
      constructor(defaults) {
        super({ type: "document", ...defaults });
        if (!this.nodes) {
          this.nodes = [];
        }
      }
      toResult(opts = {}) {
        let lazy = new LazyResult(new Processor(), this, opts);
        return lazy.stringify();
      }
    };
    Document.registerLazyResult = (dependant) => {
      LazyResult = dependant;
    };
    Document.registerProcessor = (dependant) => {
      Processor = dependant;
    };
    module.exports = Document;
    Document.default = Document;
  }
});

// node_modules/postcss/lib/warn-once.js
var require_warn_once = __commonJS({
  "node_modules/postcss/lib/warn-once.js"(exports, module) {
    "use strict";
    var printed = {};
    module.exports = function warnOnce(message) {
      if (printed[message])
        return;
      printed[message] = true;
      if (typeof console !== "undefined" && console.warn) {
        console.warn(message);
      }
    };
  }
});

// node_modules/postcss/lib/warning.js
var require_warning = __commonJS({
  "node_modules/postcss/lib/warning.js"(exports, module) {
    "use strict";
    var Warning = class {
      constructor(text, opts = {}) {
        this.type = "warning";
        this.text = text;
        if (opts.node && opts.node.source) {
          let range = opts.node.rangeBy(opts);
          this.line = range.start.line;
          this.column = range.start.column;
          this.endLine = range.end.line;
          this.endColumn = range.end.column;
        }
        for (let opt in opts)
          this[opt] = opts[opt];
      }
      toString() {
        if (this.node) {
          return this.node.error(this.text, {
            index: this.index,
            plugin: this.plugin,
            word: this.word
          }).message;
        }
        if (this.plugin) {
          return this.plugin + ": " + this.text;
        }
        return this.text;
      }
    };
    module.exports = Warning;
    Warning.default = Warning;
  }
});

// node_modules/postcss/lib/result.js
var require_result = __commonJS({
  "node_modules/postcss/lib/result.js"(exports, module) {
    "use strict";
    var Warning = require_warning();
    var Result = class {
      constructor(processor, root, opts) {
        this.processor = processor;
        this.messages = [];
        this.root = root;
        this.opts = opts;
        this.css = void 0;
        this.map = void 0;
      }
      toString() {
        return this.css;
      }
      warn(text, opts = {}) {
        if (!opts.plugin) {
          if (this.lastPlugin && this.lastPlugin.postcssPlugin) {
            opts.plugin = this.lastPlugin.postcssPlugin;
          }
        }
        let warning = new Warning(text, opts);
        this.messages.push(warning);
        return warning;
      }
      warnings() {
        return this.messages.filter((i) => i.type === "warning");
      }
      get content() {
        return this.css;
      }
    };
    module.exports = Result;
    Result.default = Result;
  }
});

// node_modules/postcss/lib/tokenize.js
var require_tokenize = __commonJS({
  "node_modules/postcss/lib/tokenize.js"(exports, module) {
    "use strict";
    var SINGLE_QUOTE = "'".charCodeAt(0);
    var DOUBLE_QUOTE = '"'.charCodeAt(0);
    var BACKSLASH = "\\".charCodeAt(0);
    var SLASH = "/".charCodeAt(0);
    var NEWLINE = "\n".charCodeAt(0);
    var SPACE = " ".charCodeAt(0);
    var FEED = "\f".charCodeAt(0);
    var TAB = "	".charCodeAt(0);
    var CR = "\r".charCodeAt(0);
    var OPEN_SQUARE = "[".charCodeAt(0);
    var CLOSE_SQUARE = "]".charCodeAt(0);
    var OPEN_PARENTHESES = "(".charCodeAt(0);
    var CLOSE_PARENTHESES = ")".charCodeAt(0);
    var OPEN_CURLY = "{".charCodeAt(0);
    var CLOSE_CURLY = "}".charCodeAt(0);
    var SEMICOLON = ";".charCodeAt(0);
    var ASTERISK = "*".charCodeAt(0);
    var COLON = ":".charCodeAt(0);
    var AT = "@".charCodeAt(0);
    var RE_AT_END = /[\t\n\f\r "#'()/;[\\\]{}]/g;
    var RE_WORD_END = /[\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g;
    var RE_BAD_BRACKET = /.[\r\n"'(/\\]/;
    var RE_HEX_ESCAPE = /[\da-f]/i;
    module.exports = function tokenizer(input, options = {}) {
      let css = input.css.valueOf();
      let ignore = options.ignoreErrors;
      let code, next, quote, content, escape;
      let escaped, escapePos, prev, n, currentToken;
      let length = css.length;
      let pos = 0;
      let buffer = [];
      let returned = [];
      function position() {
        return pos;
      }
      function unclosed(what) {
        throw input.error("Unclosed " + what, pos);
      }
      function endOfFile() {
        return returned.length === 0 && pos >= length;
      }
      function nextToken(opts) {
        if (returned.length)
          return returned.pop();
        if (pos >= length)
          return;
        let ignoreUnclosed = opts ? opts.ignoreUnclosed : false;
        code = css.charCodeAt(pos);
        switch (code) {
          case NEWLINE:
          case SPACE:
          case TAB:
          case CR:
          case FEED: {
            next = pos;
            do {
              next += 1;
              code = css.charCodeAt(next);
            } while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);
            currentToken = ["space", css.slice(pos, next)];
            pos = next - 1;
            break;
          }
          case OPEN_SQUARE:
          case CLOSE_SQUARE:
          case OPEN_CURLY:
          case CLOSE_CURLY:
          case COLON:
          case SEMICOLON:
          case CLOSE_PARENTHESES: {
            let controlChar = String.fromCharCode(code);
            currentToken = [controlChar, controlChar, pos];
            break;
          }
          case OPEN_PARENTHESES: {
            prev = buffer.length ? buffer.pop()[1] : "";
            n = css.charCodeAt(pos + 1);
            if (prev === "url" && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE && n !== SPACE && n !== NEWLINE && n !== TAB && n !== FEED && n !== CR) {
              next = pos;
              do {
                escaped = false;
                next = css.indexOf(")", next + 1);
                if (next === -1) {
                  if (ignore || ignoreUnclosed) {
                    next = pos;
                    break;
                  } else {
                    unclosed("bracket");
                  }
                }
                escapePos = next;
                while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
                  escapePos -= 1;
                  escaped = !escaped;
                }
              } while (escaped);
              currentToken = ["brackets", css.slice(pos, next + 1), pos, next];
              pos = next;
            } else {
              next = css.indexOf(")", pos + 1);
              content = css.slice(pos, next + 1);
              if (next === -1 || RE_BAD_BRACKET.test(content)) {
                currentToken = ["(", "(", pos];
              } else {
                currentToken = ["brackets", content, pos, next];
                pos = next;
              }
            }
            break;
          }
          case SINGLE_QUOTE:
          case DOUBLE_QUOTE: {
            quote = code === SINGLE_QUOTE ? "'" : '"';
            next = pos;
            do {
              escaped = false;
              next = css.indexOf(quote, next + 1);
              if (next === -1) {
                if (ignore || ignoreUnclosed) {
                  next = pos + 1;
                  break;
                } else {
                  unclosed("string");
                }
              }
              escapePos = next;
              while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
                escapePos -= 1;
                escaped = !escaped;
              }
            } while (escaped);
            currentToken = ["string", css.slice(pos, next + 1), pos, next];
            pos = next;
            break;
          }
          case AT: {
            RE_AT_END.lastIndex = pos + 1;
            RE_AT_END.test(css);
            if (RE_AT_END.lastIndex === 0) {
              next = css.length - 1;
            } else {
              next = RE_AT_END.lastIndex - 2;
            }
            currentToken = ["at-word", css.slice(pos, next + 1), pos, next];
            pos = next;
            break;
          }
          case BACKSLASH: {
            next = pos;
            escape = true;
            while (css.charCodeAt(next + 1) === BACKSLASH) {
              next += 1;
              escape = !escape;
            }
            code = css.charCodeAt(next + 1);
            if (escape && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {
              next += 1;
              if (RE_HEX_ESCAPE.test(css.charAt(next))) {
                while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {
                  next += 1;
                }
                if (css.charCodeAt(next + 1) === SPACE) {
                  next += 1;
                }
              }
            }
            currentToken = ["word", css.slice(pos, next + 1), pos, next];
            pos = next;
            break;
          }
          default: {
            if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {
              next = css.indexOf("*/", pos + 2) + 1;
              if (next === 0) {
                if (ignore || ignoreUnclosed) {
                  next = css.length;
                } else {
                  unclosed("comment");
                }
              }
              currentToken = ["comment", css.slice(pos, next + 1), pos, next];
              pos = next;
            } else {
              RE_WORD_END.lastIndex = pos + 1;
              RE_WORD_END.test(css);
              if (RE_WORD_END.lastIndex === 0) {
                next = css.length - 1;
              } else {
                next = RE_WORD_END.lastIndex - 2;
              }
              currentToken = ["word", css.slice(pos, next + 1), pos, next];
              buffer.push(currentToken);
              pos = next;
            }
            break;
          }
        }
        pos++;
        return currentToken;
      }
      function back(token) {
        returned.push(token);
      }
      return {
        back,
        endOfFile,
        nextToken,
        position
      };
    };
  }
});

// node_modules/postcss/lib/at-rule.js
var require_at_rule = __commonJS({
  "node_modules/postcss/lib/at-rule.js"(exports, module) {
    "use strict";
    var Container = require_container();
    var AtRule = class extends Container {
      constructor(defaults) {
        super(defaults);
        this.type = "atrule";
      }
      append(...children) {
        if (!this.proxyOf.nodes)
          this.nodes = [];
        return super.append(...children);
      }
      prepend(...children) {
        if (!this.proxyOf.nodes)
          this.nodes = [];
        return super.prepend(...children);
      }
    };
    module.exports = AtRule;
    AtRule.default = AtRule;
    Container.registerAtRule(AtRule);
  }
});

// node_modules/postcss/lib/root.js
var require_root = __commonJS({
  "node_modules/postcss/lib/root.js"(exports, module) {
    "use strict";
    var Container = require_container();
    var LazyResult;
    var Processor;
    var Root = class extends Container {
      constructor(defaults) {
        super(defaults);
        this.type = "root";
        if (!this.nodes)
          this.nodes = [];
      }
      normalize(child, sample, type) {
        let nodes = super.normalize(child);
        if (sample) {
          if (type === "prepend") {
            if (this.nodes.length > 1) {
              sample.raws.before = this.nodes[1].raws.before;
            } else {
              delete sample.raws.before;
            }
          } else if (this.first !== sample) {
            for (let node of nodes) {
              node.raws.before = sample.raws.before;
            }
          }
        }
        return nodes;
      }
      removeChild(child, ignore) {
        let index = this.index(child);
        if (!ignore && index === 0 && this.nodes.length > 1) {
          this.nodes[1].raws.before = this.nodes[index].raws.before;
        }
        return super.removeChild(child);
      }
      toResult(opts = {}) {
        let lazy = new LazyResult(new Processor(), this, opts);
        return lazy.stringify();
      }
    };
    Root.registerLazyResult = (dependant) => {
      LazyResult = dependant;
    };
    Root.registerProcessor = (dependant) => {
      Processor = dependant;
    };
    module.exports = Root;
    Root.default = Root;
    Container.registerRoot(Root);
  }
});

// node_modules/postcss/lib/list.js
var require_list = __commonJS({
  "node_modules/postcss/lib/list.js"(exports, module) {
    "use strict";
    var list = {
      comma(string) {
        return list.split(string, [","], true);
      },
      space(string) {
        let spaces = [" ", "\n", "	"];
        return list.split(string, spaces);
      },
      split(string, separators, last) {
        let array = [];
        let current = "";
        let split = false;
        let func = 0;
        let inQuote = false;
        let prevQuote = "";
        let escape = false;
        for (let letter of string) {
          if (escape) {
            escape = false;
          } else if (letter === "\\") {
            escape = true;
          } else if (inQuote) {
            if (letter === prevQuote) {
              inQuote = false;
            }
          } else if (letter === '"' || letter === "'") {
            inQuote = true;
            prevQuote = letter;
          } else if (letter === "(") {
            func += 1;
          } else if (letter === ")") {
            if (func > 0)
              func -= 1;
          } else if (func === 0) {
            if (separators.includes(letter))
              split = true;
          }
          if (split) {
            if (current !== "")
              array.push(current.trim());
            current = "";
            split = false;
          } else {
            current += letter;
          }
        }
        if (last || current !== "")
          array.push(current.trim());
        return array;
      }
    };
    module.exports = list;
    list.default = list;
  }
});

// node_modules/postcss/lib/rule.js
var require_rule = __commonJS({
  "node_modules/postcss/lib/rule.js"(exports, module) {
    "use strict";
    var Container = require_container();
    var list = require_list();
    var Rule = class extends Container {
      constructor(defaults) {
        super(defaults);
        this.type = "rule";
        if (!this.nodes)
          this.nodes = [];
      }
      get selectors() {
        return list.comma(this.selector);
      }
      set selectors(values) {
        let match = this.selector ? this.selector.match(/,\s*/) : null;
        let sep = match ? match[0] : "," + this.raw("between", "beforeOpen");
        this.selector = values.join(sep);
      }
    };
    module.exports = Rule;
    Rule.default = Rule;
    Container.registerRule(Rule);
  }
});

// node_modules/postcss/lib/parser.js
var require_parser = __commonJS({
  "node_modules/postcss/lib/parser.js"(exports, module) {
    "use strict";
    var Declaration = require_declaration();
    var tokenizer = require_tokenize();
    var Comment = require_comment();
    var AtRule = require_at_rule();
    var Root = require_root();
    var Rule = require_rule();
    var SAFE_COMMENT_NEIGHBOR = {
      empty: true,
      space: true
    };
    function findLastWithPosition(tokens) {
      for (let i = tokens.length - 1; i >= 0; i--) {
        let token = tokens[i];
        let pos = token[3] || token[2];
        if (pos)
          return pos;
      }
    }
    var Parser = class {
      constructor(input) {
        this.input = input;
        this.root = new Root();
        this.current = this.root;
        this.spaces = "";
        this.semicolon = false;
        this.customProperty = false;
        this.createTokenizer();
        this.root.source = { input, start: { column: 1, line: 1, offset: 0 } };
      }
      atrule(token) {
        let node = new AtRule();
        node.name = token[1].slice(1);
        if (node.name === "") {
          this.unnamedAtrule(node, token);
        }
        this.init(node, token[2]);
        let type;
        let prev;
        let shift;
        let last = false;
        let open = false;
        let params = [];
        let brackets = [];
        while (!this.tokenizer.endOfFile()) {
          token = this.tokenizer.nextToken();
          type = token[0];
          if (type === "(" || type === "[") {
            brackets.push(type === "(" ? ")" : "]");
          } else if (type === "{" && brackets.length > 0) {
            brackets.push("}");
          } else if (type === brackets[brackets.length - 1]) {
            brackets.pop();
          }
          if (brackets.length === 0) {
            if (type === ";") {
              node.source.end = this.getPosition(token[2]);
              node.source.end.offset++;
              this.semicolon = true;
              break;
            } else if (type === "{") {
              open = true;
              break;
            } else if (type === "}") {
              if (params.length > 0) {
                shift = params.length - 1;
                prev = params[shift];
                while (prev && prev[0] === "space") {
                  prev = params[--shift];
                }
                if (prev) {
                  node.source.end = this.getPosition(prev[3] || prev[2]);
                  node.source.end.offset++;
                }
              }
              this.end(token);
              break;
            } else {
              params.push(token);
            }
          } else {
            params.push(token);
          }
          if (this.tokenizer.endOfFile()) {
            last = true;
            break;
          }
        }
        node.raws.between = this.spacesAndCommentsFromEnd(params);
        if (params.length) {
          node.raws.afterName = this.spacesAndCommentsFromStart(params);
          this.raw(node, "params", params);
          if (last) {
            token = params[params.length - 1];
            node.source.end = this.getPosition(token[3] || token[2]);
            node.source.end.offset++;
            this.spaces = node.raws.between;
            node.raws.between = "";
          }
        } else {
          node.raws.afterName = "";
          node.params = "";
        }
        if (open) {
          node.nodes = [];
          this.current = node;
        }
      }
      checkMissedSemicolon(tokens) {
        let colon = this.colon(tokens);
        if (colon === false)
          return;
        let founded = 0;
        let token;
        for (let j = colon - 1; j >= 0; j--) {
          token = tokens[j];
          if (token[0] !== "space") {
            founded += 1;
            if (founded === 2)
              break;
          }
        }
        throw this.input.error(
          "Missed semicolon",
          token[0] === "word" ? token[3] + 1 : token[2]
        );
      }
      colon(tokens) {
        let brackets = 0;
        let token, type, prev;
        for (let [i, element] of tokens.entries()) {
          token = element;
          type = token[0];
          if (type === "(") {
            brackets += 1;
          }
          if (type === ")") {
            brackets -= 1;
          }
          if (brackets === 0 && type === ":") {
            if (!prev) {
              this.doubleColon(token);
            } else if (prev[0] === "word" && prev[1] === "progid") {
              continue;
            } else {
              return i;
            }
          }
          prev = token;
        }
        return false;
      }
      comment(token) {
        let node = new Comment();
        this.init(node, token[2]);
        node.source.end = this.getPosition(token[3] || token[2]);
        node.source.end.offset++;
        let text = token[1].slice(2, -2);
        if (/^\s*$/.test(text)) {
          node.text = "";
          node.raws.left = text;
          node.raws.right = "";
        } else {
          let match = text.match(/^(\s*)([^]*\S)(\s*)$/);
          node.text = match[2];
          node.raws.left = match[1];
          node.raws.right = match[3];
        }
      }
      createTokenizer() {
        this.tokenizer = tokenizer(this.input);
      }
      decl(tokens, customProperty) {
        let node = new Declaration();
        this.init(node, tokens[0][2]);
        let last = tokens[tokens.length - 1];
        if (last[0] === ";") {
          this.semicolon = true;
          tokens.pop();
        }
        node.source.end = this.getPosition(
          last[3] || last[2] || findLastWithPosition(tokens)
        );
        node.source.end.offset++;
        while (tokens[0][0] !== "word") {
          if (tokens.length === 1)
            this.unknownWord(tokens);
          node.raws.before += tokens.shift()[1];
        }
        node.source.start = this.getPosition(tokens[0][2]);
        node.prop = "";
        while (tokens.length) {
          let type = tokens[0][0];
          if (type === ":" || type === "space" || type === "comment") {
            break;
          }
          node.prop += tokens.shift()[1];
        }
        node.raws.between = "";
        let token;
        while (tokens.length) {
          token = tokens.shift();
          if (token[0] === ":") {
            node.raws.between += token[1];
            break;
          } else {
            if (token[0] === "word" && /\w/.test(token[1])) {
              this.unknownWord([token]);
            }
            node.raws.between += token[1];
          }
        }
        if (node.prop[0] === "_" || node.prop[0] === "*") {
          node.raws.before += node.prop[0];
          node.prop = node.prop.slice(1);
        }
        let firstSpaces = [];
        let next;
        while (tokens.length) {
          next = tokens[0][0];
          if (next !== "space" && next !== "comment")
            break;
          firstSpaces.push(tokens.shift());
        }
        this.precheckMissedSemicolon(tokens);
        for (let i = tokens.length - 1; i >= 0; i--) {
          token = tokens[i];
          if (token[1].toLowerCase() === "!important") {
            node.important = true;
            let string = this.stringFrom(tokens, i);
            string = this.spacesFromEnd(tokens) + string;
            if (string !== " !important")
              node.raws.important = string;
            break;
          } else if (token[1].toLowerCase() === "important") {
            let cache = tokens.slice(0);
            let str = "";
            for (let j = i; j > 0; j--) {
              let type = cache[j][0];
              if (str.trim().indexOf("!") === 0 && type !== "space") {
                break;
              }
              str = cache.pop()[1] + str;
            }
            if (str.trim().indexOf("!") === 0) {
              node.important = true;
              node.raws.important = str;
              tokens = cache;
            }
          }
          if (token[0] !== "space" && token[0] !== "comment") {
            break;
          }
        }
        let hasWord = tokens.some((i) => i[0] !== "space" && i[0] !== "comment");
        if (hasWord) {
          node.raws.between += firstSpaces.map((i) => i[1]).join("");
          firstSpaces = [];
        }
        this.raw(node, "value", firstSpaces.concat(tokens), customProperty);
        if (node.value.includes(":") && !customProperty) {
          this.checkMissedSemicolon(tokens);
        }
      }
      doubleColon(token) {
        throw this.input.error(
          "Double colon",
          { offset: token[2] },
          { offset: token[2] + token[1].length }
        );
      }
      emptyRule(token) {
        let node = new Rule();
        this.init(node, token[2]);
        node.selector = "";
        node.raws.between = "";
        this.current = node;
      }
      end(token) {
        if (this.current.nodes && this.current.nodes.length) {
          this.current.raws.semicolon = this.semicolon;
        }
        this.semicolon = false;
        this.current.raws.after = (this.current.raws.after || "") + this.spaces;
        this.spaces = "";
        if (this.current.parent) {
          this.current.source.end = this.getPosition(token[2]);
          this.current.source.end.offset++;
          this.current = this.current.parent;
        } else {
          this.unexpectedClose(token);
        }
      }
      endFile() {
        if (this.current.parent)
          this.unclosedBlock();
        if (this.current.nodes && this.current.nodes.length) {
          this.current.raws.semicolon = this.semicolon;
        }
        this.current.raws.after = (this.current.raws.after || "") + this.spaces;
        this.root.source.end = this.getPosition(this.tokenizer.position());
      }
      freeSemicolon(token) {
        this.spaces += token[1];
        if (this.current.nodes) {
          let prev = this.current.nodes[this.current.nodes.length - 1];
          if (prev && prev.type === "rule" && !prev.raws.ownSemicolon) {
            prev.raws.ownSemicolon = this.spaces;
            this.spaces = "";
          }
        }
      }
      // Helpers
      getPosition(offset) {
        let pos = this.input.fromOffset(offset);
        return {
          column: pos.col,
          line: pos.line,
          offset
        };
      }
      init(node, offset) {
        this.current.push(node);
        node.source = {
          input: this.input,
          start: this.getPosition(offset)
        };
        node.raws.before = this.spaces;
        this.spaces = "";
        if (node.type !== "comment")
          this.semicolon = false;
      }
      other(start) {
        let end = false;
        let type = null;
        let colon = false;
        let bracket = null;
        let brackets = [];
        let customProperty = start[1].startsWith("--");
        let tokens = [];
        let token = start;
        while (token) {
          type = token[0];
          tokens.push(token);
          if (type === "(" || type === "[") {
            if (!bracket)
              bracket = token;
            brackets.push(type === "(" ? ")" : "]");
          } else if (customProperty && colon && type === "{") {
            if (!bracket)
              bracket = token;
            brackets.push("}");
          } else if (brackets.length === 0) {
            if (type === ";") {
              if (colon) {
                this.decl(tokens, customProperty);
                return;
              } else {
                break;
              }
            } else if (type === "{") {
              this.rule(tokens);
              return;
            } else if (type === "}") {
              this.tokenizer.back(tokens.pop());
              end = true;
              break;
            } else if (type === ":") {
              colon = true;
            }
          } else if (type === brackets[brackets.length - 1]) {
            brackets.pop();
            if (brackets.length === 0)
              bracket = null;
          }
          token = this.tokenizer.nextToken();
        }
        if (this.tokenizer.endOfFile())
          end = true;
        if (brackets.length > 0)
          this.unclosedBracket(bracket);
        if (end && colon) {
          if (!customProperty) {
            while (tokens.length) {
              token = tokens[tokens.length - 1][0];
              if (token !== "space" && token !== "comment")
                break;
              this.tokenizer.back(tokens.pop());
            }
          }
          this.decl(tokens, customProperty);
        } else {
          this.unknownWord(tokens);
        }
      }
      parse() {
        let token;
        while (!this.tokenizer.endOfFile()) {
          token = this.tokenizer.nextToken();
          switch (token[0]) {
            case "space":
              this.spaces += token[1];
              break;
            case ";":
              this.freeSemicolon(token);
              break;
            case "}":
              this.end(token);
              break;
            case "comment":
              this.comment(token);
              break;
            case "at-word":
              this.atrule(token);
              break;
            case "{":
              this.emptyRule(token);
              break;
            default:
              this.other(token);
              break;
          }
        }
        this.endFile();
      }
      precheckMissedSemicolon() {
      }
      raw(node, prop, tokens, customProperty) {
        let token, type;
        let length = tokens.length;
        let value = "";
        let clean = true;
        let next, prev;
        for (let i = 0; i < length; i += 1) {
          token = tokens[i];
          type = token[0];
          if (type === "space" && i === length - 1 && !customProperty) {
            clean = false;
          } else if (type === "comment") {
            prev = tokens[i - 1] ? tokens[i - 1][0] : "empty";
            next = tokens[i + 1] ? tokens[i + 1][0] : "empty";
            if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {
              if (value.slice(-1) === ",") {
                clean = false;
              } else {
                value += token[1];
              }
            } else {
              clean = false;
            }
          } else {
            value += token[1];
          }
        }
        if (!clean) {
          let raw = tokens.reduce((all, i) => all + i[1], "");
          node.raws[prop] = { raw, value };
        }
        node[prop] = value;
      }
      rule(tokens) {
        tokens.pop();
        let node = new Rule();
        this.init(node, tokens[0][2]);
        node.raws.between = this.spacesAndCommentsFromEnd(tokens);
        this.raw(node, "selector", tokens);
        this.current = node;
      }
      spacesAndCommentsFromEnd(tokens) {
        let lastTokenType;
        let spaces = "";
        while (tokens.length) {
          lastTokenType = tokens[tokens.length - 1][0];
          if (lastTokenType !== "space" && lastTokenType !== "comment")
            break;
          spaces = tokens.pop()[1] + spaces;
        }
        return spaces;
      }
      // Errors
      spacesAndCommentsFromStart(tokens) {
        let next;
        let spaces = "";
        while (tokens.length) {
          next = tokens[0][0];
          if (next !== "space" && next !== "comment")
            break;
          spaces += tokens.shift()[1];
        }
        return spaces;
      }
      spacesFromEnd(tokens) {
        let lastTokenType;
        let spaces = "";
        while (tokens.length) {
          lastTokenType = tokens[tokens.length - 1][0];
          if (lastTokenType !== "space")
            break;
          spaces = tokens.pop()[1] + spaces;
        }
        return spaces;
      }
      stringFrom(tokens, from) {
        let result = "";
        for (let i = from; i < tokens.length; i++) {
          result += tokens[i][1];
        }
        tokens.splice(from, tokens.length - from);
        return result;
      }
      unclosedBlock() {
        let pos = this.current.source.start;
        throw this.input.error("Unclosed block", pos.line, pos.column);
      }
      unclosedBracket(bracket) {
        throw this.input.error(
          "Unclosed bracket",
          { offset: bracket[2] },
          { offset: bracket[2] + 1 }
        );
      }
      unexpectedClose(token) {
        throw this.input.error(
          "Unexpected }",
          { offset: token[2] },
          { offset: token[2] + 1 }
        );
      }
      unknownWord(tokens) {
        throw this.input.error(
          "Unknown word",
          { offset: tokens[0][2] },
          { offset: tokens[0][2] + tokens[0][1].length }
        );
      }
      unnamedAtrule(node, token) {
        throw this.input.error(
          "At-rule without name",
          { offset: token[2] },
          { offset: token[2] + token[1].length }
        );
      }
    };
    module.exports = Parser;
  }
});

// node_modules/postcss/lib/parse.js
var require_parse = __commonJS({
  "node_modules/postcss/lib/parse.js"(exports, module) {
    "use strict";
    var Container = require_container();
    var Parser = require_parser();
    var Input = require_input();
    function parse(css, opts) {
      let input = new Input(css, opts);
      let parser = new Parser(input);
      try {
        parser.parse();
      } catch (e) {
        if (true) {
          if (e.name === "CssSyntaxError" && opts && opts.from) {
            if (/\.scss$/i.test(opts.from)) {
              e.message += "\nYou tried to parse SCSS with the standard CSS parser; try again with the postcss-scss parser";
            } else if (/\.sass/i.test(opts.from)) {
              e.message += "\nYou tried to parse Sass with the standard CSS parser; try again with the postcss-sass parser";
            } else if (/\.less$/i.test(opts.from)) {
              e.message += "\nYou tried to parse Less with the standard CSS parser; try again with the postcss-less parser";
            }
          }
        }
        throw e;
      }
      return parser.root;
    }
    module.exports = parse;
    parse.default = parse;
    Container.registerParse(parse);
  }
});

// node_modules/postcss/lib/lazy-result.js
var require_lazy_result = __commonJS({
  "node_modules/postcss/lib/lazy-result.js"(exports, module) {
    "use strict";
    var { isClean, my } = require_symbols();
    var MapGenerator = require_map_generator();
    var stringify = require_stringify();
    var Container = require_container();
    var Document = require_document();
    var warnOnce = require_warn_once();
    var Result = require_result();
    var parse = require_parse();
    var Root = require_root();
    var TYPE_TO_CLASS_NAME = {
      atrule: "AtRule",
      comment: "Comment",
      decl: "Declaration",
      document: "Document",
      root: "Root",
      rule: "Rule"
    };
    var PLUGIN_PROPS = {
      AtRule: true,
      AtRuleExit: true,
      Comment: true,
      CommentExit: true,
      Declaration: true,
      DeclarationExit: true,
      Document: true,
      DocumentExit: true,
      Once: true,
      OnceExit: true,
      postcssPlugin: true,
      prepare: true,
      Root: true,
      RootExit: true,
      Rule: true,
      RuleExit: true
    };
    var NOT_VISITORS = {
      Once: true,
      postcssPlugin: true,
      prepare: true
    };
    var CHILDREN = 0;
    function isPromise(obj) {
      return typeof obj === "object" && typeof obj.then === "function";
    }
    function getEvents(node) {
      let key = false;
      let type = TYPE_TO_CLASS_NAME[node.type];
      if (node.type === "decl") {
        key = node.prop.toLowerCase();
      } else if (node.type === "atrule") {
        key = node.name.toLowerCase();
      }
      if (key && node.append) {
        return [
          type,
          type + "-" + key,
          CHILDREN,
          type + "Exit",
          type + "Exit-" + key
        ];
      } else if (key) {
        return [type, type + "-" + key, type + "Exit", type + "Exit-" + key];
      } else if (node.append) {
        return [type, CHILDREN, type + "Exit"];
      } else {
        return [type, type + "Exit"];
      }
    }
    function toStack(node) {
      let events;
      if (node.type === "document") {
        events = ["Document", CHILDREN, "DocumentExit"];
      } else if (node.type === "root") {
        events = ["Root", CHILDREN, "RootExit"];
      } else {
        events = getEvents(node);
      }
      return {
        eventIndex: 0,
        events,
        iterator: 0,
        node,
        visitorIndex: 0,
        visitors: []
      };
    }
    function cleanMarks(node) {
      node[isClean] = false;
      if (node.nodes)
        node.nodes.forEach((i) => cleanMarks(i));
      return node;
    }
    var postcss = {};
    var LazyResult = class _LazyResult {
      constructor(processor, css, opts) {
        this.stringified = false;
        this.processed = false;
        let root;
        if (typeof css === "object" && css !== null && (css.type === "root" || css.type === "document")) {
          root = cleanMarks(css);
        } else if (css instanceof _LazyResult || css instanceof Result) {
          root = cleanMarks(css.root);
          if (css.map) {
            if (typeof opts.map === "undefined")
              opts.map = {};
            if (!opts.map.inline)
              opts.map.inline = false;
            opts.map.prev = css.map;
          }
        } else {
          let parser = parse;
          if (opts.syntax)
            parser = opts.syntax.parse;
          if (opts.parser)
            parser = opts.parser;
          if (parser.parse)
            parser = parser.parse;
          try {
            root = parser(css, opts);
          } catch (error) {
            this.processed = true;
            this.error = error;
          }
          if (root && !root[my]) {
            Container.rebuild(root);
          }
        }
        this.result = new Result(processor, root, opts);
        this.helpers = { ...postcss, postcss, result: this.result };
        this.plugins = this.processor.plugins.map((plugin) => {
          if (typeof plugin === "object" && plugin.prepare) {
            return { ...plugin, ...plugin.prepare(this.result) };
          } else {
            return plugin;
          }
        });
      }
      async() {
        if (this.error)
          return Promise.reject(this.error);
        if (this.processed)
          return Promise.resolve(this.result);
        if (!this.processing) {
          this.processing = this.runAsync();
        }
        return this.processing;
      }
      catch(onRejected) {
        return this.async().catch(onRejected);
      }
      finally(onFinally) {
        return this.async().then(onFinally, onFinally);
      }
      getAsyncError() {
        throw new Error("Use process(css).then(cb) to work with async plugins");
      }
      handleError(error, node) {
        let plugin = this.result.lastPlugin;
        try {
          if (node)
            node.addToError(error);
          this.error = error;
          if (error.name === "CssSyntaxError" && !error.plugin) {
            error.plugin = plugin.postcssPlugin;
            error.setMessage();
          } else if (plugin.postcssVersion) {
            if (true) {
              let pluginName = plugin.postcssPlugin;
              let pluginVer = plugin.postcssVersion;
              let runtimeVer = this.result.processor.version;
              let a = pluginVer.split(".");
              let b = runtimeVer.split(".");
              if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {
                console.error(
                  "Unknown error from PostCSS plugin. Your current PostCSS version is " + runtimeVer + ", but " + pluginName + " uses " + pluginVer + ". Perhaps this is the source of the error below."
                );
              }
            }
          }
        } catch (err) {
          if (console && console.error)
            console.error(err);
        }
        return error;
      }
      prepareVisitors() {
        this.listeners = {};
        let add = (plugin, type, cb) => {
          if (!this.listeners[type])
            this.listeners[type] = [];
          this.listeners[type].push([plugin, cb]);
        };
        for (let plugin of this.plugins) {
          if (typeof plugin === "object") {
            for (let event in plugin) {
              if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {
                throw new Error(
                  `Unknown event ${event} in ${plugin.postcssPlugin}. Try to update PostCSS (${this.processor.version} now).`
                );
              }
              if (!NOT_VISITORS[event]) {
                if (typeof plugin[event] === "object") {
                  for (let filter in plugin[event]) {
                    if (filter === "*") {
                      add(plugin, event, plugin[event][filter]);
                    } else {
                      add(
                        plugin,
                        event + "-" + filter.toLowerCase(),
                        plugin[event][filter]
                      );
                    }
                  }
                } else if (typeof plugin[event] === "function") {
                  add(plugin, event, plugin[event]);
                }
              }
            }
          }
        }
        this.hasListener = Object.keys(this.listeners).length > 0;
      }
      async runAsync() {
        this.plugin = 0;
        for (let i = 0; i < this.plugins.length; i++) {
          let plugin = this.plugins[i];
          let promise = this.runOnRoot(plugin);
          if (isPromise(promise)) {
            try {
              await promise;
            } catch (error) {
              throw this.handleError(error);
            }
          }
        }
        this.prepareVisitors();
        if (this.hasListener) {
          let root = this.result.root;
          while (!root[isClean]) {
            root[isClean] = true;
            let stack = [toStack(root)];
            while (stack.length > 0) {
              let promise = this.visitTick(stack);
              if (isPromise(promise)) {
                try {
                  await promise;
                } catch (e) {
                  let node = stack[stack.length - 1].node;
                  throw this.handleError(e, node);
                }
              }
            }
          }
          if (this.listeners.OnceExit) {
            for (let [plugin, visitor] of this.listeners.OnceExit) {
              this.result.lastPlugin = plugin;
              try {
                if (root.type === "document") {
                  let roots = root.nodes.map(
                    (subRoot) => visitor(subRoot, this.helpers)
                  );
                  await Promise.all(roots);
                } else {
                  await visitor(root, this.helpers);
                }
              } catch (e) {
                throw this.handleError(e);
              }
            }
          }
        }
        this.processed = true;
        return this.stringify();
      }
      runOnRoot(plugin) {
        this.result.lastPlugin = plugin;
        try {
          if (typeof plugin === "object" && plugin.Once) {
            if (this.result.root.type === "document") {
              let roots = this.result.root.nodes.map(
                (root) => plugin.Once(root, this.helpers)
              );
              if (isPromise(roots[0])) {
                return Promise.all(roots);
              }
              return roots;
            }
            return plugin.Once(this.result.root, this.helpers);
          } else if (typeof plugin === "function") {
            return plugin(this.result.root, this.result);
          }
        } catch (error) {
          throw this.handleError(error);
        }
      }
      stringify() {
        if (this.error)
          throw this.error;
        if (this.stringified)
          return this.result;
        this.stringified = true;
        this.sync();
        let opts = this.result.opts;
        let str = stringify;
        if (opts.syntax)
          str = opts.syntax.stringify;
        if (opts.stringifier)
          str = opts.stringifier;
        if (str.stringify)
          str = str.stringify;
        let map = new MapGenerator(str, this.result.root, this.result.opts);
        let data = map.generate();
        this.result.css = data[0];
        this.result.map = data[1];
        return this.result;
      }
      sync() {
        if (this.error)
          throw this.error;
        if (this.processed)
          return this.result;
        this.processed = true;
        if (this.processing) {
          throw this.getAsyncError();
        }
        for (let plugin of this.plugins) {
          let promise = this.runOnRoot(plugin);
          if (isPromise(promise)) {
            throw this.getAsyncError();
          }
        }
        this.prepareVisitors();
        if (this.hasListener) {
          let root = this.result.root;
          while (!root[isClean]) {
            root[isClean] = true;
            this.walkSync(root);
          }
          if (this.listeners.OnceExit) {
            if (root.type === "document") {
              for (let subRoot of root.nodes) {
                this.visitSync(this.listeners.OnceExit, subRoot);
              }
            } else {
              this.visitSync(this.listeners.OnceExit, root);
            }
          }
        }
        return this.result;
      }
      then(onFulfilled, onRejected) {
        if (true) {
          if (!("from" in this.opts)) {
            warnOnce(
              "Without `from` option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to `undefined` to prevent this warning."
            );
          }
        }
        return this.async().then(onFulfilled, onRejected);
      }
      toString() {
        return this.css;
      }
      visitSync(visitors, node) {
        for (let [plugin, visitor] of visitors) {
          this.result.lastPlugin = plugin;
          let promise;
          try {
            promise = visitor(node, this.helpers);
          } catch (e) {
            throw this.handleError(e, node.proxyOf);
          }
          if (node.type !== "root" && node.type !== "document" && !node.parent) {
            return true;
          }
          if (isPromise(promise)) {
            throw this.getAsyncError();
          }
        }
      }
      visitTick(stack) {
        let visit = stack[stack.length - 1];
        let { node, visitors } = visit;
        if (node.type !== "root" && node.type !== "document" && !node.parent) {
          stack.pop();
          return;
        }
        if (visitors.length > 0 && visit.visitorIndex < visitors.length) {
          let [plugin, visitor] = visitors[visit.visitorIndex];
          visit.visitorIndex += 1;
          if (visit.visitorIndex === visitors.length) {
            visit.visitors = [];
            visit.visitorIndex = 0;
          }
          this.result.lastPlugin = plugin;
          try {
            return visitor(node.toProxy(), this.helpers);
          } catch (e) {
            throw this.handleError(e, node);
          }
        }
        if (visit.iterator !== 0) {
          let iterator = visit.iterator;
          let child;
          while (child = node.nodes[node.indexes[iterator]]) {
            node.indexes[iterator] += 1;
            if (!child[isClean]) {
              child[isClean] = true;
              stack.push(toStack(child));
              return;
            }
          }
          visit.iterator = 0;
          delete node.indexes[iterator];
        }
        let events = visit.events;
        while (visit.eventIndex < events.length) {
          let event = events[visit.eventIndex];
          visit.eventIndex += 1;
          if (event === CHILDREN) {
            if (node.nodes && node.nodes.length) {
              node[isClean] = true;
              visit.iterator = node.getIterator();
            }
            return;
          } else if (this.listeners[event]) {
            visit.visitors = this.listeners[event];
            return;
          }
        }
        stack.pop();
      }
      walkSync(node) {
        node[isClean] = true;
        let events = getEvents(node);
        for (let event of events) {
          if (event === CHILDREN) {
            if (node.nodes) {
              node.each((child) => {
                if (!child[isClean])
                  this.walkSync(child);
              });
            }
          } else {
            let visitors = this.listeners[event];
            if (visitors) {
              if (this.visitSync(visitors, node.toProxy()))
                return;
            }
          }
        }
      }
      warnings() {
        return this.sync().warnings();
      }
      get content() {
        return this.stringify().content;
      }
      get css() {
        return this.stringify().css;
      }
      get map() {
        return this.stringify().map;
      }
      get messages() {
        return this.sync().messages;
      }
      get opts() {
        return this.result.opts;
      }
      get processor() {
        return this.result.processor;
      }
      get root() {
        return this.sync().root;
      }
      get [Symbol.toStringTag]() {
        return "LazyResult";
      }
    };
    LazyResult.registerPostcss = (dependant) => {
      postcss = dependant;
    };
    module.exports = LazyResult;
    LazyResult.default = LazyResult;
    Root.registerLazyResult(LazyResult);
    Document.registerLazyResult(LazyResult);
  }
});

// node_modules/postcss/lib/no-work-result.js
var require_no_work_result = __commonJS({
  "node_modules/postcss/lib/no-work-result.js"(exports, module) {
    "use strict";
    var MapGenerator = require_map_generator();
    var stringify = require_stringify();
    var warnOnce = require_warn_once();
    var parse = require_parse();
    var Result = require_result();
    var NoWorkResult = class {
      constructor(processor, css, opts) {
        css = css.toString();
        this.stringified = false;
        this._processor = processor;
        this._css = css;
        this._opts = opts;
        this._map = void 0;
        let root;
        let str = stringify;
        this.result = new Result(this._processor, root, this._opts);
        this.result.css = css;
        let self = this;
        Object.defineProperty(this.result, "root", {
          get() {
            return self.root;
          }
        });
        let map = new MapGenerator(str, root, this._opts, css);
        if (map.isMap()) {
          let [generatedCSS, generatedMap] = map.generate();
          if (generatedCSS) {
            this.result.css = generatedCSS;
          }
          if (generatedMap) {
            this.result.map = generatedMap;
          }
        }
      }
      async() {
        if (this.error)
          return Promise.reject(this.error);
        return Promise.resolve(this.result);
      }
      catch(onRejected) {
        return this.async().catch(onRejected);
      }
      finally(onFinally) {
        return this.async().then(onFinally, onFinally);
      }
      sync() {
        if (this.error)
          throw this.error;
        return this.result;
      }
      then(onFulfilled, onRejected) {
        if (true) {
          if (!("from" in this._opts)) {
            warnOnce(
              "Without `from` option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to `undefined` to prevent this warning."
            );
          }
        }
        return this.async().then(onFulfilled, onRejected);
      }
      toString() {
        return this._css;
      }
      warnings() {
        return [];
      }
      get content() {
        return this.result.css;
      }
      get css() {
        return this.result.css;
      }
      get map() {
        return this.result.map;
      }
      get messages() {
        return [];
      }
      get opts() {
        return this.result.opts;
      }
      get processor() {
        return this.result.processor;
      }
      get root() {
        if (this._root) {
          return this._root;
        }
        let root;
        let parser = parse;
        try {
          root = parser(this._css, this._opts);
        } catch (error) {
          this.error = error;
        }
        if (this.error) {
          throw this.error;
        } else {
          this._root = root;
          return root;
        }
      }
      get [Symbol.toStringTag]() {
        return "NoWorkResult";
      }
    };
    module.exports = NoWorkResult;
    NoWorkResult.default = NoWorkResult;
  }
});

// node_modules/postcss/lib/processor.js
var require_processor = __commonJS({
  "node_modules/postcss/lib/processor.js"(exports, module) {
    "use strict";
    var NoWorkResult = require_no_work_result();
    var LazyResult = require_lazy_result();
    var Document = require_document();
    var Root = require_root();
    var Processor = class {
      constructor(plugins = []) {
        this.version = "8.4.31";
        this.plugins = this.normalize(plugins);
      }
      normalize(plugins) {
        let normalized = [];
        for (let i of plugins) {
          if (i.postcss === true) {
            i = i();
          } else if (i.postcss) {
            i = i.postcss;
          }
          if (typeof i === "object" && Array.isArray(i.plugins)) {
            normalized = normalized.concat(i.plugins);
          } else if (typeof i === "object" && i.postcssPlugin) {
            normalized.push(i);
          } else if (typeof i === "function") {
            normalized.push(i);
          } else if (typeof i === "object" && (i.parse || i.stringify)) {
            if (true) {
              throw new Error(
                "PostCSS syntaxes cannot be used as plugins. Instead, please use one of the syntax/parser/stringifier options as outlined in your PostCSS runner documentation."
              );
            }
          } else {
            throw new Error(i + " is not a PostCSS plugin");
          }
        }
        return normalized;
      }
      process(css, opts = {}) {
        if (this.plugins.length === 0 && typeof opts.parser === "undefined" && typeof opts.stringifier === "undefined" && typeof opts.syntax === "undefined") {
          return new NoWorkResult(this, css, opts);
        } else {
          return new LazyResult(this, css, opts);
        }
      }
      use(plugin) {
        this.plugins = this.plugins.concat(this.normalize([plugin]));
        return this;
      }
    };
    module.exports = Processor;
    Processor.default = Processor;
    Root.registerProcessor(Processor);
    Document.registerProcessor(Processor);
  }
});

// node_modules/postcss/lib/fromJSON.js
var require_fromJSON = __commonJS({
  "node_modules/postcss/lib/fromJSON.js"(exports, module) {
    "use strict";
    var Declaration = require_declaration();
    var PreviousMap = require_previous_map();
    var Comment = require_comment();
    var AtRule = require_at_rule();
    var Input = require_input();
    var Root = require_root();
    var Rule = require_rule();
    function fromJSON(json, inputs) {
      if (Array.isArray(json))
        return json.map((n) => fromJSON(n));
      let { inputs: ownInputs, ...defaults } = json;
      if (ownInputs) {
        inputs = [];
        for (let input of ownInputs) {
          let inputHydrated = { ...input, __proto__: Input.prototype };
          if (inputHydrated.map) {
            inputHydrated.map = {
              ...inputHydrated.map,
              __proto__: PreviousMap.prototype
            };
          }
          inputs.push(inputHydrated);
        }
      }
      if (defaults.nodes) {
        defaults.nodes = json.nodes.map((n) => fromJSON(n, inputs));
      }
      if (defaults.source) {
        let { inputId, ...source } = defaults.source;
        defaults.source = source;
        if (inputId != null) {
          defaults.source.input = inputs[inputId];
        }
      }
      if (defaults.type === "root") {
        return new Root(defaults);
      } else if (defaults.type === "decl") {
        return new Declaration(defaults);
      } else if (defaults.type === "rule") {
        return new Rule(defaults);
      } else if (defaults.type === "comment") {
        return new Comment(defaults);
      } else if (defaults.type === "atrule") {
        return new AtRule(defaults);
      } else {
        throw new Error("Unknown node type: " + json.type);
      }
    }
    module.exports = fromJSON;
    fromJSON.default = fromJSON;
  }
});

// node_modules/postcss/lib/postcss.js
var require_postcss = __commonJS({
  "node_modules/postcss/lib/postcss.js"(exports, module) {
    "use strict";
    var CssSyntaxError = require_css_syntax_error();
    var Declaration = require_declaration();
    var LazyResult = require_lazy_result();
    var Container = require_container();
    var Processor = require_processor();
    var stringify = require_stringify();
    var fromJSON = require_fromJSON();
    var Document = require_document();
    var Warning = require_warning();
    var Comment = require_comment();
    var AtRule = require_at_rule();
    var Result = require_result();
    var Input = require_input();
    var parse = require_parse();
    var list = require_list();
    var Rule = require_rule();
    var Root = require_root();
    var Node = require_node();
    function postcss(...plugins) {
      if (plugins.length === 1 && Array.isArray(plugins[0])) {
        plugins = plugins[0];
      }
      return new Processor(plugins);
    }
    postcss.plugin = function plugin(name, initializer) {
      let warningPrinted = false;
      function creator(...args) {
        if (console && console.warn && !warningPrinted) {
          warningPrinted = true;
          console.warn(
            name + ": postcss.plugin was deprecated. Migration guide:\nhttps://evilmartians.com/chronicles/postcss-8-plugin-migration"
          );
          if (process.env.LANG && process.env.LANG.startsWith("cn")) {
            console.warn(
              name + ": 里面 postcss.plugin 被弃用. 迁移指南:\nhttps://www.w3ctech.com/topic/2226"
            );
          }
        }
        let transformer = initializer(...args);
        transformer.postcssPlugin = name;
        transformer.postcssVersion = new Processor().version;
        return transformer;
      }
      let cache;
      Object.defineProperty(creator, "postcss", {
        get() {
          if (!cache)
            cache = creator();
          return cache;
        }
      });
      creator.process = function(css, processOpts, pluginOpts) {
        return postcss([creator(pluginOpts)]).process(css, processOpts);
      };
      return creator;
    };
    postcss.stringify = stringify;
    postcss.parse = parse;
    postcss.fromJSON = fromJSON;
    postcss.list = list;
    postcss.comment = (defaults) => new Comment(defaults);
    postcss.atRule = (defaults) => new AtRule(defaults);
    postcss.decl = (defaults) => new Declaration(defaults);
    postcss.rule = (defaults) => new Rule(defaults);
    postcss.root = (defaults) => new Root(defaults);
    postcss.document = (defaults) => new Document(defaults);
    postcss.CssSyntaxError = CssSyntaxError;
    postcss.Declaration = Declaration;
    postcss.Container = Container;
    postcss.Processor = Processor;
    postcss.Document = Document;
    postcss.Comment = Comment;
    postcss.Warning = Warning;
    postcss.AtRule = AtRule;
    postcss.Result = Result;
    postcss.Input = Input;
    postcss.Rule = Rule;
    postcss.Root = Root;
    postcss.Node = Node;
    LazyResult.registerPostcss(postcss);
    module.exports = postcss;
    postcss.default = postcss;
  }
});

// node_modules/postcss-js/parser.js
var require_parser2 = __commonJS({
  "node_modules/postcss-js/parser.js"(exports, module) {
    var postcss = require_postcss();
    var IMPORTANT = /\s*!important\s*$/i;
    var UNITLESS = {
      "box-flex": true,
      "box-flex-group": true,
      "column-count": true,
      "flex": true,
      "flex-grow": true,
      "flex-positive": true,
      "flex-shrink": true,
      "flex-negative": true,
      "font-weight": true,
      "line-clamp": true,
      "line-height": true,
      "opacity": true,
      "order": true,
      "orphans": true,
      "tab-size": true,
      "widows": true,
      "z-index": true,
      "zoom": true,
      "fill-opacity": true,
      "stroke-dashoffset": true,
      "stroke-opacity": true,
      "stroke-width": true
    };
    function dashify(str) {
      return str.replace(/([A-Z])/g, "-$1").replace(/^ms-/, "-ms-").toLowerCase();
    }
    function decl(parent, name, value) {
      if (value === false || value === null)
        return;
      if (!name.startsWith("--")) {
        name = dashify(name);
      }
      if (typeof value === "number") {
        if (value === 0 || UNITLESS[name]) {
          value = value.toString();
        } else {
          value += "px";
        }
      }
      if (name === "css-float")
        name = "float";
      if (IMPORTANT.test(value)) {
        value = value.replace(IMPORTANT, "");
        parent.push(postcss.decl({ prop: name, value, important: true }));
      } else {
        parent.push(postcss.decl({ prop: name, value }));
      }
    }
    function atRule(parent, parts, value) {
      let node = postcss.atRule({ name: parts[1], params: parts[3] || "" });
      if (typeof value === "object") {
        node.nodes = [];
        parse(value, node);
      }
      parent.push(node);
    }
    function parse(obj, parent) {
      let name, value, node;
      for (name in obj) {
        value = obj[name];
        if (value === null || typeof value === "undefined") {
          continue;
        } else if (name[0] === "@") {
          let parts = name.match(/@(\S+)(\s+([\W\w]*)\s*)?/);
          if (Array.isArray(value)) {
            for (let i of value) {
              atRule(parent, parts, i);
            }
          } else {
            atRule(parent, parts, value);
          }
        } else if (Array.isArray(value)) {
          for (let i of value) {
            decl(parent, name, i);
          }
        } else if (typeof value === "object") {
          node = postcss.rule({ selector: name });
          parse(value, node);
          parent.push(node);
        } else {
          decl(parent, name, value);
        }
      }
    }
    module.exports = function(obj) {
      let root = postcss.root();
      parse(obj, root);
      return root;
    };
  }
});

// node_modules/postcss-js/process-result.js
var require_process_result = __commonJS({
  "node_modules/postcss-js/process-result.js"(exports, module) {
    var objectify = require_objectifier();
    module.exports = function processResult(result) {
      if (console && console.warn) {
        result.warnings().forEach((warn) => {
          let source = warn.plugin || "PostCSS";
          console.warn(source + ": " + warn.text);
        });
      }
      return objectify(result.root);
    };
  }
});

// node_modules/postcss-js/async.js
var require_async = __commonJS({
  "node_modules/postcss-js/async.js"(exports, module) {
    var postcss = require_postcss();
    var processResult = require_process_result();
    var parse = require_parser2();
    module.exports = function async(plugins) {
      let processor = postcss(plugins);
      return async (input) => {
        let result = await processor.process(input, {
          parser: parse,
          from: void 0
        });
        return processResult(result);
      };
    };
  }
});

// node_modules/postcss-js/sync.js
var require_sync = __commonJS({
  "node_modules/postcss-js/sync.js"(exports, module) {
    var postcss = require_postcss();
    var processResult = require_process_result();
    var parse = require_parser2();
    module.exports = function(plugins) {
      let processor = postcss(plugins);
      return (input) => {
        let result = processor.process(input, { parser: parse, from: void 0 });
        return processResult(result);
      };
    };
  }
});

// node_modules/postcss-js/index.js
var require_postcss_js = __commonJS({
  "node_modules/postcss-js/index.js"(exports, module) {
    var objectify = require_objectifier();
    var parse = require_parser2();
    var async = require_async();
    var sync = require_sync();
    module.exports = {
      objectify,
      parse,
      async,
      sync
    };
  }
});

// node_modules/fastparse/lib/Parser.js
var require_Parser = __commonJS({
  "node_modules/fastparse/lib/Parser.js"(exports, module) {
    function ignoreFunction() {
    }
    function createReturningFunction(value) {
      return function() {
        return value;
      };
    }
    function Parser(states) {
      this.states = this.compileStates(states);
    }
    Parser.prototype.compileStates = function(states) {
      var result = {};
      Object.keys(states).forEach(function(name) {
        result[name] = this.compileState(states[name], states);
      }, this);
      return result;
    };
    Parser.prototype.compileState = function(state, states) {
      var regExps = [];
      function iterator(str, value) {
        regExps.push({
          groups: Parser.getGroupCount(str),
          regExp: str,
          value
        });
      }
      function processState(statePart) {
        if (Array.isArray(statePart)) {
          statePart.forEach(processState);
        } else if (typeof statePart === "object") {
          Object.keys(statePart).forEach(function(key) {
            iterator(key, statePart[key]);
          });
        } else if (typeof statePart === "string") {
          processState(states[statePart]);
        } else {
          throw new Error("Unexpected 'state' format");
        }
      }
      processState(state);
      var total = regExps.map(function(r) {
        return "(" + r.regExp + ")";
      }).join("|");
      var actions = [];
      var pos = 1;
      regExps.forEach(function(r) {
        var fn;
        if (typeof r.value === "function") {
          fn = r.value;
        } else if (typeof r.value === "string") {
          fn = createReturningFunction(r.value);
        } else {
          fn = ignoreFunction;
        }
        actions.push({
          name: r.regExp,
          fn,
          pos,
          pos2: pos + r.groups + 1
        });
        pos += r.groups + 1;
      });
      return {
        regExp: new RegExp(total, "g"),
        actions
      };
    };
    Parser.getGroupCount = function(regExpStr) {
      return new RegExp("(" + regExpStr + ")|^$").exec("").length - 2;
    };
    Parser.prototype.parse = function(initialState, string, context) {
      context = context || {};
      var currentState = initialState;
      var currentIndex = 0;
      for (; ; ) {
        var state = this.states[currentState];
        var regExp = state.regExp;
        regExp.lastIndex = currentIndex;
        var match = regExp.exec(string);
        if (!match)
          return context;
        var actions = state.actions;
        currentIndex = state.regExp.lastIndex;
        for (var i = 0; i < actions.length; i++) {
          var action = actions[i];
          if (match[action.pos]) {
            var ret = action.fn.apply(context, Array.prototype.slice.call(match, action.pos, action.pos2).concat([state.regExp.lastIndex - match[0].length, match[0].length]));
            if (ret) {
              if (!(ret in this.states))
                throw new Error("State '" + ret + "' doesn't exist");
              currentState = ret;
            }
            break;
          }
        }
      }
    };
    module.exports = Parser;
  }
});

// node_modules/css-selector-tokenizer/lib/uni-regexp.js
var require_uni_regexp = __commonJS({
  "node_modules/css-selector-tokenizer/lib/uni-regexp.js"(exports, module) {
    module.exports = {
      "typeMatchClass": "\\.((?:\\\\(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])|(?:[\\x2DA-Z_a-z\\xA0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]))(?:\\\\(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])|(?:[\\x2D0-9A-Z_a-z\\xA0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]))*)",
      "typeMatchId": "#((?:\\\\(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])|(?:[\\x2DA-Z_a-z\\xA0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]))(?:\\\\(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])|(?:[\\x2D0-9A-Z_a-z\\xA0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]))*)",
      "identifierEscapeRegexp": "(^[\\0-,\\.-@\\[-\\^`\\{-\\x9F]|^\\x2D\\x2D|[\\0-,\\.\\/:-@\\[-\\^`\\{-\\x9F])"
    };
  }
});

// node_modules/css-selector-tokenizer/lib/parse.js
var require_parse2 = __commonJS({
  "node_modules/css-selector-tokenizer/lib/parse.js"(exports, module) {
    "use strict";
    var Parser = require_Parser();
    var uniRegexp = require_uni_regexp();
    function unescape2(str) {
      return str.replace(/\\(.)/g, "$1");
    }
    function commentMatch(match, content) {
      this.selector.nodes.push({
        type: "comment",
        content
      });
    }
    function typeMatch(type) {
      return function(match, name) {
        this.selector.nodes.push({
          type,
          name: unescape2(name)
        });
      };
    }
    function pseudoClassStartMatch(match, name) {
      var newToken = {
        type: "pseudo-class",
        name: unescape2(name),
        content: ""
      };
      this.selector.nodes.push(newToken);
      this.token = newToken;
      this.brackets = 1;
      return "inBrackets";
    }
    function nestedPseudoClassStartMatch(match, name, after) {
      var newSelector = {
        type: "selector",
        nodes: []
      };
      var newToken = {
        type: "nested-pseudo-class",
        name: unescape2(name),
        nodes: [newSelector]
      };
      if (after) {
        newSelector.before = after;
      }
      this.selector.nodes.push(newToken);
      this.stack.push(this.root);
      this.root = newToken;
      this.selector = newSelector;
    }
    function nestedEnd(match, before) {
      if (this.stack.length > 0) {
        if (before) {
          this.selector.after = before;
        }
        this.root = this.stack.pop();
        this.selector = this.root.nodes[this.root.nodes.length - 1];
      } else {
        this.selector.nodes.push({
          type: "invalid",
          value: match
        });
      }
    }
    function operatorMatch(match, before, operator, after) {
      var token = {
        type: "operator",
        operator
      };
      if (before) {
        token.before = before;
      }
      if (after) {
        token.after = after;
      }
      this.selector.nodes.push(token);
    }
    function spacingMatch(match) {
      this.selector.nodes.push({
        type: "spacing",
        value: match
      });
    }
    function elementMatch(match, namespace, name) {
      var newToken = {
        type: "element",
        name: unescape2(name)
      };
      if (namespace) {
        newToken.namespace = unescape2(namespace.substr(0, namespace.length - 1));
      }
      this.selector.nodes.push(newToken);
    }
    function universalMatch(match, namespace) {
      var newToken = {
        type: "universal"
      };
      if (namespace) {
        newToken.namespace = unescape2(namespace.substr(0, namespace.length - 1));
      }
      this.selector.nodes.push(newToken);
    }
    function attributeMatch(match, content) {
      this.selector.nodes.push({
        type: "attribute",
        content
      });
    }
    function invalidMatch(match) {
      this.selector.nodes.push({
        type: "invalid",
        value: match
      });
    }
    function irrelevantSpacingStartMatch(match) {
      this.selector.before = match;
    }
    function irrelevantSpacingEndMatch(match) {
      this.selector.after = match;
    }
    function nextSelectorMatch(match, before, after) {
      var newSelector = {
        type: "selector",
        nodes: []
      };
      if (before) {
        this.selector.after = before;
      }
      if (after) {
        newSelector.before = after;
      }
      this.root.nodes.push(newSelector);
      this.selector = newSelector;
    }
    function addToCurrent(match) {
      this.token.content += match;
    }
    function bracketStart(match) {
      this.token.content += match;
      this.brackets++;
    }
    function bracketEnd(match) {
      if (--this.brackets === 0) {
        return "selector";
      }
      this.token.content += match;
    }
    function getSelectors() {
      var selectors = {
        "/\\*([\\s\\S]*?)\\*/": commentMatch
      };
      selectors[uniRegexp.typeMatchClass] = typeMatch("class");
      selectors[uniRegexp.typeMatchId] = typeMatch("id");
      var selectorsSecondHalf = {
        ":(not|any|-\\w+?-any|matches|is|where|has|local|global)\\((\\s*)": nestedPseudoClassStartMatch,
        ":((?:\\\\.|[A-Za-z_\\-0-9])+)\\(": pseudoClassStartMatch,
        ":((?:\\\\.|[A-Za-z_\\-0-9])+)": typeMatch("pseudo-class"),
        "::((?:\\\\.|[A-Za-z_\\-0-9])+)": typeMatch("pseudo-element"),
        "(\\*\\|)((?:\\\\.|[A-Za-z_\\-0-9])+)": elementMatch,
        "(\\*\\|)\\*": universalMatch,
        "((?:\\\\.|[A-Za-z_\\-0-9])*\\|)?\\*": universalMatch,
        "((?:\\\\.|[A-Za-z_\\-0-9])*\\|)?((?:\\\\.|[A-Za-z_\\-])(?:\\\\.|[A-Za-z_\\-0-9])*)": elementMatch,
        "\\[([^\\]]+)\\]": attributeMatch,
        "(\\s*)\\)": nestedEnd,
        "(\\s*)((?:\\|\\|)|(?:>>)|[>+~])(\\s*)": operatorMatch,
        "(\\s*),(\\s*)": nextSelectorMatch,
        "\\s+$": irrelevantSpacingEndMatch,
        "^\\s+": irrelevantSpacingStartMatch,
        "\\s+": spacingMatch,
        ".": invalidMatch
      };
      var selector;
      for (selector in selectorsSecondHalf) {
        if (Object.prototype.hasOwnProperty.call(selectorsSecondHalf, selector)) {
          selectors[selector] = selectorsSecondHalf[selector];
        }
      }
      return selectors;
    }
    var parser = new Parser({
      selector: getSelectors(),
      inBrackets: {
        "/\\*[\\s\\S]*?\\*/": addToCurrent,
        '"([^\\\\"]|\\\\.)*"': addToCurrent,
        "'([^\\\\']|\\\\.)*'": addToCurrent,
        "[^()'\"/]+": addToCurrent,
        "\\(": bracketStart,
        "\\)": bracketEnd,
        ".": addToCurrent
      }
    });
    function parse(str) {
      var selectorNode = {
        type: "selector",
        nodes: []
      };
      var rootNode = {
        type: "selectors",
        nodes: [
          selectorNode
        ]
      };
      parser.parse("selector", str, {
        stack: [],
        root: rootNode,
        selector: selectorNode
      });
      return rootNode;
    }
    module.exports = parse;
  }
});

// node_modules/css-selector-tokenizer/lib/stringify.js
var require_stringify2 = __commonJS({
  "node_modules/css-selector-tokenizer/lib/stringify.js"(exports, module) {
    "use strict";
    var uniRegexp = require_uni_regexp();
    var identifierEscapeRegexp = new RegExp(uniRegexp.identifierEscapeRegexp, "g");
    function escape(str, identifier) {
      if (str === "*") {
        return "*";
      }
      if (identifier) {
        return str.replace(identifierEscapeRegexp, "\\$1");
      } else {
        return str.replace(/(^[^A-Za-z_\\-]|^--|[^A-Za-z_0-9\\-])/g, "\\$1");
      }
    }
    function stringifyWithoutBeforeAfter(tree) {
      switch (tree.type) {
        case "selectors":
          return tree.nodes.map(stringify).join(",");
        case "selector":
          return tree.nodes.map(stringify).join("");
        case "element":
          return (typeof tree.namespace === "string" ? escape(tree.namespace) + "|" : "") + escape(tree.name);
        case "class":
          return "." + escape(tree.name, true);
        case "id":
          return "#" + escape(tree.name, true);
        case "attribute":
          return "[" + tree.content + "]";
        case "spacing":
          return tree.value;
        case "pseudo-class":
          return ":" + escape(tree.name) + (typeof tree.content === "string" ? "(" + tree.content + ")" : "");
        case "nested-pseudo-class":
          return ":" + escape(tree.name) + "(" + tree.nodes.map(stringify).join(",") + ")";
        case "pseudo-element":
          return "::" + escape(tree.name);
        case "universal":
          return (typeof tree.namespace === "string" ? escape(tree.namespace) + "|" : "") + "*";
        case "operator":
          return tree.operator;
        case "comment":
          return "/*" + tree.content + "*/";
        case "invalid":
          return tree.value;
      }
    }
    function stringify(tree) {
      var str = stringifyWithoutBeforeAfter(tree);
      if (tree.before) {
        str = tree.before + str;
      }
      if (tree.after) {
        str = str + tree.after;
      }
      return str;
    }
    module.exports = stringify;
  }
});

// node_modules/css-selector-tokenizer/lib/parseValues.js
var require_parseValues = __commonJS({
  "node_modules/css-selector-tokenizer/lib/parseValues.js"(exports, module) {
    "use strict";
    var Parser = require_Parser();
    function commentMatch(match, content) {
      this.value.nodes.push({
        type: "comment",
        content
      });
    }
    function spacingMatch(match) {
      var item = this.value.nodes[this.value.nodes.length - 1];
      item.after = (item.after || "") + match;
    }
    function initialSpacingMatch(match) {
      this.value.before = match;
    }
    function endSpacingMatch(match) {
      this.value.after = match;
    }
    function unescapeString(content) {
      return content.replace(/\\(?:([a-fA-F0-9]{1,6})|(.))/g, function(all, unicode, otherCharacter) {
        if (otherCharacter) {
          return otherCharacter;
        }
        var C = parseInt(unicode, 16);
        if (C < 65536) {
          return String.fromCharCode(C);
        } else {
          return String.fromCharCode(Math.floor((C - 65536) / 1024) + 55296) + String.fromCharCode((C - 65536) % 1024 + 56320);
        }
      });
    }
    function stringMatch(match, content) {
      var value = unescapeString(content);
      this.value.nodes.push({
        type: "string",
        value,
        stringType: match[0]
      });
    }
    function commaMatch(match, spacing) {
      var newValue = {
        type: "value",
        nodes: []
      };
      if (spacing) {
        newValue.before = spacing;
      }
      this.root.nodes.push(newValue);
      this.value = newValue;
    }
    function itemMatch(match) {
      this.value.nodes.push({
        type: "item",
        name: match
      });
    }
    function nestedItemMatch(match, name, spacing) {
      this.stack.push(this.root);
      this.root = {
        type: "nested-item",
        name,
        nodes: [
          { type: "value", nodes: [] }
        ]
      };
      if (spacing) {
        this.root.nodes[0].before = spacing;
      }
      this.value.nodes.push(this.root);
      this.value = this.root.nodes[0];
    }
    function nestedItemEndMatch(match, spacing, remaining) {
      if (this.stack.length === 0) {
        if (spacing) {
          var item = this.value.nodes[this.value.nodes.length - 1];
          item.after = (item.after || "") + spacing;
        }
        this.value.nodes.push({
          type: "invalid",
          value: remaining
        });
      } else {
        if (spacing) {
          this.value.after = spacing;
        }
        this.root = this.stack.pop();
        this.value = this.root.nodes[this.root.nodes.length - 1];
      }
    }
    function urlMatch(match, innerSpacingBefore, content, innerSpacingAfter) {
      var item = {
        type: "url"
      };
      if (innerSpacingBefore) {
        item.innerSpacingBefore = innerSpacingBefore;
      }
      if (innerSpacingAfter) {
        item.innerSpacingAfter = innerSpacingAfter;
      }
      switch (content[0]) {
        case '"':
          item.stringType = '"';
          item.url = unescapeString(content.substr(1, content.length - 2));
          break;
        case "'":
          item.stringType = "'";
          item.url = unescapeString(content.substr(1, content.length - 2));
          break;
        default:
          item.url = unescapeString(content);
          break;
      }
      this.value.nodes.push(item);
    }
    var parser = new Parser({
      decl: {
        "^\\s+": initialSpacingMatch,
        "/\\*([\\s\\S]*?)\\*/": commentMatch,
        '"((?:[^\\\\"]|\\\\.)*)"': stringMatch,
        "'((?:[^\\\\']|\\\\.)*)'": stringMatch,
        'url\\((\\s*)("(?:[^\\\\"]|\\\\.)*")(\\s*)\\)': urlMatch,
        "url\\((\\s*)('(?:[^\\\\']|\\\\.)*')(\\s*)\\)": urlMatch,
        "url\\((\\s*)((?:[^\\\\)'\"]|\\\\.)*)(\\s*)\\)": urlMatch,
        "([\\w-]+)\\((\\s*)": nestedItemMatch,
        "(\\s*)(\\))": nestedItemEndMatch,
        ",(\\s*)": commaMatch,
        "\\s+$": endSpacingMatch,
        "\\s+": spacingMatch,
        "[^\\s,)]+": itemMatch
      }
    });
    function parseValues(str) {
      var valueNode = {
        type: "value",
        nodes: []
      };
      var rootNode = {
        type: "values",
        nodes: [
          valueNode
        ]
      };
      parser.parse("decl", str, {
        stack: [],
        root: rootNode,
        value: valueNode
      });
      return rootNode;
    }
    module.exports = parseValues;
  }
});

// node_modules/cssesc/cssesc.js
var require_cssesc = __commonJS({
  "node_modules/cssesc/cssesc.js"(exports, module) {
    "use strict";
    var object = {};
    var hasOwnProperty = object.hasOwnProperty;
    var merge = function merge2(options, defaults) {
      if (!options) {
        return defaults;
      }
      var result = {};
      for (var key in defaults) {
        result[key] = hasOwnProperty.call(options, key) ? options[key] : defaults[key];
      }
      return result;
    };
    var regexAnySingleEscape = /[ -,\.\/:-@\[-\^`\{-~]/;
    var regexSingleEscape = /[ -,\.\/:-@\[\]\^`\{-~]/;
    var regexExcessiveSpaces = /(^|\\+)?(\\[A-F0-9]{1,6})\x20(?![a-fA-F0-9\x20])/g;
    var cssesc = function cssesc2(string, options) {
      options = merge(options, cssesc2.options);
      if (options.quotes != "single" && options.quotes != "double") {
        options.quotes = "single";
      }
      var quote = options.quotes == "double" ? '"' : "'";
      var isIdentifier = options.isIdentifier;
      var firstChar = string.charAt(0);
      var output = "";
      var counter = 0;
      var length = string.length;
      while (counter < length) {
        var character = string.charAt(counter++);
        var codePoint = character.charCodeAt();
        var value = void 0;
        if (codePoint < 32 || codePoint > 126) {
          if (codePoint >= 55296 && codePoint <= 56319 && counter < length) {
            var extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              codePoint = ((codePoint & 1023) << 10) + (extra & 1023) + 65536;
            } else {
              counter--;
            }
          }
          value = "\\" + codePoint.toString(16).toUpperCase() + " ";
        } else {
          if (options.escapeEverything) {
            if (regexAnySingleEscape.test(character)) {
              value = "\\" + character;
            } else {
              value = "\\" + codePoint.toString(16).toUpperCase() + " ";
            }
          } else if (/[\t\n\f\r\x0B]/.test(character)) {
            value = "\\" + codePoint.toString(16).toUpperCase() + " ";
          } else if (character == "\\" || !isIdentifier && (character == '"' && quote == character || character == "'" && quote == character) || isIdentifier && regexSingleEscape.test(character)) {
            value = "\\" + character;
          } else {
            value = character;
          }
        }
        output += value;
      }
      if (isIdentifier) {
        if (/^-[-\d]/.test(output)) {
          output = "\\-" + output.slice(1);
        } else if (/\d/.test(firstChar)) {
          output = "\\3" + firstChar + " " + output.slice(1);
        }
      }
      output = output.replace(regexExcessiveSpaces, function($0, $1, $2) {
        if ($1 && $1.length % 2) {
          return $0;
        }
        return ($1 || "") + $2;
      });
      if (!isIdentifier && options.wrap) {
        return quote + output + quote;
      }
      return output;
    };
    cssesc.options = {
      "escapeEverything": false,
      "isIdentifier": false,
      "quotes": "single",
      "wrap": false
    };
    cssesc.version = "3.0.0";
    module.exports = cssesc;
  }
});

// node_modules/css-selector-tokenizer/lib/stringifyValues.js
var require_stringifyValues = __commonJS({
  "node_modules/css-selector-tokenizer/lib/stringifyValues.js"(exports, module) {
    "use strict";
    var cssesc = require_cssesc();
    var stringify;
    function escape(str, stringType) {
      return cssesc(str, {
        quotes: stringType === '"' ? "double" : "single"
      });
    }
    function stringifyWithoutBeforeAfter(tree) {
      switch (tree.type) {
        case "values":
          return tree.nodes.map(stringify).join(",");
        case "value":
          return tree.nodes.map(stringify).join("");
        case "item":
          return tree.name;
        case "nested-item":
          return tree.name + "(" + tree.nodes.map(stringify).join(",") + ")";
        case "invalid":
          return tree.value;
        case "comment":
          return "/*" + tree.content + "*/";
        case "string":
          switch (tree.stringType) {
            case "'":
              return "'" + escape(tree.value, "'") + "'";
            case '"':
              return '"' + escape(tree.value, '"') + '"';
          }
          throw new Error("Invalid stringType");
        case "url":
          var start = "url(" + (tree.innerSpacingBefore || "");
          var end = (tree.innerSpacingAfter || "") + ")";
          switch (tree.stringType) {
            case "'":
              return start + "'" + tree.url.replace(/(\\)/g, "\\$1").replace(/'/g, "\\'") + "'" + end;
            case '"':
              return start + '"' + tree.url.replace(/(\\)/g, "\\$1").replace(/"/g, '\\"') + '"' + end;
            default:
              return start + tree.url.replace(/("|'|\)|\\)/g, "\\$1") + end;
          }
      }
    }
    stringify = function stringify2(tree) {
      var str = stringifyWithoutBeforeAfter(tree);
      if (tree.before) {
        str = tree.before + str;
      }
      if (tree.after) {
        str = str + tree.after;
      }
      return str;
    };
    module.exports = stringify;
  }
});

// node_modules/css-selector-tokenizer/lib/index.js
var require_lib = __commonJS({
  "node_modules/css-selector-tokenizer/lib/index.js"(exports) {
    exports.parse = require_parse2();
    exports.stringify = require_stringify2();
    exports.parseValues = require_parseValues();
    exports.stringifyValues = require_stringifyValues();
  }
});

// node_modules/daisyui/src/lib/addPrefix.js
var require_addPrefix = __commonJS({
  "node_modules/daisyui/src/lib/addPrefix.js"(exports, module) {
    var Tokenizer = require_lib();
    function itMatchesOne(arr, term) {
      return arr.some((i) => term.search(i) >= 0);
    }
    function parseAttrSelector(node) {
      const { content } = node;
      const regex = /(^class|^id)([*^?~|$=]*)+(?:("\s*)([^"\\]*?(?:\\.[^"\\]*)*?)(\s*")|('\s*)([^'\\]*?(?:\\.[^'\\]*)*?)(\s*'))/i;
      const [type, operator, head, classes, foot] = content.split(regex).filter((part) => part);
      return {
        type,
        operator,
        head,
        classes: classes ? classes.split(" ").map((c) => c.replace(/"|'/g, "")) : [],
        foot
      };
    }
    function attrStringify({ type, operator, head, classes, foot }) {
      return `${type}${operator || ""}${head || ""}${classes.join(" ")}${foot || ""}`;
    }
    function prefixNode(node, prefix) {
      if (["class", "id"].includes(node.type)) {
        return {
          ...node,
          name: `${prefix}${node.name}`
        };
      }
      if (["attribute"].includes(node.type) && node.content) {
        const { type, operator, head, classes, foot } = parseAttrSelector(node);
        if (!["class", "id"].includes(type))
          return node;
        return {
          ...node,
          content: attrStringify({
            type,
            operator,
            head,
            classes: classes.map((cls) => `${prefix}${cls}`),
            foot
          })
        };
      }
      return node;
    }
    function iterateSelectorNodes(selector, options) {
      const { prefix, ignore } = options;
      return {
        ...selector,
        nodes: selector.nodes.map((node) => {
          if (["selector", "nested-pseudo-class"].includes(node.type)) {
            return iterateSelectorNodes(node, options);
          }
          if (itMatchesOne(ignore, Tokenizer.stringify(node)))
            return node;
          return prefixNode(node, prefix);
        })
      };
    }
    module.exports = (opts = {}) => {
      const { prefix, ignore } = {
        prefix: "",
        ignore: [],
        ...opts
      };
      if (typeof prefix !== "string") {
        throw new Error("prefix option should be of type string.");
      }
      if (!Array.isArray(ignore)) {
        throw new Error("ignore options should be an Array.");
      }
      if (!prefix.length)
        return;
      return {
        postcssPlugin: "addprefix",
        Root(root, postcss) {
          root.walkRules((rule) => {
            const parsed = Tokenizer.parse(rule.selector);
            const selector = iterateSelectorNodes(parsed, { prefix, ignore });
            rule.selector = Tokenizer.stringify(selector);
          });
        }
      };
    };
    module.exports.postcss = true;
  }
});

// node_modules/daisyui/package.json
var require_package = __commonJS({
  "node_modules/daisyui/package.json"(exports, module) {
    module.exports = {
      name: "daisyui",
      version: "3.9.4",
      description: "daisyUI - Tailwind CSS Components",
      author: "Pouya Saadeghi",
      license: "MIT",
      homepage: "https://daisyui.com",
      repository: {
        type: "git",
        url: "git+https://github.com/saadeghi/daisyui.git"
      },
      funding: {
        type: "opencollective",
        url: "https://opencollective.com/daisyui"
      },
      bugs: {
        url: "https://github.com/saadeghi/daisyui/issues"
      },
      keywords: [
        "design-system",
        "tailwindcss",
        "components",
        "ui-library",
        "component",
        "framework",
        "tailwind",
        "daisyui",
        "theming",
        "postcss",
        "design",
        "css",
        "ui"
      ],
      main: "src/index.js",
      typings: "src/index.d.ts",
      types: "src/index.d.ts",
      files: [
        "src/lib/**/*.js",
        "dist/*.js",
        "dist/{themes,styled,unstyled,full}.css",
        "!dist/*.rtl.css",
        "src/index.js",
        "src/theming/*.js",
        "src/theming/*.d.ts",
        "src/index.d.ts"
      ],
      engines: {
        node: ">=16.9.0"
      },
      browserslist: [
        "> 7%"
      ],
      publishConfig: {
        access: "public",
        branches: [
          "master"
        ]
      },
      scripts: {
        init: "npm install && npm run build && cd src/docs && npm install && cd src/experiments/playground && npm install",
        prettier: "prettier --write '**/*.{js,svelte,md,json,html,css}' --config src/.prettierrc.yaml --ignore-path src/.prettierignore",
        build: "node src/build",
        "build:skipfullcss": "node src/build --skipfullcss",
        dev: "cd src/docs && npm run dev",
        add: "touch src/components/unstyled/$npm_config_name.css && touch src/components/styled/$npm_config_name.css",
        postadd: "open src/components/unstyled/$npm_config_name.css && open src/components/styled/$npm_config_name.css",
        playground: "cd src/experiments/playground && npm run dev",
        release: "rm -f package-lock.json && standard-version",
        "release:patch": "rm -f package-lock.json && standard-version --release-as patch",
        "release:minor": "rm -f package-lock.json && standard-version --release-as minor",
        "release:major": "rm -f package-lock.json && standard-version --release-as major"
      },
      devDependencies: {
        autoprefixer: "^10",
        "postcss-cli": "10.1.0",
        "postcss-import": "15.1.0",
        "prejss-cli": "0.3.3",
        prettier: "^3.0.3",
        "prettier-plugin-svelte": "^3.0.3",
        "prettier-plugin-tailwindcss": "^0.5.5",
        rtlcss: "4.1.1",
        "standard-version": "^9.5.0"
      },
      dependencies: {
        colord: "^2.9",
        "css-selector-tokenizer": "^0.8",
        postcss: "^8",
        "postcss-js": "^4",
        tailwindcss: "^3.1"
      }
    };
  }
});

// node_modules/daisyui/src/theming/index.js
var require_theming = __commonJS({
  "node_modules/daisyui/src/theming/index.js"(exports, module) {
    var colorObject = {
      "transparent": "transparent",
      "current": "currentColor",
      "primary": "hsl(var(--p) / <alpha-value>)",
      "primary-focus": "hsl(var(--pf) / <alpha-value>)",
      "primary-content": "hsl(var(--pc) / <alpha-value>)",
      "secondary": "hsl(var(--s) / <alpha-value>)",
      "secondary-focus": "hsl(var(--sf) / <alpha-value>)",
      "secondary-content": "hsl(var(--sc) / <alpha-value>)",
      "accent": "hsl(var(--a) / <alpha-value>)",
      "accent-focus": "hsl(var(--af) / <alpha-value>)",
      "accent-content": "hsl(var(--ac) / <alpha-value>)",
      "neutral": "hsl(var(--n) / <alpha-value>)",
      "neutral-focus": "hsl(var(--nf) / <alpha-value>)",
      "neutral-content": "hsl(var(--nc) / <alpha-value>)",
      "base-100": "hsl(var(--b1) / <alpha-value>)",
      "base-200": "hsl(var(--b2) / <alpha-value>)",
      "base-300": "hsl(var(--b3) / <alpha-value>)",
      "base-content": "hsl(var(--bc) / <alpha-value>)",
      "info": "hsl(var(--in) / <alpha-value>)",
      "info-content": "hsl(var(--inc) / <alpha-value>)",
      "success": "hsl(var(--su) / <alpha-value>)",
      "success-content": "hsl(var(--suc) / <alpha-value>)",
      "warning": "hsl(var(--wa) / <alpha-value>)",
      "warning-content": "hsl(var(--wac) / <alpha-value>)",
      "error": "hsl(var(--er) / <alpha-value>)",
      "error-content": "hsl(var(--erc) / <alpha-value>)"
    };
    module.exports = colorObject;
  }
});

// node_modules/daisyui/dist/utilities.js
var require_utilities = __commonJS({
  "node_modules/daisyui/dist/utilities.js"(exports, module) {
    module.exports = { ".rounded-box": { "borderRadius": "var(--rounded-box, 1rem)" }, ".rounded-t-box": { "borderTopLeftRadius": "var(--rounded-box, 1rem)", "borderTopRightRadius": "var(--rounded-box, 1rem)" }, ".rounded-b-box": { "borderBottomLeftRadius": "var(--rounded-box, 1rem)", "borderBottomRightRadius": "var(--rounded-box, 1rem)" }, ".rounded-l-box": { "borderTopLeftRadius": "var(--rounded-box, 1rem)", "borderBottomLeftRadius": "var(--rounded-box, 1rem)" }, ".rounded-r-box": { "borderTopRightRadius": "var(--rounded-box, 1rem)", "borderBottomRightRadius": "var(--rounded-box, 1rem)" }, ".rounded-br-box": { "borderBottomRightRadius": "var(--rounded-box, 1rem)" }, ".rounded-tr-box": { "borderTopRightRadius": "var(--rounded-box, 1rem)" }, ".rounded-bl-box": { "borderBottomLeftRadius": "var(--rounded-box, 1rem)" }, ".rounded-tl-box": { "borderTopLeftRadius": "var(--rounded-box, 1rem)" }, ".rounded-btn": { "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".rounded-badge": { "borderRadius": "var(--rounded-badge, 1.9rem)" }, ".glass,\n  .glass.btn-active": { "border": "none", "backdropFilter": "blur(var(--glass-blur, 40px))", "backgroundColor": "transparent", "backgroundImage": "linear-gradient(\n        135deg,\n        rgb(255 255 255 / var(--glass-opacity, 30%)) 0%,\n        rgb(0 0 0 / 0%) 100%\n      ),\n      linear-gradient(\n        var(--glass-reflex-degree, 100deg),\n        rgb(255 255 255 / var(--glass-reflex-opacity, 10%)) 25%,\n        rgb(0 0 0 / 0%) 25%\n      )", "boxShadow": "0 0 0 1px rgb(255 255 255 / var(--glass-border-opacity, 10%)) inset,\n      0 0 0 2px rgb(0 0 0 / 5%)", "textShadow": "0 1px rgb(0 0 0 / var(--glass-text-shadow-opacity, 5%))" }, "@media (hover: hover)": { ".glass.btn-active": { "border": "none", "backdropFilter": "blur(var(--glass-blur, 40px))", "backgroundColor": "transparent", "backgroundImage": "linear-gradient(\n          135deg,\n          rgb(255 255 255 / var(--glass-opacity, 30%)) 0%,\n          rgb(0 0 0 / 0%) 100%\n        ),\n        linear-gradient(\n          var(--glass-reflex-degree, 100deg),\n          rgb(255 255 255 / var(--glass-reflex-opacity, 10%)) 25%,\n          rgb(0 0 0 / 0%) 25%\n        )", "boxShadow": "0 0 0 1px rgb(255 255 255 / var(--glass-border-opacity, 10%)) inset,\n        0 0 0 2px rgb(0 0 0 / 5%)", "textShadow": "0 1px rgb(0 0 0 / var(--glass-text-shadow-opacity, 5%))" } }, ".min-h-6": { "minHeight": "1.5rem" }, ".min-h-8": { "minHeight": "2rem" }, ".min-h-12": { "minHeight": "3rem" }, ".min-h-16": { "minHeight": "4rem" }, ".no-animation": { "-BtnFocusScale": "1", "-AnimationBtn": "0", "-AnimationInput": "0" }, ".tab-border-none": { "-TabBorder": "0px" }, ".tab-border": { "-TabBorder": "1px" }, ".tab-border-2": { "-TabBorder": "2px" }, ".tab-border-3": { "-TabBorder": "3px" }, ".tab-rounded-none": { "-TabRadius": "0" }, ".tab-rounded-lg": { "-TabRadius": "0.5rem" } };
  }
});

// node_modules/daisyui/dist/base.js
var require_base = __commonJS({
  "node_modules/daisyui/dist/base.js"(exports, module) {
    module.exports = { ":root,\n[data-theme]": { "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity, 1))", "color": "hsl(var(--bc) / var(--tw-text-opacity, 1))" }, "html": { "WebkitTapHighlightColor": "transparent" } };
  }
});

// node_modules/daisyui/dist/unstyled.js
var require_unstyled = __commonJS({
  "node_modules/daisyui/dist/unstyled.js"(exports, module) {
    module.exports = { ".alert": { "display": "grid", "width": "100%", "gridAutoFlow": "row", "alignContent": "flex-start", "alignItems": "center", "justifyItems": "center", "gap": "1rem", "textAlign": "center" }, "@media (min-width: 640px)": { ".alert": { "gridAutoFlow": "column", "gridTemplateColumns": "auto minmax(auto,1fr)", "justifyItems": "start", "textAlign": "left" } }, ".artboard": { "width": "100%" }, ".avatar": { "position": "relative", "display": "inline-flex" }, ".avatar > div": { "display": "block", "aspectRatio": "1 / 1", "overflow": "hidden" }, ".avatar img": { "height": "100%", "width": "100%", "objectFit": "cover" }, ".avatar.placeholder > div": { "display": "flex", "alignItems": "center", "justifyContent": "center" }, ".badge": { "display": "inline-flex", "alignItems": "center", "justifyContent": "center", "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms", "height": "1.25rem", "fontSize": "0.875rem", "lineHeight": "1.25rem", "width": "fit-content", "paddingLeft": "0.563rem", "paddingRight": "0.563rem" }, ".btm-nav": { "position": "fixed", "bottom": "0px", "left": "0px", "right": "0px", "display": "flex", "width": "100%", "flexDirection": "row", "alignItems": "center", "justifyContent": "space-around", "paddingBottom": "env(safe-area-inset-bottom)" }, ".btm-nav > *": { "position": "relative", "display": "flex", "height": "100%", "flexBasis": "100%", "cursor": "pointer", "flexDirection": "column", "alignItems": "center", "justifyContent": "center", "gap": "0.25rem" }, ".breadcrumbs": { "maxWidth": "100%", "overflowX": "auto" }, ".breadcrumbs > ul,\n  .breadcrumbs > ol": { "display": "flex", "alignItems": "center", "whiteSpace": "nowrap", "minHeight": "min-content" }, ".breadcrumbs > ul > li, .breadcrumbs > ol > li": { "display": "flex", "alignItems": "center" }, ".breadcrumbs > ul > li > a, .breadcrumbs > ol > li > a": { "display": "flex", "cursor": "pointer", "alignItems": "center" }, "@media (hover:hover)": [{ ".breadcrumbs > ul > li > a:hover, .breadcrumbs > ol > li > a:hover": { "textDecorationLine": "underline" } }, { ".link-hover:hover": { "textDecorationLine": "underline" } }], ".btn": { "display": "inline-flex", "flexShrink": "0", "cursor": "pointer", "userSelect": "none", "flexWrap": "wrap", "alignItems": "center", "justifyContent": "center", "borderColor": "transparent", "textAlign": "center", "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms", "borderRadius": "var(--rounded-btn, 0.5rem)", "height": "3rem", "paddingLeft": "1rem", "paddingRight": "1rem", "minHeight": "3rem", "fontSize": "0.875rem", "lineHeight": "1em" }, ".btn-disabled,\n  .btn[disabled],\n  .btn:disabled": { "pointerEvents": "none" }, ".btn-square": { "height": "3rem", "width": "3rem", "padding": "0px" }, ".btn-circle": { "height": "3rem", "width": "3rem", "borderRadius": "9999px", "padding": "0px" }, ".btn-group": { "display": "inline-flex" }, '.btn-group > input[type="radio"].btn': { "appearance": "none" }, '.btn-group > input[type="radio"].btn:before': { "content": "attr(data-title)" }, '.btn:is(input[type="checkbox"]),\n.btn:is(input[type="radio"])': { "width": "auto", "appearance": "none" }, '.btn:is(input[type="checkbox"]):after,\n.btn:is(input[type="radio"]):after': { "-TwContent": "attr(aria-label)", "content": "var(--tw-content)" }, ".card": { "position": "relative", "display": "flex", "flexDirection": "column" }, ".card:focus": { "outline": "2px solid transparent", "outlineOffset": "2px" }, ".card-body": { "display": "flex", "flex": "1 1 auto", "flexDirection": "column" }, ".card-body :where(p)": { "flexGrow": "1" }, ".card-actions": { "display": "flex", "flexWrap": "wrap", "alignItems": "flex-start", "gap": "0.5rem" }, ".card figure": { "display": "flex", "alignItems": "center", "justifyContent": "center" }, ".card.image-full": { "display": "grid" }, ".card.image-full:before": { "position": "relative", "content": '""' }, ".card.image-full:before,\n    .card.image-full > *": { "gridColumnStart": "1", "gridRowStart": "1" }, ".card.image-full > figure img": { "height": "100%", "objectFit": "cover" }, ".card.image-full > .card-body": { "position": "relative" }, ".carousel": { "display": "inline-flex", "overflowX": "scroll", "scrollSnapType": "x mandatory", "scrollBehavior": "smooth" }, ".carousel-vertical": { "flexDirection": "column", "overflowY": "scroll", "scrollSnapType": "y mandatory" }, ".carousel-item": { "boxSizing": "content-box", "display": "flex", "flex": "none", "scrollSnapAlign": "start" }, ".carousel-center .carousel-item": { "scrollSnapAlign": "center" }, ".carousel-end .carousel-item": { "scrollSnapAlign": "end" }, ".chat": { "display": "grid", "gridTemplateColumns": "repeat(2, minmax(0, 1fr))", "columnGap": "0.75rem", "paddingTop": "0.25rem", "paddingBottom": "0.25rem" }, ".chat-image": { "gridRow": "span 2 / span 2", "alignSelf": "flex-end" }, ".chat-header": { "gridRowStart": "1", "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".chat-footer": { "gridRowStart": "3", "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".chat-bubble": { "position": "relative", "display": "block", "width": "fit-content", "paddingLeft": "1rem", "paddingRight": "1rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem", "maxWidth": "90%" }, ".chat-bubble:before": { "position": "absolute", "bottom": "0px", "height": "0.75rem", "width": "0.75rem", "backgroundColor": "inherit", "content": '""', "maskSize": "contain", "maskRepeat": "no-repeat", "maskPosition": "center" }, ".chat-start": { "placeItems": "start", "gridTemplateColumns": "auto 1fr" }, ".chat-start .chat-header": { "gridColumnStart": "2" }, ".chat-start .chat-footer": { "gridColumnStart": "2" }, ".chat-start .chat-image": { "gridColumnStart": "1" }, ".chat-start .chat-bubble": { "gridColumnStart": "2" }, ".chat-start .chat-bubble:before": { "maskImage": `url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 3 3 L 3 0 C 3 1 1 3 0 3'/%3e%3c/svg%3e")` }, '[dir="rtl"] .chat-start .chat-bubble:before': { "maskImage": `url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 1 3 L 3 3 C 2 3 0 1 0 0'/%3e%3c/svg%3e")` }, ".chat-end": { "placeItems": "end", "gridTemplateColumns": "1fr auto" }, ".chat-end .chat-header": { "gridColumnStart": "1" }, ".chat-end .chat-footer": { "gridColumnStart": "1" }, ".chat-end .chat-image": { "gridColumnStart": "2" }, ".chat-end .chat-bubble": { "gridColumnStart": "1" }, ".chat-end .chat-bubble:before": { "maskImage": `url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 1 3 L 3 3 C 2 3 0 1 0 0'/%3e%3c/svg%3e")` }, '[dir="rtl"] .chat-end .chat-bubble:before': { "maskImage": `url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 3 3 L 3 0 C 3 1 1 3 0 3'/%3e%3c/svg%3e")` }, ".checkbox": { "flexShrink": "0" }, ".collapse:not(td):not(tr):not(colgroup)": { "visibility": "visible" }, ".collapse": { "position": "relative", "display": "grid", "overflow": "hidden", "gridTemplateRows": "auto 0fr", "transition": "grid-template-rows 0.2s" }, '.collapse-title,\n.collapse > input[type="checkbox"],\n.collapse > input[type="radio"],\n.collapse-content': { "gridColumnStart": "1", "gridRowStart": "1" }, '.collapse > input[type="checkbox"],\n.collapse > input[type="radio"]': { "appearance": "none", "opacity": "0" }, ".collapse-content": { "visibility": "hidden", "gridColumnStart": "1", "gridRowStart": "2", "minHeight": "0px", "transition": "visibility 0.2s" }, ".collapse[open],\n.collapse-open,\n.collapse:focus:not(.collapse-close)": { "gridTemplateRows": "auto 1fr" }, '.collapse:not(.collapse-close):has(> input[type="checkbox"]:checked),\n.collapse:not(.collapse-close):has(> input[type="radio"]:checked)': { "gridTemplateRows": "auto 1fr" }, '.collapse[open] > .collapse-content,\n.collapse-open > .collapse-content,\n.collapse:focus:not(.collapse-close) > .collapse-content,\n.collapse:not(.collapse-close) > input[type="checkbox"]:checked ~ .collapse-content,\n.collapse:not(.collapse-close) > input[type="radio"]:checked ~ .collapse-content': { "visibility": "visible", "minHeight": "fit-content" }, ":root .countdown": { "lineHeight": "1em" }, ".countdown": { "display": "inline-flex" }, ".countdown > *": { "height": "1em", "display": "inline-block", "overflowY": "hidden" }, ".countdown > *:before": { "position": "relative", "contentwhiteSpace": "pre", "top": "calc(var(--value) * -1em)" }, ".divider": { "display": "flex", "flexDirection": "row", "alignItems": "center", "alignSelf": "stretch" }, ".divider:before,\n  .divider:after": { "content": '""', "flexGrow": "1", "height": "0.125rem", "width": "100%" }, ".drawer": { "position": "relative", "display": "grid", "gridAutoColumns": "max-content auto" }, ".drawer-content": { "gridColumnStart": "2", "gridRowStart": "1" }, ".drawer-side": { "pointerEvents": "none", "position": "fixed", "left": "0px", "top": "0px", "gridColumnStart": "1", "gridRowStart": "1", "display": "grid", "width": "100%", "gridTemplateColumns": "repeat(1, minmax(0, 1fr))", "gridTemplateRows": "repeat(1, minmax(0, 1fr))", "alignItems": "flex-start", "justifyItems": "start", "overflowY": "auto", "overscrollBehavior": "contain", "height": ["100vh", "100dvh"], "scrollbarWidth": "none" }, ".drawer-side::-webkit-scrollbar": { "display": "none" }, ".drawer-side > .drawer-overlay": { "position": "sticky", "top": "0px", "placeSelf": "stretch" }, ".drawer-side > *": { "gridColumnStart": "1", "gridRowStart": "1" }, ".drawer-side > *:not(.drawer-overlay)": { "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "300ms", "transform": "translateX(-100%)" }, '[dir="rtl"] .drawer-side > *:not(.drawer-overlay)': { "transform": "translateX(-100%)" }, ".drawer-toggle": { "position": "fixed", "height": "0px", "width": "0px", "appearance": "none", "opacity": "0" }, ".drawer-toggle:checked ~ .drawer-side": { "pointerEvents": "auto", "visibility": "visible" }, ".drawer-toggle:checked ~ .drawer-side > *:not(.drawer-overlay)": { "transform": "translateX(0%)" }, ".drawer-end": { "gridAutoColumns": "auto max-content" }, ".drawer-end .drawer-toggle ~ .drawer-content": { "gridColumnStart": "1" }, ".drawer-end .drawer-toggle ~ .drawer-side": { "gridColumnStart": "2", "justifyItems": "end" }, ".drawer-end .drawer-toggle ~ .drawer-side > *:not(.drawer-overlay)": { "transform": "translateX(100%)" }, ".drawer-end .drawer-toggle:checked ~ .drawer-side > *:not(.drawer-overlay)": { "transform": "translateX(0%)" }, ".dropdown": { "position": "relative", "display": "inline-block" }, ".dropdown > *:not(summary):focus": { "outline": "2px solid transparent", "outlineOffset": "2px" }, ".dropdown .dropdown-content": { "position": "absolute" }, ".dropdown:is(:not(details)) .dropdown-content": { "visibility": "hidden", "opacity": "0" }, ".dropdown-end .dropdown-content": { "right": "0px" }, ".dropdown-left .dropdown-content": { "bottom": "auto", "right": "100%", "top": "0px" }, ".dropdown-right .dropdown-content": { "bottom": "auto", "left": "100%", "top": "0px" }, ".dropdown-bottom .dropdown-content": { "bottom": "auto", "top": "100%" }, ".dropdown-top .dropdown-content": { "bottom": "100%", "top": "auto" }, ".dropdown-end.dropdown-right .dropdown-content": { "bottom": "0px", "top": "auto" }, ".dropdown-end.dropdown-left .dropdown-content": { "bottom": "0px", "top": "auto" }, ".dropdown.dropdown-open .dropdown-content,\n.dropdown:not(.dropdown-hover):focus .dropdown-content,\n.dropdown:focus-within .dropdown-content": { "visibility": "visible", "opacity": "1" }, "@media (hover: hover)": { ".dropdown.dropdown-hover:hover .dropdown-content": { "visibility": "visible", "opacity": "1" } }, ".dropdown:is(details) summary::-webkit-details-marker": { "display": "none" }, ".file-input": { "height": "3rem", "flexShrink": "1", "paddingRight": "1rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"] }, ".file-input::file-selector-button": { "marginRight": "1rem", "display": "inline-flex", "height": "100%", "flexShrink": "0", "cursor": "pointer", "userSelect": "none", "flexWrap": "wrap", "alignItems": "center", "justifyContent": "center", "paddingLeft": "1rem", "paddingRight": "1rem", "textAlign": "center", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "1em"], "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms" }, ".footer": { "display": "grid", "width": "100%", "gridAutoFlow": "row", "placeItems": "start" }, ".footer > *": { "display": "grid", "placeItems": "start" }, ".footer-center": { "placeItems": "center", "textAlign": "center" }, ".footer-center > *": { "placeItems": "center" }, "@media (min-width: 48rem)": { ".footer": { "gridAutoFlow": "column" }, ".footer-center": { "gridAutoFlow": "row dense" } }, ".form-control": { "display": "flex", "flexDirection": "column" }, ".label": { "display": "flex", "userSelect": "none", "alignItems": "center", "justifyContent": "space-between" }, ".hero": { "display": "grid", "width": "100%", "placeItems": "center", "backgroundSize": "cover", "backgroundPosition": "center" }, ".hero > *": { "gridColumnStart": "1", "gridRowStart": "1" }, ".hero-overlay": { "gridColumnStart": "1", "gridRowStart": "1", "height": "100%", "width": "100%" }, ".hero-content": { "zIndex": "0", "display": "flex", "alignItems": "center", "justifyContent": "center" }, ".indicator": { "position": "relative", "display": "inline-flex", "width": "max-content" }, ".indicator :where(.indicator-item)": { "zIndex": "1", "position": "absolute", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "whiteSpace": "nowrap" }, ".input": { "flexShrink": "1", "height": "3rem", "paddingLeft": "1rem", "paddingRight": "1rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"] }, ".input-group": { "display": "flex", "width": "100%", "alignItems": "stretch" }, ".input-group > .input": { "isolation": "isolate" }, ".input-group > *,\n  .input-group > .input,\n  .input-group > .textarea,\n  .input-group > .select": { "borderRadius": "0px" }, ".input-group-md": { "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"] }, ".input-group-lg": { "fontSize": "1.125rem", "lineHeight": ["1.75rem", "2"] }, ".input-group-sm": { "fontSize": "0.875rem", "lineHeight": "2rem" }, ".input-group-xs": { "fontSize": "0.75rem", "lineHeight": ["1rem", "1.625"] }, ".input-group :where(span)": { "display": "flex", "alignItems": "center", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))", "paddingLeft": "1rem", "paddingRight": "1rem" }, ".input-group > :first-child": { "borderTopLeftRadius": "var(--rounded-btn, 0.5rem)", "borderTopRightRadius": "0", "borderBottomLeftRadius": "var(--rounded-btn, 0.5rem)", "borderBottomRightRadius": "0" }, ".input-group > :last-child": { "borderTopLeftRadius": "0", "borderTopRightRadius": "var(--rounded-btn, 0.5rem)", "borderBottomLeftRadius": "0", "borderBottomRightRadius": "var(--rounded-btn, 0.5rem)" }, ".input-group-vertical": { "flexDirection": "column" }, ".input-group-vertical :first-child": { "borderTopLeftRadius": "var(--rounded-btn, 0.5rem)", "borderTopRightRadius": "var(--rounded-btn, 0.5rem)", "borderBottomLeftRadius": "0", "borderBottomRightRadius": "0" }, ".input-group-vertical :last-child": { "borderTopLeftRadius": "0", "borderTopRightRadius": "0", "borderBottomLeftRadius": "var(--rounded-btn, 0.5rem)", "borderBottomRightRadius": "var(--rounded-btn, 0.5rem)" }, ".join": { "display": "inline-flex", "alignItems": "stretch" }, ".join :where(.join-item)": { "borderStartEndRadius": "0", "borderEndEndRadius": "0", "borderEndStartRadius": "0", "borderStartStartRadius": "0" }, ".join .join-item:not(:first-child):not(:last-child),\n  .join *:not(:first-child):not(:last-child) .join-item": { "borderStartEndRadius": "0", "borderEndEndRadius": "0", "borderEndStartRadius": "0", "borderStartStartRadius": "0" }, ".join .join-item:first-child:not(:last-child),\n  .join *:first-child:not(:last-child) .join-item": { "borderStartEndRadius": "0", "borderEndEndRadius": "0" }, ".join .dropdown .join-item:first-child:not(:last-child),\n  .join *:first-child:not(:last-child) .dropdown .join-item": { "borderStartEndRadius": "inherit", "borderEndEndRadius": "inherit" }, ".join :where(.join-item:first-child:not(:last-child)),\n  .join :where(*:first-child:not(:last-child) .join-item)": { "borderEndStartRadius": "inherit", "borderStartStartRadius": "inherit" }, ".join .join-item:last-child:not(:first-child),\n  .join *:last-child:not(:first-child) .join-item": { "borderEndStartRadius": "0", "borderStartStartRadius": "0" }, ".join :where(.join-item:last-child:not(:first-child)),\n  .join :where(*:last-child:not(:first-child) .join-item)": { "borderStartEndRadius": "inherit", "borderEndEndRadius": "inherit" }, "@supports not selector(:has(*))": { ":where(.join *)": { "borderRadius": "inherit" } }, "@supports selector(:has(*))": { ":where(.join *:has(.join-item))": { "borderRadius": "inherit" } }, ".kbd": { "display": "inline-flex", "alignItems": "center", "justifyContent": "center" }, ".link": { "cursor": "pointer", "textDecorationLine": "underline" }, ".link-hover": { "textDecorationLine": "none" }, ".mask": { "maskSize": "contain", "maskRepeat": "no-repeat", "maskPosition": "center" }, ".mask-half-1": { "maskSize": "200%", "maskPosition": "left" }, ".mask-half-2": { "maskSize": "200%", "maskPosition": "right" }, ".menu": { "display": "flex", "flexDirection": "column", "flexWrap": "wrap", "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".menu :where(li ul)": { "position": "relative", "whiteSpace": "nowrap" }, ".menu :where(li:not(.menu-title) > *:not(ul):not(details):not(.menu-title)),\n  .menu :where(li:not(.menu-title) > details > summary:not(.menu-title))": { "display": "grid", "gridAutoFlow": "column", "alignContent": "flex-start", "alignItems": "center", "gap": "0.5rem", "gridAutoColumns": "minmax(auto, max-content) auto max-content", "userSelect": "none" }, ".menu li.disabled": { "cursor": "not-allowed", "userSelect": "none" }, ".menu :where(li > .menu-dropdown:not(.menu-dropdown-show))": { "display": "none" }, ":where(.menu li)": { "position": "relative", "display": "flex", "flexShrink": "0", "flexDirection": "column", "flexWrap": "wrap", "alignItems": "stretch" }, ":where(.menu li) .badge": { "justifySelf": "end" }, ".mockup-code": { "position": "relative", "overflow": "hidden", "overflowX": "auto" }, ".mockup-code pre[data-prefix]:before": { "content": "attr(data-prefix)", "display": "inline-block", "textAlign": "right" }, ".mockup-window": { "position": "relative", "overflow": "hidden", "overflowX": "auto" }, ".mockup-window pre[data-prefix]:before": { "content": "attr(data-prefix)", "display": "inline-block", "textAlign": "right" }, ".mockup-browser": { "position": "relative", "overflow": "hidden", "overflowX": "auto" }, ".mockup-browser pre[data-prefix]:before": { "content": "attr(data-prefix)", "display": "inline-block", "textAlign": "right" }, ".modal": { "pointerEvents": "none", "position": "fixed", "inset": "0px", "margin": "0px", "display": "grid", "height": "100%", "maxHeight": "none", "width": "100%", "maxWidth": "none", "justifyItems": "center", "padding": "0px", "opacity": "0", "overscrollBehavior": "contain", "zIndex": "999" }, ".modal-scroll": { "overscrollBehavior": "auto" }, ":where(.modal)": { "alignItems": "center" }, ".modal-box": { "maxHeight": "calc(100vh - 5em)" }, ".modal-open,\n.modal:target,\n.modal-toggle:checked + .modal,\n.modal[open]": { "pointerEvents": "auto", "visibility": "visible", "opacity": "1" }, ".modal-action": { "display": "flex" }, ".modal-toggle": { "position": "fixed", "height": "0px", "width": "0px", "appearance": "none", "opacity": "0" }, ":root:has(:is(.modal-open, .modal:target, .modal-toggle:checked + .modal, .modal[open]))": { "overflow": "hidden" }, ".navbar": { "display": "flex", "alignItems": "center" }, ":where(.navbar > *)": { "display": "inline-flex", "alignItems": "center" }, ".navbar-start": { "width": "50%", "justifyContent": "flex-start" }, ".navbar-center": { "flexShrink": "0" }, ".navbar-end": { "width": "50%", "justifyContent": "flex-end" }, ".progress": { "position": "relative", "width": "100%", "appearance": "none", "overflow": "hidden" }, ".radial-progress": { "position": "relative", "display": "inline-grid", "height": "var(--size)", "width": "var(--size)", "placeContent": "center", "borderRadius": "9999px", "backgroundColor": "transparent", "verticalAlign": "middle", "boxSizing": "content-box" }, ".radial-progress::-moz-progress-bar": { "appearance": "none", "backgroundColor": "transparent" }, ".radial-progress::-webkit-progress-value": { "appearance": "none", "backgroundColor": "transparent" }, ".radial-progress::-webkit-progress-bar": { "appearance": "none", "backgroundColor": "transparent" }, ".radial-progress:before,\n.radial-progress:after": { "position": "absolute", "borderRadius": "9999px", "content": '""' }, ".radial-progress:before": { "inset": "0px", "background": "radial-gradient(farthest-side, currentColor 98%, #0000) top/var(--thickness) var(--thickness)\n      no-repeat,\n    conic-gradient(currentColor calc(var(--value) * 1%), #0000 0)", "WebkitMask": "radial-gradient(\n    farthest-side,\n    #0000 calc(99% - var(--thickness)),\n    #000 calc(100% - var(--thickness))\n  )", "mask": "radial-gradient(\n    farthest-side,\n    #0000 calc(99% - var(--thickness)),\n    #000 calc(100% - var(--thickness))\n  )" }, ".radial-progress:after": { "inset": "calc(50% - var(--thickness) / 2)", "transform": "rotate(calc(var(--value) * 3.6deg - 90deg)) translate(calc(var(--size) / 2 - 50%))" }, ".radio": { "flexShrink": "0" }, ".range": { "height": "1.5rem", "width": "100%", "cursor": "pointer" }, ".range:focus": { "outline": "none" }, ".rating": { "position": "relative", "display": "inline-flex" }, ".rating :where(input)": { "cursor": "pointer", "borderRadius": "0px" }, ".select": { "display": "inline-flex", "cursor": "pointer", "userSelect": "none", "appearance": "none", "height": "3rem", "paddingLeft": "1rem", "paddingRight": "2.5rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"], "minHeight": "3rem" }, ".select[multiple]": { "height": "auto" }, ".stack": { "display": "inline-grid" }, ".stack > *": { "gridColumnStart": "1", "gridRowStart": "1", "transform": "translateY(10%) scale(0.9)", "zIndex": "1" }, ".stack > *:nth-child(2)": { "transform": "translateY(5%) scale(0.95)", "zIndex": "2" }, ".stack > *:nth-child(1)": { "transform": "translateY(0) scale(1)", "zIndex": "3" }, ".stats": { "display": "inline-grid" }, ":where(.stats)": { "gridAutoFlow": "column" }, ".stat": { "display": "inline-grid", "width": "100%", "gridTemplateColumns": "repeat(1, 1fr)" }, ".stat-figure": { "gridColumnStart": "2", "gridRow": "span 3 / span 3", "gridRowStart": "1", "placeSelf": "center", "justifySelf": "end" }, ".stat-title": { "gridColumnStart": "1", "whiteSpace": "nowrap" }, ".stat-value": { "gridColumnStart": "1", "whiteSpace": "nowrap" }, ".stat-desc": { "gridColumnStart": "1", "whiteSpace": "nowrap" }, ".stat-actions": { "gridColumnStart": "1", "whiteSpace": "nowrap" }, ".steps": { "display": "inline-grid", "gridAutoFlow": "column", "overflow": "hidden", "overflowX": "auto", "counterReset": "step", "gridAutoColumns": "1fr" }, ".steps .step": { "display": "grid", "gridTemplateColumns": "repeat(1, minmax(0, 1fr))", "gridTemplateRows": "repeat(2, minmax(0, 1fr))", "placeItems": "center", "textAlign": "center" }, ".swap": { "position": "relative", "display": "inline-grid", "userSelect": "none", "placeContent": "center" }, ".swap > *": { "gridColumnStart": "1", "gridRowStart": "1" }, ".swap input": { "appearance": "none" }, ".swap .swap-on,\n.swap .swap-indeterminate,\n.swap input:indeterminate ~ .swap-on": { "opacity": "0" }, ".swap input:checked ~ .swap-off,\n.swap-active .swap-off,\n.swap input:indeterminate ~ .swap-off": { "opacity": "0" }, ".swap input:checked ~ .swap-on,\n.swap-active .swap-on,\n.swap input:indeterminate ~ .swap-indeterminate": { "opacity": "1" }, ".tabs": { "display": "flex", "flexWrap": "wrap", "alignItems": "flex-end" }, ".tab": { "position": "relative", "display": "inline-flex", "cursor": "pointer", "userSelect": "none", "flexWrap": "wrap", "alignItems": "center", "justifyContent": "center", "textAlign": "center", "height": "2rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"], "-TabPadding": "1rem" }, ".table": { "position": "relative", "width": "100%" }, ".table :where(.table-pin-rows thead tr)": { "position": "sticky", "top": "0px", "zIndex": "1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))" }, ".table :where(.table-pin-rows tfoot tr)": { "position": "sticky", "bottom": "0px", "zIndex": "1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))" }, ".table :where(.table-pin-cols tr th)": { "position": "sticky", "left": "0px", "right": "0px", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))" }, ".table-zebra tbody tr:nth-child(even) :where(.table-pin-cols tr th)": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))" }, ".textarea": { "flexShrink": "1", "minHeight": "3rem", "paddingLeft": "1rem", "paddingRight": "1rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"] }, ".toast": { "position": "fixed", "display": "flex", "minWidth": "fit-content", "flexDirection": "column", "whiteSpace": "nowrap" }, ".toggle": { "flexShrink": "0" } };
  }
});

// node_modules/daisyui/dist/unstyled.rtl.js
var require_unstyled_rtl = __commonJS({
  "node_modules/daisyui/dist/unstyled.rtl.js"(exports, module) {
    module.exports = { ".alert": { "display": "grid", "width": "100%", "gridAutoFlow": "row", "alignContent": "flex-start", "alignItems": "center", "justifyItems": "center", "gap": "1rem", "textAlign": "center" }, "@media (min-width: 640px)": { ".alert": { "gridAutoFlow": "column", "gridTemplateColumns": "auto minmax(auto,1fr)", "justifyItems": "start", "textAlign": "right" } }, ".artboard": { "width": "100%" }, ".avatar": { "position": "relative", "display": "inline-flex" }, ".avatar > div": { "display": "block", "aspectRatio": "1 / 1", "overflow": "hidden" }, ".avatar img": { "height": "100%", "width": "100%", "objectFit": "cover" }, ".avatar.placeholder > div": { "display": "flex", "alignItems": "center", "justifyContent": "center" }, ".badge": { "display": "inline-flex", "alignItems": "center", "justifyContent": "center", "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms", "height": "1.25rem", "fontSize": "0.875rem", "lineHeight": "1.25rem", "width": "fit-content", "paddingRight": "0.563rem", "paddingLeft": "0.563rem" }, ".btm-nav": { "position": "fixed", "bottom": "0px", "right": "0px", "left": "0px", "display": "flex", "width": "100%", "flexDirection": "row", "alignItems": "center", "justifyContent": "space-around", "paddingBottom": "env(safe-area-inset-bottom)" }, ".btm-nav > *": { "position": "relative", "display": "flex", "height": "100%", "flexBasis": "100%", "cursor": "pointer", "flexDirection": "column", "alignItems": "center", "justifyContent": "center", "gap": "0.25rem" }, ".breadcrumbs": { "maxWidth": "100%", "overflowX": "auto" }, ".breadcrumbs > ul,\n  .breadcrumbs > ol": { "display": "flex", "alignItems": "center", "whiteSpace": "nowrap", "minHeight": "min-content" }, ".breadcrumbs > ul > li, .breadcrumbs > ol > li": { "display": "flex", "alignItems": "center" }, ".breadcrumbs > ul > li > a, .breadcrumbs > ol > li > a": { "display": "flex", "cursor": "pointer", "alignItems": "center" }, "@media (hover:hover)": [{ ".breadcrumbs > ul > li > a:hover, .breadcrumbs > ol > li > a:hover": { "textDecorationLine": "underline" } }, { ".link-hover:hover": { "textDecorationLine": "underline" } }], ".btn": { "display": "inline-flex", "flexShrink": "0", "cursor": "pointer", "userSelect": "none", "flexWrap": "wrap", "alignItems": "center", "justifyContent": "center", "borderColor": "transparent", "textAlign": "center", "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms", "borderRadius": "var(--rounded-btn, 0.5rem)", "height": "3rem", "paddingRight": "1rem", "paddingLeft": "1rem", "minHeight": "3rem", "fontSize": "0.875rem", "lineHeight": "1em" }, ".btn-disabled,\n  .btn[disabled],\n  .btn:disabled": { "pointerEvents": "none" }, ".btn-square": { "height": "3rem", "width": "3rem", "padding": "0px" }, ".btn-circle": { "height": "3rem", "width": "3rem", "borderRadius": "9999px", "padding": "0px" }, ".btn-group": { "display": "inline-flex" }, '.btn-group > input[type="radio"].btn': { "appearance": "none" }, '.btn-group > input[type="radio"].btn:before': { "content": "attr(data-title)" }, '.btn:is(input[type="checkbox"]),\n.btn:is(input[type="radio"])': { "width": "auto", "appearance": "none" }, '.btn:is(input[type="checkbox"]):after,\n.btn:is(input[type="radio"]):after': { "-TwContent": "attr(aria-label)", "content": "var(--tw-content)" }, ".card": { "position": "relative", "display": "flex", "flexDirection": "column" }, ".card:focus": { "outline": "2px solid transparent", "outlineOffset": "2px" }, ".card-body": { "display": "flex", "flex": "1 1 auto", "flexDirection": "column" }, ".card-body :where(p)": { "flexGrow": "1" }, ".card-actions": { "display": "flex", "flexWrap": "wrap", "alignItems": "flex-start", "gap": "0.5rem" }, ".card figure": { "display": "flex", "alignItems": "center", "justifyContent": "center" }, ".card.image-full": { "display": "grid" }, ".card.image-full:before": { "position": "relative", "content": '""' }, ".card.image-full:before,\n    .card.image-full > *": { "gridColumnStart": "1", "gridRowStart": "1" }, ".card.image-full > figure img": { "height": "100%", "objectFit": "cover" }, ".card.image-full > .card-body": { "position": "relative" }, ".carousel": { "display": "inline-flex", "overflowX": "scroll", "scrollSnapType": "x mandatory", "scrollBehavior": "smooth" }, ".carousel-vertical": { "flexDirection": "column", "overflowY": "scroll", "scrollSnapType": "y mandatory" }, ".carousel-item": { "boxSizing": "content-box", "display": "flex", "flex": "none", "scrollSnapAlign": "start" }, ".carousel-center .carousel-item": { "scrollSnapAlign": "center" }, ".carousel-end .carousel-item": { "scrollSnapAlign": "end" }, ".chat": { "display": "grid", "gridTemplateColumns": "repeat(2, minmax(0, 1fr))", "columnGap": "0.75rem", "paddingTop": "0.25rem", "paddingBottom": "0.25rem" }, ".chat-image": { "gridRow": "span 2 / span 2", "alignSelf": "flex-end" }, ".chat-header": { "gridRowStart": "1", "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".chat-footer": { "gridRowStart": "3", "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".chat-bubble": { "position": "relative", "display": "block", "width": "fit-content", "paddingRight": "1rem", "paddingLeft": "1rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem", "maxWidth": "90%" }, ".chat-bubble:before": { "position": "absolute", "bottom": "0px", "height": "0.75rem", "width": "0.75rem", "backgroundColor": "inherit", "content": '""', "maskSize": "contain", "maskRepeat": "no-repeat", "maskPosition": "center" }, ".chat-start": { "placeItems": "start", "gridTemplateColumns": "auto 1fr" }, ".chat-start .chat-header": { "gridColumnStart": "2" }, ".chat-start .chat-footer": { "gridColumnStart": "2" }, ".chat-start .chat-image": { "gridColumnStart": "1" }, ".chat-start .chat-bubble": { "gridColumnStart": "2" }, ".chat-start .chat-bubble:before": { "maskImage": `url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 3 3 L 3 0 C 3 1 1 3 0 3'/%3e%3c/svg%3e")` }, '[dir="rtl"] .chat-start .chat-bubble:before': { "maskImage": `url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 1 3 L 3 3 C 2 3 0 1 0 0'/%3e%3c/svg%3e")` }, ".chat-end": { "placeItems": "end", "gridTemplateColumns": "1fr auto" }, ".chat-end .chat-header": { "gridColumnStart": "1" }, ".chat-end .chat-footer": { "gridColumnStart": "1" }, ".chat-end .chat-image": { "gridColumnStart": "2" }, ".chat-end .chat-bubble": { "gridColumnStart": "1" }, ".chat-end .chat-bubble:before": { "maskImage": `url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 1 3 L 3 3 C 2 3 0 1 0 0'/%3e%3c/svg%3e")` }, '[dir="rtl"] .chat-end .chat-bubble:before': { "maskImage": `url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 3 3 L 3 0 C 3 1 1 3 0 3'/%3e%3c/svg%3e")` }, ".checkbox": { "flexShrink": "0" }, ".collapse:not(td):not(tr):not(colgroup)": { "visibility": "visible" }, ".collapse": { "position": "relative", "display": "grid", "overflow": "hidden", "gridTemplateRows": "auto 0fr", "transition": "grid-template-rows 0.2s" }, '.collapse-title,\n.collapse > input[type="checkbox"],\n.collapse > input[type="radio"],\n.collapse-content': { "gridColumnStart": "1", "gridRowStart": "1" }, '.collapse > input[type="checkbox"],\n.collapse > input[type="radio"]': { "appearance": "none", "opacity": "0" }, ".collapse-content": { "visibility": "hidden", "gridColumnStart": "1", "gridRowStart": "2", "minHeight": "0px", "transition": "visibility 0.2s" }, ".collapse[open],\n.collapse-open,\n.collapse:focus:not(.collapse-close)": { "gridTemplateRows": "auto 1fr" }, '.collapse:not(.collapse-close):has(> input[type="checkbox"]:checked),\n.collapse:not(.collapse-close):has(> input[type="radio"]:checked)': { "gridTemplateRows": "auto 1fr" }, '.collapse[open] > .collapse-content,\n.collapse-open > .collapse-content,\n.collapse:focus:not(.collapse-close) > .collapse-content,\n.collapse:not(.collapse-close) > input[type="checkbox"]:checked ~ .collapse-content,\n.collapse:not(.collapse-close) > input[type="radio"]:checked ~ .collapse-content': { "visibility": "visible", "minHeight": "fit-content" }, ":root .countdown": { "lineHeight": "1em" }, ".countdown": { "display": "inline-flex" }, ".countdown > *": { "height": "1em", "display": "inline-block", "overflowY": "hidden" }, ".countdown > *:before": { "position": "relative", "contentwhiteSpace": "pre", "top": "calc(var(--value) * -1em)" }, ".divider": { "display": "flex", "flexDirection": "row", "alignItems": "center", "alignSelf": "stretch" }, ".divider:before,\n  .divider:after": { "content": '""', "flexGrow": "1", "height": "0.125rem", "width": "100%" }, ".drawer": { "position": "relative", "display": "grid", "gridAutoColumns": "max-content auto" }, ".drawer-content": { "gridColumnStart": "2", "gridRowStart": "1" }, ".drawer-side": { "pointerEvents": "none", "position": "fixed", "right": "0px", "top": "0px", "gridColumnStart": "1", "gridRowStart": "1", "display": "grid", "width": "100%", "gridTemplateColumns": "repeat(1, minmax(0, 1fr))", "gridTemplateRows": "repeat(1, minmax(0, 1fr))", "alignItems": "flex-start", "justifyItems": "start", "overflowY": "auto", "overscrollBehavior": "contain", "height": ["100vh", "100dvh"], "scrollbarWidth": "none" }, ".drawer-side::-webkit-scrollbar": { "display": "none" }, ".drawer-side > .drawer-overlay": { "position": "sticky", "top": "0px", "placeSelf": "stretch" }, ".drawer-side > *": { "gridColumnStart": "1", "gridRowStart": "1" }, ".drawer-side > *:not(.drawer-overlay)": { "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "300ms", "transform": "translateX(100%)" }, '[dir="rtl"] .drawer-side > *:not(.drawer-overlay)': { "transform": "translateX(100%)" }, ".drawer-toggle": { "position": "fixed", "height": "0px", "width": "0px", "appearance": "none", "opacity": "0" }, ".drawer-toggle:checked ~ .drawer-side": { "pointerEvents": "auto", "visibility": "visible" }, ".drawer-toggle:checked ~ .drawer-side > *:not(.drawer-overlay)": { "transform": "translateX(0%)" }, ".drawer-end": { "gridAutoColumns": "auto max-content" }, ".drawer-end .drawer-toggle ~ .drawer-content": { "gridColumnStart": "1" }, ".drawer-end .drawer-toggle ~ .drawer-side": { "gridColumnStart": "2", "justifyItems": "end" }, ".drawer-end .drawer-toggle ~ .drawer-side > *:not(.drawer-overlay)": { "transform": "translateX(-100%)" }, ".drawer-end .drawer-toggle:checked ~ .drawer-side > *:not(.drawer-overlay)": { "transform": "translateX(0%)" }, ".dropdown": { "position": "relative", "display": "inline-block" }, ".dropdown > *:not(summary):focus": { "outline": "2px solid transparent", "outlineOffset": "2px" }, ".dropdown .dropdown-content": { "position": "absolute" }, ".dropdown:is(:not(details)) .dropdown-content": { "visibility": "hidden", "opacity": "0" }, ".dropdown-end .dropdown-content": { "left": "0px" }, ".dropdown-left .dropdown-content": { "bottom": "auto", "left": "100%", "top": "0px" }, ".dropdown-right .dropdown-content": { "bottom": "auto", "right": "100%", "top": "0px" }, ".dropdown-bottom .dropdown-content": { "bottom": "auto", "top": "100%" }, ".dropdown-top .dropdown-content": { "bottom": "100%", "top": "auto" }, ".dropdown-end.dropdown-right .dropdown-content": { "bottom": "0px", "top": "auto" }, ".dropdown-end.dropdown-left .dropdown-content": { "bottom": "0px", "top": "auto" }, ".dropdown.dropdown-open .dropdown-content,\n.dropdown:not(.dropdown-hover):focus .dropdown-content,\n.dropdown:focus-within .dropdown-content": { "visibility": "visible", "opacity": "1" }, "@media (hover: hover)": { ".dropdown.dropdown-hover:hover .dropdown-content": { "visibility": "visible", "opacity": "1" } }, ".dropdown:is(details) summary::-webkit-details-marker": { "display": "none" }, ".file-input": { "height": "3rem", "flexShrink": "1", "paddingLeft": "1rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"] }, ".file-input::file-selector-button": { "marginLeft": "1rem", "display": "inline-flex", "height": "100%", "flexShrink": "0", "cursor": "pointer", "userSelect": "none", "flexWrap": "wrap", "alignItems": "center", "justifyContent": "center", "paddingRight": "1rem", "paddingLeft": "1rem", "textAlign": "center", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "1em"], "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms" }, ".footer": { "display": "grid", "width": "100%", "gridAutoFlow": "row", "placeItems": "start" }, ".footer > *": { "display": "grid", "placeItems": "start" }, ".footer-center": { "placeItems": "center", "textAlign": "center" }, ".footer-center > *": { "placeItems": "center" }, "@media (min-width: 48rem)": { ".footer": { "gridAutoFlow": "column" }, ".footer-center": { "gridAutoFlow": "row dense" } }, ".form-control": { "display": "flex", "flexDirection": "column" }, ".label": { "display": "flex", "userSelect": "none", "alignItems": "center", "justifyContent": "space-between" }, ".hero": { "display": "grid", "width": "100%", "placeItems": "center", "backgroundSize": "cover", "backgroundPosition": "center" }, ".hero > *": { "gridColumnStart": "1", "gridRowStart": "1" }, ".hero-overlay": { "gridColumnStart": "1", "gridRowStart": "1", "height": "100%", "width": "100%" }, ".hero-content": { "zIndex": "0", "display": "flex", "alignItems": "center", "justifyContent": "center" }, ".indicator": { "position": "relative", "display": "inline-flex", "width": "max-content" }, ".indicator :where(.indicator-item)": { "zIndex": "1", "position": "absolute", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "whiteSpace": "nowrap" }, ".input": { "flexShrink": "1", "height": "3rem", "paddingRight": "1rem", "paddingLeft": "1rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"] }, ".input-group": { "display": "flex", "width": "100%", "alignItems": "stretch" }, ".input-group > .input": { "isolation": "isolate" }, ".input-group > *,\n  .input-group > .input,\n  .input-group > .textarea,\n  .input-group > .select": { "borderRadius": "0px" }, ".input-group-md": { "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"] }, ".input-group-lg": { "fontSize": "1.125rem", "lineHeight": ["1.75rem", "2"] }, ".input-group-sm": { "fontSize": "0.875rem", "lineHeight": "2rem" }, ".input-group-xs": { "fontSize": "0.75rem", "lineHeight": ["1rem", "1.625"] }, ".input-group :where(span)": { "display": "flex", "alignItems": "center", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))", "paddingRight": "1rem", "paddingLeft": "1rem" }, ".input-group > :first-child": { "borderTopRightRadius": "var(--rounded-btn, 0.5rem)", "borderTopLeftRadius": "0", "borderBottomRightRadius": "var(--rounded-btn, 0.5rem)", "borderBottomLeftRadius": "0" }, ".input-group > :last-child": { "borderTopRightRadius": "0", "borderTopLeftRadius": "var(--rounded-btn, 0.5rem)", "borderBottomRightRadius": "0", "borderBottomLeftRadius": "var(--rounded-btn, 0.5rem)" }, ".input-group-vertical": { "flexDirection": "column" }, ".input-group-vertical :first-child": { "borderTopRightRadius": "var(--rounded-btn, 0.5rem)", "borderTopLeftRadius": "var(--rounded-btn, 0.5rem)", "borderBottomRightRadius": "0", "borderBottomLeftRadius": "0" }, ".input-group-vertical :last-child": { "borderTopRightRadius": "0", "borderTopLeftRadius": "0", "borderBottomRightRadius": "var(--rounded-btn, 0.5rem)", "borderBottomLeftRadius": "var(--rounded-btn, 0.5rem)" }, ".join": { "display": "inline-flex", "alignItems": "stretch" }, ".join :where(.join-item)": { "borderStartEndRadius": "0", "borderEndEndRadius": "0", "borderEndStartRadius": "0", "borderStartStartRadius": "0" }, ".join .join-item:not(:first-child):not(:last-child),\n  .join *:not(:first-child):not(:last-child) .join-item": { "borderStartEndRadius": "0", "borderEndEndRadius": "0", "borderEndStartRadius": "0", "borderStartStartRadius": "0" }, ".join .join-item:first-child:not(:last-child),\n  .join *:first-child:not(:last-child) .join-item": { "borderStartEndRadius": "0", "borderEndEndRadius": "0" }, ".join .dropdown .join-item:first-child:not(:last-child),\n  .join *:first-child:not(:last-child) .dropdown .join-item": { "borderStartEndRadius": "inherit", "borderEndEndRadius": "inherit" }, ".join :where(.join-item:first-child:not(:last-child)),\n  .join :where(*:first-child:not(:last-child) .join-item)": { "borderEndStartRadius": "inherit", "borderStartStartRadius": "inherit" }, ".join .join-item:last-child:not(:first-child),\n  .join *:last-child:not(:first-child) .join-item": { "borderEndStartRadius": "0", "borderStartStartRadius": "0" }, ".join :where(.join-item:last-child:not(:first-child)),\n  .join :where(*:last-child:not(:first-child) .join-item)": { "borderStartEndRadius": "inherit", "borderEndEndRadius": "inherit" }, "@supports not selector(:has(*))": { ":where(.join *)": { "borderRadius": "inherit" } }, "@supports selector(:has(*))": { ":where(.join *:has(.join-item))": { "borderRadius": "inherit" } }, ".kbd": { "display": "inline-flex", "alignItems": "center", "justifyContent": "center" }, ".link": { "cursor": "pointer", "textDecorationLine": "underline" }, ".link-hover": { "textDecorationLine": "none" }, ".mask": { "maskSize": "contain", "maskRepeat": "no-repeat", "maskPosition": "center" }, ".mask-half-1": { "maskSize": "200%", "maskPosition": "left" }, ".mask-half-2": { "maskSize": "200%", "maskPosition": "right" }, ".menu": { "display": "flex", "flexDirection": "column", "flexWrap": "wrap", "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".menu :where(li ul)": { "position": "relative", "whiteSpace": "nowrap" }, ".menu :where(li:not(.menu-title) > *:not(ul):not(details):not(.menu-title)),\n  .menu :where(li:not(.menu-title) > details > summary:not(.menu-title))": { "display": "grid", "gridAutoFlow": "column", "alignContent": "flex-start", "alignItems": "center", "gap": "0.5rem", "gridAutoColumns": "minmax(auto, max-content) auto max-content", "userSelect": "none" }, ".menu li.disabled": { "cursor": "not-allowed", "userSelect": "none" }, ".menu :where(li > .menu-dropdown:not(.menu-dropdown-show))": { "display": "none" }, ":where(.menu li)": { "position": "relative", "display": "flex", "flexShrink": "0", "flexDirection": "column", "flexWrap": "wrap", "alignItems": "stretch" }, ":where(.menu li) .badge": { "justifySelf": "end" }, ".mockup-code": { "position": "relative", "overflow": "hidden", "overflowX": "auto" }, ".mockup-code pre[data-prefix]:before": { "content": "attr(data-prefix)", "display": "inline-block", "textAlign": "left" }, ".mockup-window": { "position": "relative", "overflow": "hidden", "overflowX": "auto" }, ".mockup-window pre[data-prefix]:before": { "content": "attr(data-prefix)", "display": "inline-block", "textAlign": "left" }, ".mockup-browser": { "position": "relative", "overflow": "hidden", "overflowX": "auto" }, ".mockup-browser pre[data-prefix]:before": { "content": "attr(data-prefix)", "display": "inline-block", "textAlign": "left" }, ".modal": { "pointerEvents": "none", "position": "fixed", "inset": "0px", "margin": "0px", "display": "grid", "height": "100%", "maxHeight": "none", "width": "100%", "maxWidth": "none", "justifyItems": "center", "padding": "0px", "opacity": "0", "overscrollBehavior": "contain", "zIndex": "999" }, ".modal-scroll": { "overscrollBehavior": "auto" }, ":where(.modal)": { "alignItems": "center" }, ".modal-box": { "maxHeight": "calc(100vh - 5em)" }, ".modal-open,\n.modal:target,\n.modal-toggle:checked + .modal,\n.modal[open]": { "pointerEvents": "auto", "visibility": "visible", "opacity": "1" }, ".modal-action": { "display": "flex" }, ".modal-toggle": { "position": "fixed", "height": "0px", "width": "0px", "appearance": "none", "opacity": "0" }, ":root:has(:is(.modal-open, .modal:target, .modal-toggle:checked + .modal, .modal[open]))": { "overflow": "hidden" }, ".navbar": { "display": "flex", "alignItems": "center" }, ":where(.navbar > *)": { "display": "inline-flex", "alignItems": "center" }, ".navbar-start": { "width": "50%", "justifyContent": "flex-start" }, ".navbar-center": { "flexShrink": "0" }, ".navbar-end": { "width": "50%", "justifyContent": "flex-end" }, ".progress": { "position": "relative", "width": "100%", "appearance": "none", "overflow": "hidden" }, ".radial-progress": { "position": "relative", "display": "inline-grid", "height": "var(--size)", "width": "var(--size)", "placeContent": "center", "borderRadius": "9999px", "backgroundColor": "transparent", "verticalAlign": "middle", "boxSizing": "content-box" }, ".radial-progress::-moz-progress-bar": { "appearance": "none", "backgroundColor": "transparent" }, ".radial-progress::-webkit-progress-value": { "appearance": "none", "backgroundColor": "transparent" }, ".radial-progress::-webkit-progress-bar": { "appearance": "none", "backgroundColor": "transparent" }, ".radial-progress:before,\n.radial-progress:after": { "position": "absolute", "borderRadius": "9999px", "content": '""' }, ".radial-progress:before": { "inset": "0px", "background": "radial-gradient(farthest-side, currentColor 98%, #0000) top/var(--thickness) var(--thickness)\n      no-repeat,\n    conic-gradient(currentColor calc(var(--value) * 1%), #0000 0)", "WebkitMask": "radial-gradient(\n    farthest-side,\n    #0000 calc(99% - var(--thickness)),\n    #000 calc(100% - var(--thickness))\n  )", "mask": "radial-gradient(\n    farthest-side,\n    #0000 calc(99% - var(--thickness)),\n    #000 calc(100% - var(--thickness))\n  )" }, ".radial-progress:after": { "inset": "calc(50% - var(--thickness) / 2)", "transform": "rotate(calc(-1*(var(--value) * 3.6deg - 90deg))) translate(calc(-1*(var(--size) / 2 - 50%)))" }, ".radio": { "flexShrink": "0" }, ".range": { "height": "1.5rem", "width": "100%", "cursor": "pointer" }, ".range:focus": { "outline": "none" }, ".rating": { "position": "relative", "display": "inline-flex" }, ".rating :where(input)": { "cursor": "pointer", "borderRadius": "0px" }, ".select": { "display": "inline-flex", "cursor": "pointer", "userSelect": "none", "appearance": "none", "height": "3rem", "paddingRight": "1rem", "paddingLeft": "2.5rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"], "minHeight": "3rem" }, ".select[multiple]": { "height": "auto" }, ".stack": { "display": "inline-grid" }, ".stack > *": { "gridColumnStart": "1", "gridRowStart": "1", "transform": "translateY(10%) scale(0.9)", "zIndex": "1" }, ".stack > *:nth-child(2)": { "transform": "translateY(5%) scale(0.95)", "zIndex": "2" }, ".stack > *:nth-child(1)": { "transform": "translateY(0) scale(1)", "zIndex": "3" }, ".stats": { "display": "inline-grid" }, ":where(.stats)": { "gridAutoFlow": "column" }, ".stat": { "display": "inline-grid", "width": "100%", "gridTemplateColumns": "repeat(1, 1fr)" }, ".stat-figure": { "gridColumnStart": "2", "gridRow": "span 3 / span 3", "gridRowStart": "1", "placeSelf": "center", "justifySelf": "end" }, ".stat-title": { "gridColumnStart": "1", "whiteSpace": "nowrap" }, ".stat-value": { "gridColumnStart": "1", "whiteSpace": "nowrap" }, ".stat-desc": { "gridColumnStart": "1", "whiteSpace": "nowrap" }, ".stat-actions": { "gridColumnStart": "1", "whiteSpace": "nowrap" }, ".steps": { "display": "inline-grid", "gridAutoFlow": "column", "overflow": "hidden", "overflowX": "auto", "counterReset": "step", "gridAutoColumns": "1fr" }, ".steps .step": { "display": "grid", "gridTemplateColumns": "repeat(1, minmax(0, 1fr))", "gridTemplateRows": "repeat(2, minmax(0, 1fr))", "placeItems": "center", "textAlign": "center" }, ".swap": { "position": "relative", "display": "inline-grid", "userSelect": "none", "placeContent": "center" }, ".swap > *": { "gridColumnStart": "1", "gridRowStart": "1" }, ".swap input": { "appearance": "none" }, ".swap .swap-on,\n.swap .swap-indeterminate,\n.swap input:indeterminate ~ .swap-on": { "opacity": "0" }, ".swap input:checked ~ .swap-off,\n.swap-active .swap-off,\n.swap input:indeterminate ~ .swap-off": { "opacity": "0" }, ".swap input:checked ~ .swap-on,\n.swap-active .swap-on,\n.swap input:indeterminate ~ .swap-indeterminate": { "opacity": "1" }, ".tabs": { "display": "flex", "flexWrap": "wrap", "alignItems": "flex-end" }, ".tab": { "position": "relative", "display": "inline-flex", "cursor": "pointer", "userSelect": "none", "flexWrap": "wrap", "alignItems": "center", "justifyContent": "center", "textAlign": "center", "height": "2rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"], "-TabPadding": "1rem" }, ".table": { "position": "relative", "width": "100%" }, ".table :where(.table-pin-rows thead tr)": { "position": "sticky", "top": "0px", "zIndex": "1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))" }, ".table :where(.table-pin-rows tfoot tr)": { "position": "sticky", "bottom": "0px", "zIndex": "1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))" }, ".table :where(.table-pin-cols tr th)": { "position": "sticky", "right": "0px", "left": "0px", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))" }, ".table-zebra tbody tr:nth-child(even) :where(.table-pin-cols tr th)": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))" }, ".textarea": { "flexShrink": "1", "minHeight": "3rem", "paddingRight": "1rem", "paddingLeft": "1rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"] }, ".toast": { "position": "fixed", "display": "flex", "minWidth": "fit-content", "flexDirection": "column", "whiteSpace": "nowrap" }, ".toggle": { "flexShrink": "0" } };
  }
});

// node_modules/daisyui/dist/styled.js
var require_styled = __commonJS({
  "node_modules/daisyui/dist/styled.js"(exports, module) {
    module.exports = { ".alert": { "display": "grid", "width": "100%", "gridAutoFlow": "row", "alignContent": "flex-start", "alignItems": "center", "justifyItems": "center", "gap": "1rem", "textAlign": "center", "borderWidth": "1px", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))", "padding": "1rem", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "borderRadius": "var(--rounded-box, 1rem)", "-AlertBg": "hsl(var(--b2))", "-AlertBgMix": "hsl(var(--b1))", "backgroundColor": "var(--alert-bg)" }, "@media (min-width: 640px)": { ".alert": { "gridAutoFlow": "column", "gridTemplateColumns": "auto minmax(auto,1fr)", "justifyItems": "start", "textAlign": "left" } }, ".artboard": { "width": "100%" }, ".avatar": { "position": "relative", "display": "inline-flex" }, ".avatar > div": { "display": "block", "aspectRatio": "1 / 1", "overflow": "hidden" }, ".avatar img": { "height": "100%", "width": "100%", "objectFit": "cover" }, ".avatar.placeholder > div": { "display": "flex", "alignItems": "center", "justifyContent": "center" }, ".badge": { "display": "inline-flex", "alignItems": "center", "justifyContent": "center", "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms", "height": "1.25rem", "fontSize": "0.875rem", "lineHeight": "1.25rem", "width": "fit-content", "paddingLeft": "0.563rem", "paddingRight": "0.563rem", "borderWidth": "1px", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "borderRadius": "var(--rounded-badge, 1.9rem)" }, ".btm-nav": { "position": "fixed", "bottom": "0px", "left": "0px", "right": "0px", "display": "flex", "width": "100%", "flexDirection": "row", "alignItems": "center", "justifyContent": "space-around", "paddingBottom": "env(safe-area-inset-bottom)", "height": "4rem", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "color": "currentColor" }, ".btm-nav > *": { "position": "relative", "display": "flex", "height": "100%", "flexBasis": "100%", "cursor": "pointer", "flexDirection": "column", "alignItems": "center", "justifyContent": "center", "gap": "0.25rem", "borderColor": "currentColor" }, ".breadcrumbs": { "maxWidth": "100%", "overflowX": "auto", "paddingTop": "0.5rem", "paddingBottom": "0.5rem" }, ".breadcrumbs > ul,\n  .breadcrumbs > ol": { "display": "flex", "alignItems": "center", "whiteSpace": "nowrap", "minHeight": "min-content" }, ".breadcrumbs > ul > li, .breadcrumbs > ol > li": { "display": "flex", "alignItems": "center" }, ".breadcrumbs > ul > li > a, .breadcrumbs > ol > li > a": { "display": "flex", "cursor": "pointer", "alignItems": "center" }, "@media (hover:hover)": [{ ".breadcrumbs > ul > li > a:hover, .breadcrumbs > ol > li > a:hover": { "textDecorationLine": "underline" } }, { ".link-hover:hover": { "textDecorationLine": "underline" } }, { ".checkbox-primary:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))" } }, { ".checkbox-secondary:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))" } }, { ".checkbox-accent:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))" } }, { ".checkbox-success:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))" } }, { ".checkbox-warning:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))" } }, { ".checkbox-info:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))" } }, { ".checkbox-error:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))" } }, { ".label a:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))" } }, { ".link-primary:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--pf) / var(--tw-text-opacity))" } }, { ".link-secondary:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--sf) / var(--tw-text-opacity))" } }, { ".link-accent:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--af) / var(--tw-text-opacity))" } }, { ".link-neutral:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--nf) / var(--tw-text-opacity))" } }, { ".link-success:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--su) / var(--tw-text-opacity))" } }, { ".link-info:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--in) / var(--tw-text-opacity))" } }, { ".link-warning:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--wa) / var(--tw-text-opacity))" } }, { ".link-error:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--er) / var(--tw-text-opacity))" } }, { ".menu li > *:not(ul):not(.menu-title):not(details):active,\n.menu li > *:not(ul):not(.menu-title):not(details).active,\n.menu li > details > summary:active": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))" } }, { ".radio-primary:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))" } }, { ".radio-secondary:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))" } }, { ".radio-accent:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))" } }, { ".radio-success:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))" } }, { ".radio-warning:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))" } }, { ".radio-info:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))" } }, { ".radio-error:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))" } }, { ".tab:hover": { "-TwTextOpacity": "1" } }, { ".tabs-boxed .tab-active:not(.tab-disabled):not([disabled]):hover": { "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" } }, { ".table tr.hover:hover,\n  .table tr.hover:nth-child(even):hover": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))" } }, { ".table-zebra tr.hover:hover,\n  .table-zebra tr.hover:nth-child(even):hover": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))" } }], ".btn": { "display": "inline-flex", "flexShrink": "0", "cursor": "pointer", "userSelect": "none", "flexWrap": "wrap", "alignItems": "center", "justifyContent": "center", "borderColor": ["transparent", "hsl(var(--b2) / var(--tw-border-opacity))"], "textAlign": "center", "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms", "borderRadius": "var(--rounded-btn, 0.5rem)", "height": "3rem", "paddingLeft": "1rem", "paddingRight": "1rem", "minHeight": "3rem", "fontSize": "0.875rem", "lineHeight": "1em", "gap": "0.5rem", "fontWeight": "600", "textDecorationLine": ["none", "none"], "borderWidth": "var(--border-btn, 1px)", "animation": "button-pop var(--animation-btn, 0.25s) ease-out", "textTransform": "var(--btn-text-case, uppercase)", "-TwBorderOpacity": "1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--bc) / 1)" }, ".btn-disabled,\n  .btn[disabled],\n  .btn:disabled": { "pointerEvents": "none" }, ".btn-square": { "height": "3rem", "width": "3rem", "padding": "0px" }, ".btn-circle": { "height": "3rem", "width": "3rem", "borderRadius": "9999px", "padding": "0px" }, ".btn-group": { "display": "inline-flex" }, '.btn-group > input[type="radio"].btn': { "appearance": "none" }, '.btn-group > input[type="radio"].btn:before': { "content": "attr(data-title)" }, '.btn:is(input[type="checkbox"]),\n.btn:is(input[type="radio"])': { "width": "auto", "appearance": "none" }, '.btn:is(input[type="checkbox"]):after,\n.btn:is(input[type="radio"]):after': { "-TwContent": "attr(aria-label)", "content": "var(--tw-content)" }, ".card": { "position": "relative", "display": "flex", "flexDirection": "column", "borderRadius": "var(--rounded-box, 1rem)" }, ".card:focus": { "outline": "2px solid transparent", "outlineOffset": "2px" }, ".card-body": { "display": ["flex", "flex"], "flex": "1 1 auto", "flexDirection": ["column", "column"], "padding": "var(--padding-card, 2rem)", "gap": "0.5rem" }, ".card-body :where(p)": { "flexGrow": "1" }, ".card-actions": { "display": "flex", "flexWrap": "wrap", "alignItems": "flex-start", "gap": "0.5rem" }, ".card figure": { "display": "flex", "alignItems": "center", "justifyContent": "center" }, ".card.image-full": { "display": "grid" }, ".card.image-full:before": { "position": "relative", "content": '""', "zIndex": "10", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "opacity": "0.75", "borderRadius": "var(--rounded-box, 1rem)" }, ".card.image-full:before,\n    .card.image-full > *": { "gridColumnStart": "1", "gridRowStart": "1" }, ".card.image-full > figure img": { "height": "100%", "objectFit": "cover" }, ".card.image-full > .card-body": { "position": "relative", "zIndex": "20", "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))" }, ".carousel": { "display": "inline-flex", "overflowX": "scroll", "scrollSnapType": "x mandatory", "scrollBehavior": "smooth", "msOverflowStyle": "none", "scrollbarWidth": "none" }, ".carousel-vertical": { "flexDirection": "column", "overflowY": "scroll", "scrollSnapType": "y mandatory" }, ".carousel-item": { "boxSizing": "content-box", "display": "flex", "flex": "none", "scrollSnapAlign": "start" }, ".carousel-center .carousel-item": { "scrollSnapAlign": "center" }, ".carousel-end .carousel-item": { "scrollSnapAlign": "end" }, ".chat": { "display": "grid", "gridTemplateColumns": "repeat(2, minmax(0, 1fr))", "columnGap": "0.75rem", "paddingTop": "0.25rem", "paddingBottom": "0.25rem" }, ".chat-image": { "gridRow": "span 2 / span 2", "alignSelf": "flex-end" }, ".chat-header": { "gridRowStart": "1", "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".chat-footer": { "gridRowStart": "3", "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".chat-bubble": { "position": "relative", "display": "block", "width": "fit-content", "paddingLeft": "1rem", "paddingRight": "1rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem", "maxWidth": "90%", "borderRadius": "var(--rounded-box, 1rem)", "minHeight": "2.75rem", "minWidth": "2.75rem", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))" }, ".chat-bubble:before": { "position": "absolute", "bottom": "0px", "height": "0.75rem", "width": "0.75rem", "backgroundColor": "inherit", "content": '""', "maskSize": "contain", "maskRepeat": "no-repeat", "maskPosition": "center" }, ".chat-start": { "placeItems": "start", "gridTemplateColumns": "auto 1fr" }, ".chat-start .chat-header": { "gridColumnStart": "2" }, ".chat-start .chat-footer": { "gridColumnStart": "2" }, ".chat-start .chat-image": { "gridColumnStart": "1" }, ".chat-start .chat-bubble": { "gridColumnStart": "2", "borderBottomLeftRadius": "0px" }, ".chat-start .chat-bubble:before": { "maskImage": `url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 3 3 L 3 0 C 3 1 1 3 0 3'/%3e%3c/svg%3e")`, "left": "-0.749rem" }, '[dir="rtl"] .chat-start .chat-bubble:before': { "maskImage": `url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 1 3 L 3 3 C 2 3 0 1 0 0'/%3e%3c/svg%3e")` }, ".chat-end": { "placeItems": "end", "gridTemplateColumns": "1fr auto" }, ".chat-end .chat-header": { "gridColumnStart": "1" }, ".chat-end .chat-footer": { "gridColumnStart": "1" }, ".chat-end .chat-image": { "gridColumnStart": "2" }, ".chat-end .chat-bubble": { "gridColumnStart": "1", "borderBottomRightRadius": "0px" }, ".chat-end .chat-bubble:before": { "maskImage": `url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 1 3 L 3 3 C 2 3 0 1 0 0'/%3e%3c/svg%3e")`, "left": "99.9%" }, '[dir="rtl"] .chat-end .chat-bubble:before': { "maskImage": `url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 3 3 L 3 0 C 3 1 1 3 0 3'/%3e%3c/svg%3e")` }, ".checkbox": { "flexShrink": "0", "-Chkbg": "var(--bc)", "-Chkfg": "var(--b1)", "height": "1.5rem", "width": "1.5rem", "cursor": "pointer", "appearance": "none", "borderWidth": "1px", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.2", "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".collapse:not(td):not(tr):not(colgroup)": { "visibility": "visible" }, ".collapse": { "position": "relative", "display": "grid", "overflow": "hidden", "gridTemplateRows": "auto 0fr", "transition": "grid-template-rows 0.2s", "width": "100%", "borderRadius": "var(--rounded-box, 1rem)" }, '.collapse-title,\n.collapse > input[type="checkbox"],\n.collapse > input[type="radio"],\n.collapse-content': { "gridColumnStart": "1", "gridRowStart": "1" }, '.collapse > input[type="checkbox"],\n.collapse > input[type="radio"]': { "appearance": "none", "opacity": "0" }, ".collapse-content": { "visibility": "hidden", "gridColumnStart": "1", "gridRowStart": "2", "minHeight": "0px", "transition": ["visibility 0.2s", "padding 0.2s ease-out,\n    background-color 0.2s ease-out"], "paddingLeft": "1rem", "paddingRight": "1rem", "cursor": "unset" }, ".collapse[open],\n.collapse-open,\n.collapse:focus:not(.collapse-close)": { "gridTemplateRows": "auto 1fr" }, '.collapse:not(.collapse-close):has(> input[type="checkbox"]:checked),\n.collapse:not(.collapse-close):has(> input[type="radio"]:checked)': { "gridTemplateRows": "auto 1fr" }, '.collapse[open] > .collapse-content,\n.collapse-open > .collapse-content,\n.collapse:focus:not(.collapse-close) > .collapse-content,\n.collapse:not(.collapse-close) > input[type="checkbox"]:checked ~ .collapse-content,\n.collapse:not(.collapse-close) > input[type="radio"]:checked ~ .collapse-content': { "visibility": "visible", "minHeight": "fit-content" }, ":root .countdown": { "lineHeight": "1em" }, ".countdown": { "display": "inline-flex" }, ".countdown > *": { "height": "1em", "display": "inline-block", "overflowY": "hidden" }, ".countdown > *:before": { "position": "relative", "contentwhiteSpace": "pre", "top": "calc(var(--value) * -1em)", "textAlign": "center", "transition": "all 1s cubic-bezier(1, 0, 0, 1)" }, ".divider": { "display": "flex", "flexDirection": "row", "alignItems": "center", "alignSelf": "stretch", "marginTop": "1rem", "marginBottom": "1rem", "height": "1rem", "whiteSpace": "nowrap" }, ".divider:before,\n  .divider:after": { "content": '""', "flexGrow": "1", "height": "0.125rem", "width": "100%" }, ".drawer": { "position": "relative", "display": "grid", "gridAutoColumns": "max-content auto", "width": "100%" }, ".drawer-content": { "gridColumnStart": "2", "gridRowStart": "1" }, ".drawer-side": { "pointerEvents": "none", "position": "fixed", "left": "0px", "top": "0px", "gridColumnStart": "1", "gridRowStart": "1", "display": "grid", "width": "100%", "gridTemplateColumns": "repeat(1, minmax(0, 1fr))", "gridTemplateRows": "repeat(1, minmax(0, 1fr))", "alignItems": "flex-start", "justifyItems": "start", "overflowY": "auto", "overscrollBehavior": "contain", "height": ["100vh", "100dvh"], "scrollbarWidth": "none" }, ".drawer-side::-webkit-scrollbar": { "display": "none" }, ".drawer-side > .drawer-overlay": { "position": "sticky", "top": "0px", "placeSelf": "stretch", "cursor": "pointer", "backgroundColor": "transparent", "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms" }, ".drawer-side > *": { "gridColumnStart": "1", "gridRowStart": "1" }, ".drawer-side > *:not(.drawer-overlay)": { "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "300ms", "transform": "translateX(-100%)" }, '[dir="rtl"] .drawer-side > *:not(.drawer-overlay)': { "transform": "translateX(-100%)" }, ".drawer-toggle": { "position": "fixed", "height": "0px", "width": "0px", "appearance": "none", "opacity": "0" }, ".drawer-toggle:checked ~ .drawer-side": { "pointerEvents": "auto", "visibility": "visible" }, ".drawer-toggle:checked ~ .drawer-side > *:not(.drawer-overlay)": { "transform": "translateX(0%)" }, ".drawer-end": { "gridAutoColumns": "auto max-content" }, ".drawer-end .drawer-toggle ~ .drawer-content": { "gridColumnStart": "1" }, ".drawer-end .drawer-toggle ~ .drawer-side": { "gridColumnStart": "2", "justifyItems": "end" }, ".drawer-end .drawer-toggle ~ .drawer-side > *:not(.drawer-overlay)": { "transform": "translateX(100%)" }, ".drawer-end .drawer-toggle:checked ~ .drawer-side > *:not(.drawer-overlay)": { "transform": "translateX(0%)" }, ".dropdown": { "position": "relative", "display": "inline-block" }, ".dropdown > *:not(summary):focus": { "outline": "2px solid transparent", "outlineOffset": "2px" }, ".dropdown .dropdown-content": { "position": "absolute" }, ".dropdown:is(:not(details)) .dropdown-content": { "visibility": "hidden", "opacity": "0", "transformOrigin": "top", "-TwScaleX": ".95", "-TwScaleY": ".95", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms" }, ".dropdown-end .dropdown-content": { "right": "0px" }, ".dropdown-left .dropdown-content": { "bottom": "auto", "right": "100%", "top": "0px", "transformOrigin": "right" }, ".dropdown-right .dropdown-content": { "bottom": "auto", "left": "100%", "top": "0px", "transformOrigin": "left" }, ".dropdown-bottom .dropdown-content": { "bottom": "auto", "top": "100%", "transformOrigin": "top" }, ".dropdown-top .dropdown-content": { "bottom": "100%", "top": "auto", "transformOrigin": "bottom" }, ".dropdown-end.dropdown-right .dropdown-content": { "bottom": "0px", "top": "auto" }, ".dropdown-end.dropdown-left .dropdown-content": { "bottom": "0px", "top": "auto" }, ".dropdown.dropdown-open .dropdown-content,\n.dropdown:not(.dropdown-hover):focus .dropdown-content,\n.dropdown:focus-within .dropdown-content": { "visibility": "visible", "opacity": "1" }, "@media (hover: hover)": [{ ".dropdown.dropdown-hover:hover .dropdown-content": { "visibility": "visible", "opacity": "1" } }, { ".btm-nav > *.disabled:hover,\n      .btm-nav > *[disabled]:hover": { "pointerEvents": "none", "-TwBorderOpacity": "0", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "-TwTextOpacity": "0.2" } }, { ".btn:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b3) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))" } }, { ".btn-primary:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--pf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--pf) / var(--tw-bg-opacity))" } }, { ".btn-secondary:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--sf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--sf) / var(--tw-bg-opacity))" } }, { ".btn-accent:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--af) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--af) / var(--tw-bg-opacity))" } }, { ".btn-neutral:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--nf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--nf) / var(--tw-bg-opacity))" } }, { ".btn-info:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))" } }, { ".btn-success:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))" } }, { ".btn-warning:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))" } }, { ".btn-error:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))" } }, { ".btn.glass:hover": { "-GlassOpacity": "25%", "-GlassBorderOpacity": "15%" } }, { ".btn-ghost:hover": { "-TwBorderOpacity": "0", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.2" } }, { ".btn-link:hover": { "borderColor": "transparent", "backgroundColor": "transparent", "textDecorationLine": "underline" } }, { ".btn-outline:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--b1) / var(--tw-text-opacity))" } }, { ".btn-outline.btn-primary:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--pf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--pf) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" } }, { ".btn-outline.btn-secondary:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--sf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--sf) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" } }, { ".btn-outline.btn-accent:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--af) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--af) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" } }, { ".btn-outline.btn-success:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" } }, { ".btn-outline.btn-info:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" } }, { ".btn-outline.btn-warning:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" } }, { ".btn-outline.btn-error:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" } }, { ".btn-disabled:hover,\n    .btn[disabled]:hover,\n    .btn:disabled:hover": { "-TwBorderOpacity": "0", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.2", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "-TwTextOpacity": "0.2" } }, { '.btn:is(input[type="checkbox"]:checked):hover, .btn:is(input[type="radio"]:checked):hover': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--pf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--pf) / var(--tw-bg-opacity))" } }, { ".dropdown.dropdown-hover:hover .dropdown-content": { "-TwScaleX": "1", "-TwScaleY": "1", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" } }, { ":where(.menu li:not(.menu-title):not(.disabled) > *:not(ul):not(details):not(.menu-title)):not(.active):hover, :where(.menu li:not(.menu-title):not(.disabled) > details > summary:not(.menu-title)):not(.active):hover": { "cursor": "pointer", "backgroundColor": "hsl(var(--bc) / 0.1)", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "outline": "2px solid transparent", "outlineOffset": "2px" } }, { ".tab[disabled],\n    .tab[disabled]:hover": { "cursor": "not-allowed", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "-TwTextOpacity": "0.2" } }], ".dropdown:is(details) summary::-webkit-details-marker": { "display": "none" }, ".file-input": { "height": "3rem", "flexShrink": "1", "paddingRight": "1rem", "fontSize": ["0.875rem", "1rem"], "lineHeight": ["1.25rem", "2", "1.5rem"], "overflow": "hidden", "borderWidth": "1px", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".file-input::file-selector-button": { "marginRight": "1rem", "display": "inline-flex", "height": "100%", "flexShrink": "0", "cursor": "pointer", "userSelect": "none", "flexWrap": "wrap", "alignItems": "center", "justifyContent": "center", "paddingLeft": "1rem", "paddingRight": "1rem", "textAlign": "center", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "1em"], "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms", "borderStyle": "solid", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--n) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "fontWeight": "600", "textTransform": ["uppercase", "var(--btn-text-case, uppercase)"], "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))", "textDecorationLine": "none", "borderWidth": "var(--border-btn, 1px)", "animation": "button-pop var(--animation-btn, 0.25s) ease-out" }, ".footer": { "display": "grid", "width": "100%", "gridAutoFlow": "row", "placeItems": "start", "columnGap": "1rem", "rowGap": "2.5rem", "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".footer > *": { "display": "grid", "placeItems": "start", "gap": "0.5rem" }, ".footer-center": { "placeItems": "center", "textAlign": "center" }, ".footer-center > *": { "placeItems": "center" }, "@media (min-width: 48rem)": { ".footer": { "gridAutoFlow": "column" }, ".footer-center": { "gridAutoFlow": "row dense" } }, ".form-control": { "display": "flex", "flexDirection": "column" }, ".label": { "display": "flex", "userSelect": "none", "alignItems": "center", "justifyContent": "space-between", "paddingLeft": "0.25rem", "paddingRight": "0.25rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem" }, ".hero": { "display": "grid", "width": "100%", "placeItems": "center", "backgroundSize": "cover", "backgroundPosition": "center" }, ".hero > *": { "gridColumnStart": "1", "gridRowStart": "1" }, ".hero-overlay": { "gridColumnStart": "1", "gridRowStart": "1", "height": "100%", "width": "100%", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.5" }, ".hero-content": { "zIndex": "0", "display": "flex", "alignItems": "center", "justifyContent": "center", "maxWidth": "80rem", "gap": "1rem", "padding": "1rem" }, ".indicator": { "position": "relative", "display": "inline-flex", "width": "max-content" }, ".indicator :where(.indicator-item)": { "zIndex": "1", "position": "absolute", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "whiteSpace": "nowrap" }, ".input": { "flexShrink": "1", "height": "3rem", "paddingLeft": "1rem", "paddingRight": "1rem", "fontSize": ["0.875rem", "1rem"], "lineHeight": ["1.25rem", "2", "1.5rem"], "borderWidth": "1px", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".input-group": { "display": "flex", "width": "100%", "alignItems": "stretch" }, ".input-group > .input": { "isolation": "isolate" }, ".input-group > *,\n  .input-group > .input,\n  .input-group > .textarea,\n  .input-group > .select": { "borderRadius": "0px" }, ".input-group-md": { "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"] }, ".input-group-lg": { "fontSize": "1.125rem", "lineHeight": ["1.75rem", "2"] }, ".input-group-sm": { "fontSize": "0.875rem", "lineHeight": "2rem" }, ".input-group-xs": { "fontSize": "0.75rem", "lineHeight": ["1rem", "1.625"] }, ".input-group :where(span)": { "display": "flex", "alignItems": "center", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))", "paddingLeft": "1rem", "paddingRight": "1rem" }, ".input-group > :first-child": { "borderTopLeftRadius": "var(--rounded-btn, 0.5rem)", "borderTopRightRadius": "0", "borderBottomLeftRadius": "var(--rounded-btn, 0.5rem)", "borderBottomRightRadius": "0" }, ".input-group > :last-child": { "borderTopLeftRadius": "0", "borderTopRightRadius": "var(--rounded-btn, 0.5rem)", "borderBottomLeftRadius": "0", "borderBottomRightRadius": "var(--rounded-btn, 0.5rem)" }, ".input-group-vertical": { "flexDirection": "column" }, ".input-group-vertical :first-child": { "borderTopLeftRadius": "var(--rounded-btn, 0.5rem)", "borderTopRightRadius": "var(--rounded-btn, 0.5rem)", "borderBottomLeftRadius": "0", "borderBottomRightRadius": "0" }, ".input-group-vertical :last-child": { "borderTopLeftRadius": "0", "borderTopRightRadius": "0", "borderBottomLeftRadius": "var(--rounded-btn, 0.5rem)", "borderBottomRightRadius": "var(--rounded-btn, 0.5rem)" }, ".join": { "display": "inline-flex", "alignItems": "stretch", "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".join :where(.join-item)": { "borderStartEndRadius": "0", "borderEndEndRadius": "0", "borderEndStartRadius": "0", "borderStartStartRadius": "0" }, ".join .join-item:not(:first-child):not(:last-child),\n  .join *:not(:first-child):not(:last-child) .join-item": { "borderStartEndRadius": "0", "borderEndEndRadius": "0", "borderEndStartRadius": "0", "borderStartStartRadius": "0" }, ".join .join-item:first-child:not(:last-child),\n  .join *:first-child:not(:last-child) .join-item": { "borderStartEndRadius": "0", "borderEndEndRadius": "0" }, ".join .dropdown .join-item:first-child:not(:last-child),\n  .join *:first-child:not(:last-child) .dropdown .join-item": { "borderStartEndRadius": "inherit", "borderEndEndRadius": "inherit" }, ".join :where(.join-item:first-child:not(:last-child)),\n  .join :where(*:first-child:not(:last-child) .join-item)": { "borderEndStartRadius": "inherit", "borderStartStartRadius": "inherit" }, ".join .join-item:last-child:not(:first-child),\n  .join *:last-child:not(:first-child) .join-item": { "borderEndStartRadius": "0", "borderStartStartRadius": "0" }, ".join :where(.join-item:last-child:not(:first-child)),\n  .join :where(*:last-child:not(:first-child) .join-item)": { "borderStartEndRadius": "inherit", "borderEndEndRadius": "inherit" }, "@supports not selector(:has(*))": { ":where(.join *)": { "borderRadius": "inherit" } }, "@supports selector(:has(*))": { ":where(.join *:has(.join-item))": { "borderRadius": "inherit" } }, ".kbd": { "display": "inline-flex", "alignItems": "center", "justifyContent": "center", "borderWidth": "1px", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.2", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "paddingLeft": "0.5rem", "paddingRight": "0.5rem", "borderRadius": "var(--rounded-btn, 0.5rem)", "borderBottomWidth": "2px", "minHeight": "2.2em", "minWidth": "2.2em" }, ".link": { "cursor": "pointer", "textDecorationLine": "underline" }, ".link-hover": { "textDecorationLine": "none" }, ".mask": { "maskSize": "contain", "maskRepeat": "no-repeat", "maskPosition": "center" }, ".mask-half-1": { "maskSize": "200%", "maskPosition": "left" }, ".mask-half-2": { "maskSize": "200%", "maskPosition": "right" }, ".menu": { "display": "flex", "flexDirection": "column", "flexWrap": "wrap", "fontSize": "0.875rem", "lineHeight": "1.25rem", "padding": "0.5rem" }, ".menu :where(li ul)": { "position": "relative", "whiteSpace": "nowrap", "marginLeft": "1rem", "paddingLeft": "0.5rem" }, ".menu :where(li:not(.menu-title) > *:not(ul):not(details):not(.menu-title)),\n  .menu :where(li:not(.menu-title) > details > summary:not(.menu-title))": { "display": "grid", "gridAutoFlow": "column", "alignContent": "flex-start", "alignItems": "center", "gap": "0.5rem", "gridAutoColumns": "minmax(auto, max-content) auto max-content", "userSelect": "none" }, ".menu li.disabled": { "cursor": "not-allowed", "userSelect": "none", "color": "hsl(var(--bc) / 0.3)" }, ".menu :where(li > .menu-dropdown:not(.menu-dropdown-show))": { "display": "none" }, ":where(.menu li)": { "position": "relative", "display": "flex", "flexShrink": "0", "flexDirection": "column", "flexWrap": "wrap", "alignItems": "stretch" }, ":where(.menu li) .badge": { "justifySelf": "end" }, ".mockup-code": { "position": "relative", "overflow": "hidden", "overflowX": "auto", "minWidth": "18rem", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "paddingTop": "1.25rem", "paddingBottom": "1.25rem", "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".mockup-code pre[data-prefix]:before": { "content": ["attr(data-prefix)", "attr(data-prefix)"], "display": "inline-block", "textAlign": "right", "width": "2rem", "opacity": "0.5" }, ".mockup-window": { "position": "relative", "overflow": "hidden", "overflowX": "auto", "paddingTop": "1.25rem", "borderRadius": "var(--rounded-box, 1rem)" }, ".mockup-window pre[data-prefix]:before": { "content": "attr(data-prefix)", "display": "inline-block", "textAlign": "right" }, ".mockup-browser": { "position": "relative", "overflow": "hidden", "overflowX": "auto", "borderRadius": "var(--rounded-box, 1rem)" }, ".mockup-browser pre[data-prefix]:before": { "content": "attr(data-prefix)", "display": "inline-block", "textAlign": "right" }, ".modal": { "pointerEvents": "none", "position": "fixed", "inset": "0px", "margin": "0px", "display": "grid", "height": "100%", "maxHeight": "none", "width": "100%", "maxWidth": "none", "justifyItems": "center", "padding": "0px", "opacity": "0", "overscrollBehavior": ["contain", "contain"], "zIndex": "999", "backgroundColor": "transparent", "color": "inherit", "transitionDuration": "200ms", "transitionTimingFunction": "cubic-bezier(0, 0, 0.2, 1)", "transitionProperty": "transform, opacity, visibility", "overflowY": "hidden" }, ".modal-scroll": { "overscrollBehavior": "auto" }, ":where(.modal)": { "alignItems": "center" }, ".modal-box": { "maxHeight": "calc(100vh - 5em)", "gridColumnStart": "1", "gridRowStart": "1", "width": "91.666667%", "maxWidth": "32rem", "-TwScaleX": ".9", "-TwScaleY": ".9", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "padding": "1.5rem", "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms", "borderTopLeftRadius": "var(--rounded-box, 1rem)", "borderTopRightRadius": "var(--rounded-box, 1rem)", "borderBottomLeftRadius": "var(--rounded-box, 1rem)", "borderBottomRightRadius": "var(--rounded-box, 1rem)", "boxShadow": "rgba(0, 0, 0, 0.25) 0px 25px 50px -12px", "overflowY": "auto", "overscrollBehavior": "contain" }, ".modal-open,\n.modal:target,\n.modal-toggle:checked + .modal,\n.modal[open]": { "pointerEvents": "auto", "visibility": "visible", "opacity": "1" }, ".modal-action": { "display": "flex", "marginTop": "1.5rem", "justifyContent": "flex-end" }, ".modal-toggle": { "position": "fixed", "height": "0px", "width": "0px", "appearance": "none", "opacity": "0" }, ":root:has(:is(.modal-open, .modal:target, .modal-toggle:checked + .modal, .modal[open]))": { "overflow": "hidden" }, ".navbar": { "display": "flex", "alignItems": "center", "padding": "var(--navbar-padding, 0.5rem)", "minHeight": "4rem", "width": "100%" }, ":where(.navbar > *)": { "display": "inline-flex", "alignItems": "center" }, ".navbar-start": { "width": "50%", "justifyContent": "flex-start" }, ".navbar-center": { "flexShrink": "0" }, ".navbar-end": { "width": "50%", "justifyContent": "flex-end" }, ".progress": { "position": "relative", "width": "100%", "appearance": "none", "overflow": "hidden", "height": "0.5rem", "backgroundColor": "hsl(var(--bc) / 0.2)", "borderRadius": "var(--rounded-box, 1rem)" }, ".radial-progress": { "position": "relative", "display": "inline-grid", "height": "var(--size)", "width": "var(--size)", "placeContent": "center", "borderRadius": "9999px", "backgroundColor": "transparent", "verticalAlign": "middle", "boxSizing": "content-box", "-Value": "0", "-Size": "5rem", "-Thickness": "calc(var(--size) / 10)" }, ".radial-progress::-moz-progress-bar": { "appearance": "none", "backgroundColor": "transparent" }, ".radial-progress::-webkit-progress-value": { "appearance": "none", "backgroundColor": "transparent" }, ".radial-progress::-webkit-progress-bar": { "appearance": "none", "backgroundColor": "transparent" }, ".radial-progress:before,\n.radial-progress:after": { "position": "absolute", "borderRadius": "9999px", "content": '""' }, ".radial-progress:before": { "inset": "0px", "background": "radial-gradient(farthest-side, currentColor 98%, #0000) top/var(--thickness) var(--thickness)\n      no-repeat,\n    conic-gradient(currentColor calc(var(--value) * 1%), #0000 0)", "WebkitMask": "radial-gradient(\n    farthest-side,\n    #0000 calc(99% - var(--thickness)),\n    #000 calc(100% - var(--thickness))\n  )", "mask": "radial-gradient(\n    farthest-side,\n    #0000 calc(99% - var(--thickness)),\n    #000 calc(100% - var(--thickness))\n  )" }, ".radial-progress:after": { "inset": "calc(50% - var(--thickness) / 2)", "transform": "rotate(calc(var(--value) * 3.6deg - 90deg)) translate(calc(var(--size) / 2 - 50%))", "backgroundColor": "currentColor" }, ".radio": { "flexShrink": "0", "-Chkbg": "var(--bc)", "height": "1.5rem", "width": "1.5rem", "cursor": "pointer", "appearance": "none", "borderRadius": "9999px", "borderWidth": "1px", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.2" }, ".range": { "height": "1.5rem", "width": "100%", "cursor": "pointer", "appearance": "none", "WebkitAppearance": "none", "-RangeShdw": "var(--bc)", "overflow": "hidden", "backgroundColor": "transparent", "borderRadius": "var(--rounded-box, 1rem)" }, ".range:focus": { "outline": "none" }, ".rating": { "position": "relative", "display": "inline-flex" }, ".rating :where(input)": { "cursor": "pointer", "borderRadius": "0px", "animation": "rating-pop var(--animation-input, 0.25s) ease-out", "height": "1.5rem", "width": "1.5rem", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "-TwBgOpacity": "1" }, ".select": { "display": "inline-flex", "cursor": "pointer", "userSelect": "none", "appearance": "none", "height": "3rem", "paddingLeft": "1rem", "paddingRight": ["2.5rem", "2.5rem"], "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"], "minHeight": "3rem", "borderWidth": "1px", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-btn, 0.5rem)", "backgroundImage": "linear-gradient(45deg, transparent 50%, currentColor 50%),\n    linear-gradient(135deg, currentColor 50%, transparent 50%)", "backgroundPosition": "calc(100% - 20px) calc(1px + 50%),\n    calc(100% - 16.1px) calc(1px + 50%)", "backgroundSize": "4px 4px,\n    4px 4px", "backgroundRepeat": "no-repeat" }, ".select[multiple]": { "height": "auto" }, ".stack": { "display": "inline-grid", "placeItems": "center", "alignItems": "flex-end" }, ".stack > *": { "gridColumnStart": "1", "gridRowStart": "1", "transform": "translateY(10%) scale(0.9)", "zIndex": "1", "width": "100%", "opacity": "0.6" }, ".stack > *:nth-child(2)": { "transform": "translateY(5%) scale(0.95)", "zIndex": "2", "opacity": "0.8" }, ".stack > *:nth-child(1)": { "transform": "translateY(0) scale(1)", "zIndex": "3", "opacity": "1" }, ".stats": { "display": "inline-grid", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ":where(.stats)": { "gridAutoFlow": "column", "overflowX": "auto" }, ".stat": { "display": "inline-grid", "width": "100%", "gridTemplateColumns": "repeat(1, 1fr)", "columnGap": "1rem", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.1", "paddingLeft": "1.5rem", "paddingRight": "1.5rem", "paddingTop": "1rem", "paddingBottom": "1rem" }, ".stat-figure": { "gridColumnStart": "2", "gridRow": "span 3 / span 3", "gridRowStart": "1", "placeSelf": "center", "justifySelf": "end" }, ".stat-title": { "gridColumnStart": "1", "whiteSpace": "nowrap", "color": "hsl(var(--bc) / 0.6)" }, ".stat-value": { "gridColumnStart": "1", "whiteSpace": "nowrap", "fontSize": "2.25rem", "lineHeight": "2.5rem", "fontWeight": "800" }, ".stat-desc": { "gridColumnStart": "1", "whiteSpace": "nowrap", "fontSize": "0.75rem", "lineHeight": "1rem", "color": "hsl(var(--bc) / 0.6)" }, ".stat-actions": { "gridColumnStart": "1", "whiteSpace": "nowrap", "marginTop": "1rem" }, ".steps": { "display": "inline-grid", "gridAutoFlow": "column", "overflow": "hidden", "overflowX": "auto", "counterReset": "step", "gridAutoColumns": "1fr" }, ".steps .step": { "display": "grid", "gridTemplateColumns": ["repeat(1, minmax(0, 1fr))", "auto"], "gridTemplateRows": ["repeat(2, minmax(0, 1fr))", "40px 1fr"], "placeItems": "center", "textAlign": "center", "minWidth": "4rem" }, ".swap": { "position": "relative", "display": "inline-grid", "userSelect": "none", "placeContent": "center", "cursor": "pointer" }, ".swap > *": { "gridColumnStart": "1", "gridRowStart": "1", "transitionDuration": "300ms", "transitionTimingFunction": "cubic-bezier(0, 0, 0.2, 1)", "transitionProperty": "transform, opacity" }, ".swap input": { "appearance": "none" }, ".swap .swap-on,\n.swap .swap-indeterminate,\n.swap input:indeterminate ~ .swap-on": { "opacity": "0" }, ".swap input:checked ~ .swap-off,\n.swap-active .swap-off,\n.swap input:indeterminate ~ .swap-off": { "opacity": "0" }, ".swap input:checked ~ .swap-on,\n.swap-active .swap-on,\n.swap input:indeterminate ~ .swap-indeterminate": { "opacity": "1" }, ".tabs": { "display": "flex", "flexWrap": "wrap", "alignItems": "flex-end" }, ".tab": { "position": "relative", "display": "inline-flex", "cursor": "pointer", "userSelect": "none", "flexWrap": "wrap", "alignItems": "center", "justifyContent": "center", "textAlign": "center", "height": "2rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"], "-TabPadding": "1rem", "-TwTextOpacity": "0.5", "-TabColor": "hsl(var(--bc) / var(--tw-text-opacity, 1))", "-TabBg": "hsl(var(--b1) / var(--tw-bg-opacity, 1))", "-TabBorderColor": "hsl(var(--b3) / var(--tw-bg-opacity, 1))", "color": "var(--tab-color)", "paddingLeft": "var(--tab-padding, 1rem)", "paddingRight": "var(--tab-padding, 1rem)" }, ".table": { "position": "relative", "width": "100%", "textAlign": "left", "fontSize": "0.875rem", "lineHeight": "1.25rem", "borderRadius": "var(--rounded-box, 1rem)" }, ".table :where(.table-pin-rows thead tr)": { "position": "sticky", "top": "0px", "zIndex": "1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))" }, ".table :where(.table-pin-rows tfoot tr)": { "position": "sticky", "bottom": "0px", "zIndex": "1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))" }, ".table :where(.table-pin-cols tr th)": { "position": "sticky", "left": "0px", "right": "0px", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))" }, ".table-zebra tbody tr:nth-child(even) :where(.table-pin-cols tr th)": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))" }, ".textarea": { "flexShrink": "1", "minHeight": "3rem", "paddingLeft": "1rem", "paddingRight": "1rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"], "borderWidth": "1px", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".toast": { "position": "fixed", "display": "flex", "minWidth": "fit-content", "flexDirection": "column", "whiteSpace": "nowrap", "gap": "0.5rem", "padding": "1rem" }, ".toggle": { "flexShrink": "0", "-Tglbg": "hsl(var(--b1))", "-Handleoffset": "1.5rem", "-Handleoffsetcalculator": "calc(var(--handleoffset) * -1)", "-Togglehandleborder": "0 0", "height": "1.5rem", "width": "3rem", "cursor": "pointer", "appearance": "none", "borderWidth": "1px", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.2", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.5", "borderRadius": "var(--rounded-badge, 1.9rem)", "transition": "background,\n    box-shadow var(--animation-input, 0.2s) ease-out", "boxShadow": "var(--handleoffsetcalculator) 0 0 2px var(--tglbg) inset,\n    0 0 0 2px var(--tglbg) inset,\n    var(--togglehandleborder)" }, ".alert-info": { "borderColor": "hsl(var(--in) / 0.2)", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))", "-AlertBg": "hsl(var(--in))", "-AlertBgMix": "hsl(var(--b1))" }, ".alert-success": { "borderColor": "hsl(var(--su) / 0.2)", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))", "-AlertBg": "hsl(var(--su))", "-AlertBgMix": "hsl(var(--b1))" }, ".alert-warning": { "borderColor": "hsl(var(--wa) / 0.2)", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))", "-AlertBg": "hsl(var(--wa))", "-AlertBgMix": "hsl(var(--b1))" }, ".alert-error": { "borderColor": "hsl(var(--er) / 0.2)", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))", "-AlertBg": "hsl(var(--er))", "-AlertBgMix": "hsl(var(--b1))" }, ".avatar-group": { "display": "flex", "overflow": "hidden" }, ".avatar-group :where(.avatar)": { "overflow": "hidden", "borderRadius": "9999px", "borderWidth": "4px", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b1) / var(--tw-border-opacity))" }, ".badge-neutral": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--n) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))" }, ".badge-primary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".badge-secondary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" }, ".badge-accent": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" }, ".badge-info": { "borderColor": "transparent", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" }, ".badge-success": { "borderColor": "transparent", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" }, ".badge-warning": { "borderColor": "transparent", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" }, ".badge-error": { "borderColor": "transparent", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" }, ".badge-ghost": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))" }, ".badge-outline": { "borderColor": "currentColor", "-TwBorderOpacity": "0.5", "backgroundColor": "transparent", "color": "currentColor" }, ".badge-outline.badge-neutral": { "-TwTextOpacity": "1", "color": "hsl(var(--n) / var(--tw-text-opacity))" }, ".badge-outline.badge-primary": { "-TwTextOpacity": "1", "color": "hsl(var(--p) / var(--tw-text-opacity))" }, ".badge-outline.badge-secondary": { "-TwTextOpacity": "1", "color": "hsl(var(--s) / var(--tw-text-opacity))" }, ".badge-outline.badge-accent": { "-TwTextOpacity": "1", "color": "hsl(var(--a) / var(--tw-text-opacity))" }, ".badge-outline.badge-info": { "-TwTextOpacity": "1", "color": "hsl(var(--in) / var(--tw-text-opacity))" }, ".badge-outline.badge-success": { "-TwTextOpacity": "1", "color": "hsl(var(--su) / var(--tw-text-opacity))" }, ".badge-outline.badge-warning": { "-TwTextOpacity": "1", "color": "hsl(var(--wa) / var(--tw-text-opacity))" }, ".badge-outline.badge-error": { "-TwTextOpacity": "1", "color": "hsl(var(--er) / var(--tw-text-opacity))" }, ".btm-nav > *:not(.active)": { "paddingTop": "0.125rem" }, ".btm-nav > *:where(.active)": { "borderTopWidth": "2px", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))" }, ".btm-nav > *.disabled,\n    .btm-nav > *[disabled]": { "pointerEvents": "none", "-TwBorderOpacity": "0", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "-TwTextOpacity": "0.2" }, ".btm-nav > * .label": { "fontSize": "1rem", "lineHeight": "1.5rem" }, ".breadcrumbs > ul > li > a:focus, .breadcrumbs > ol > li > a:focus": { "outline": "2px solid transparent", "outlineOffset": "2px" }, ".breadcrumbs > ul > li > a:focus-visible, .breadcrumbs > ol > li > a:focus-visible": { "outline": "2px solid currentColor", "outlineOffset": "2px" }, ".breadcrumbs > ul > li + *:before, .breadcrumbs > ol > li + *:before": { "content": '""', "marginLeft": "0.5rem", "marginRight": "0.75rem", "display": "block", "height": "0.375rem", "width": "0.375rem", "-TwRotate": "45deg", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "opacity": "0.4", "borderTop": "1px solid", "borderRight": "1px solid", "backgroundColor": "transparent" }, '[dir="rtl"] .breadcrumbs > ul > li + *:before,\n[dir="rtl"] .breadcrumbs > ol > li + *:before': { "-TwRotate": "-45deg" }, ".btn:active:hover,\n  .btn:active:focus": { "animation": "button-pop 0s ease-out", "transform": "scale(var(--btn-focus-scale, 0.97))" }, ".btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b3) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))" }, ".btn:focus-visible": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px" }, ".btn-primary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--p) / 1)" }, ".btn-primary.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--pf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--pf) / var(--tw-bg-opacity))" }, ".btn-secondary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--s) / 1)" }, ".btn-secondary.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--sf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--sf) / var(--tw-bg-opacity))" }, ".btn-accent": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--a) / 1)" }, ".btn-accent.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--af) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--af) / var(--tw-bg-opacity))" }, ".btn-neutral": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--n) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--n) / 1)" }, ".btn-neutral.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--nf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--nf) / var(--tw-bg-opacity))" }, ".btn-info": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--in) / 1)" }, ".btn-info.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))" }, ".btn-success": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--su) / 1)" }, ".btn-success.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))" }, ".btn-warning": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--wa) / 1)" }, ".btn-warning.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))" }, ".btn-error": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--er) / 1)" }, ".btn-error.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))" }, ".btn.glass": { "-TwShadow": "0 0 #0000", "-TwShadowColored": "0 0 #0000", "boxShadow": "var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)", "outlineColor": "currentColor" }, ".btn.glass.btn-active": { "-GlassOpacity": "25%", "-GlassBorderOpacity": "15%" }, ".btn-ghost": { "borderWidth": "1px", "borderColor": "transparent", "backgroundColor": "transparent", "color": "currentColor", "-TwShadow": "0 0 #0000", "-TwShadowColored": "0 0 #0000", "boxShadow": "var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)", "outlineColor": "currentColor" }, ".btn-ghost.btn-active": { "-TwBorderOpacity": "0", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.2" }, ".btn-link": { "borderColor": "transparent", "backgroundColor": "transparent", "-TwTextOpacity": "1", "color": "hsl(var(--p) / var(--tw-text-opacity))", "textDecorationLine": "underline", "-TwShadow": "0 0 #0000", "-TwShadowColored": "0 0 #0000", "boxShadow": "var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)", "outlineColor": "currentColor" }, ".btn-link.btn-active": { "borderColor": "transparent", "backgroundColor": "transparent", "textDecorationLine": "underline" }, ".btn-outline": { "borderColor": "currentColor", "backgroundColor": "transparent", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "-TwShadow": "0 0 #0000", "-TwShadowColored": "0 0 #0000", "boxShadow": "var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)" }, ".btn-outline.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--b1) / var(--tw-text-opacity))" }, ".btn-outline.btn-primary": { "-TwTextOpacity": "1", "color": "hsl(var(--p) / var(--tw-text-opacity))" }, ".btn-outline.btn-primary.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--pf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--pf) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".btn-outline.btn-secondary": { "-TwTextOpacity": "1", "color": "hsl(var(--s) / var(--tw-text-opacity))" }, ".btn-outline.btn-secondary.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--sf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--sf) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" }, ".btn-outline.btn-accent": { "-TwTextOpacity": "1", "color": "hsl(var(--a) / var(--tw-text-opacity))" }, ".btn-outline.btn-accent.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--af) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--af) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" }, ".btn-outline.btn-success": { "-TwTextOpacity": "1", "color": "hsl(var(--su) / var(--tw-text-opacity))" }, ".btn-outline.btn-success.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" }, ".btn-outline.btn-info": { "-TwTextOpacity": "1", "color": "hsl(var(--in) / var(--tw-text-opacity))" }, ".btn-outline.btn-info.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" }, ".btn-outline.btn-warning": { "-TwTextOpacity": "1", "color": "hsl(var(--wa) / var(--tw-text-opacity))" }, ".btn-outline.btn-warning.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" }, ".btn-outline.btn-error": { "-TwTextOpacity": "1", "color": "hsl(var(--er) / var(--tw-text-opacity))" }, ".btn-outline.btn-error.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" }, ".btn.btn-disabled,\n  .btn[disabled],\n  .btn:disabled": { "-TwBorderOpacity": "0", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.2", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "-TwTextOpacity": "0.2" }, '.btn-group > input[type="radio"]:checked.btn,\n  .btn-group > .btn-active': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, '.btn-group > input[type="radio"]:checked.btn:focus-visible, .btn-group > .btn-active:focus-visible': { "outlineStyle": "solid", "outlineWidth": "2px", "outlineColor": "hsl(var(--p) / 1)" }, '.btn:is(input[type="checkbox"]:checked),\n.btn:is(input[type="radio"]:checked)': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, '.btn:is(input[type="checkbox"]:checked):focus-visible, .btn:is(input[type="radio"]:checked):focus-visible': { "outlineColor": "hsl(var(--p) / 1)" }, "@keyframes button-pop": { "0%": { "transform": "scale(var(--btn-focus-scale, 0.98))" }, "40%": { "transform": "scale(1.02)" }, "100%": { "transform": "scale(1)" } }, ".card :where(figure:first-child)": { "overflow": "hidden", "borderStartStartRadius": "inherit", "borderStartEndRadius": "inherit", "borderEndStartRadius": "unset", "borderEndEndRadius": "unset" }, ".card :where(figure:last-child)": { "overflow": "hidden", "borderStartStartRadius": "unset", "borderStartEndRadius": "unset", "borderEndStartRadius": "inherit", "borderEndEndRadius": "inherit" }, ".card:focus-visible": { "outline": "2px solid currentColor", "outlineOffset": "2px" }, ".card.bordered": { "borderWidth": "1px", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))" }, ".card-bordered": { "borderWidth": "1px", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))" }, ".card.compact .card-body": { "padding": "1rem", "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".card-title": { "display": "flex", "alignItems": "center", "gap": "0.5rem", "fontSize": "1.25rem", "lineHeight": "1.75rem", "fontWeight": "600" }, ".card.image-full :where(figure)": { "overflow": "hidden", "borderRadius": "inherit" }, ".carousel::-webkit-scrollbar": { "display": "none" }, ".chat-bubble-primary": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".chat-bubble-secondary": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" }, ".chat-bubble-accent": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" }, ".chat-bubble-info": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" }, ".chat-bubble-success": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" }, ".chat-bubble-warning": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" }, ".chat-bubble-error": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" }, ".checkbox:focus-visible": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 1)" }, '.checkbox:checked,\n  .checkbox[checked="true"],\n  .checkbox[aria-checked="true"]': { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "backgroundRepeat": "no-repeat", "animation": "checkmark var(--animation-input, 0.2s) ease-out", "backgroundImage": "linear-gradient(-45deg, transparent 65%, hsl(var(--chkbg)) 65.99%),\n      linear-gradient(45deg, transparent 75%, hsl(var(--chkbg)) 75.99%),\n      linear-gradient(-45deg, hsl(var(--chkbg)) 40%, transparent 40.99%),\n      linear-gradient(\n        45deg,\n        hsl(var(--chkbg)) 30%,\n        hsl(var(--chkfg)) 30.99%,\n        hsl(var(--chkfg)) 40%,\n        transparent 40.99%\n      ),\n      linear-gradient(-45deg, hsl(var(--chkfg)) 50%, hsl(var(--chkbg)) 50.99%)" }, ".checkbox:indeterminate": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "backgroundRepeat": "no-repeat", "animation": "checkmark var(--animation-input, 0.2s) ease-out", "backgroundImage": "linear-gradient(90deg, transparent 80%, hsl(var(--chkbg)) 80%),\n      linear-gradient(-90deg, transparent 80%, hsl(var(--chkbg)) 80%),\n      linear-gradient(\n        0deg,\n        hsl(var(--chkbg)) 43%,\n        hsl(var(--chkfg)) 43%,\n        hsl(var(--chkfg)) 57%,\n        hsl(var(--chkbg)) 57%\n      )" }, ".checkbox-primary": { "-Chkbg": "var(--p)", "-Chkfg": "var(--pc)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))" }, ".checkbox-primary:focus-visible": { "outlineColor": "hsl(var(--p) / 1)" }, '.checkbox-primary:checked,\n    .checkbox-primary[checked="true"],\n    .checkbox-primary[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".checkbox-secondary": { "-Chkbg": "var(--s)", "-Chkfg": "var(--sc)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))" }, ".checkbox-secondary:focus-visible": { "outlineColor": "hsl(var(--s) / 1)" }, '.checkbox-secondary:checked,\n    .checkbox-secondary[checked="true"],\n    .checkbox-secondary[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" }, ".checkbox-accent": { "-Chkbg": "var(--a)", "-Chkfg": "var(--ac)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))" }, ".checkbox-accent:focus-visible": { "outlineColor": "hsl(var(--a) / 1)" }, '.checkbox-accent:checked,\n    .checkbox-accent[checked="true"],\n    .checkbox-accent[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" }, ".checkbox-success": { "-Chkbg": "var(--su)", "-Chkfg": "var(--suc)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))" }, ".checkbox-success:focus-visible": { "outlineColor": "hsl(var(--su) / 1)" }, '.checkbox-success:checked,\n    .checkbox-success[checked="true"],\n    .checkbox-success[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" }, ".checkbox-warning": { "-Chkbg": "var(--wa)", "-Chkfg": "var(--wac)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))" }, ".checkbox-warning:focus-visible": { "outlineColor": "hsl(var(--wa) / 1)" }, '.checkbox-warning:checked,\n    .checkbox-warning[checked="true"],\n    .checkbox-warning[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" }, ".checkbox-info": { "-Chkbg": "var(--in)", "-Chkfg": "var(--inc)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))" }, ".checkbox-info:focus-visible": { "outlineColor": "hsl(var(--in) / 1)" }, '.checkbox-info:checked,\n    .checkbox-info[checked="true"],\n    .checkbox-info[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" }, ".checkbox-error": { "-Chkbg": "var(--er)", "-Chkfg": "var(--erc)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))" }, ".checkbox-error:focus-visible": { "outlineColor": "hsl(var(--er) / 1)" }, '.checkbox-error:checked,\n    .checkbox-error[checked="true"],\n    .checkbox-error[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" }, ".checkbox:disabled": { "cursor": "not-allowed", "borderColor": "transparent", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "opacity": "0.2" }, "@keyframes checkmark": { "0%": { "backgroundPositionY": "5px" }, "50%": { "backgroundPositionY": "-2px" }, "100%": { "backgroundPositionY": "0" } }, ".checkbox-mark": { "display": "none" }, '[dir="rtl"] .checkbox:checked,\n    [dir="rtl"] .checkbox[checked="true"],\n    [dir="rtl"] .checkbox[aria-checked="true"]': { "backgroundImage": "linear-gradient(45deg, transparent 65%, hsl(var(--chkbg)) 65.99%),\n        linear-gradient(-45deg, transparent 75%, hsl(var(--chkbg)) 75.99%),\n        linear-gradient(45deg, hsl(var(--chkbg)) 40%, transparent 40.99%),\n        linear-gradient(\n          -45deg,\n          hsl(var(--chkbg)) 30%,\n          hsl(var(--chkfg)) 30.99%,\n          hsl(var(--chkfg)) 40%,\n          transparent 40.99%\n        ),\n        linear-gradient(45deg, hsl(var(--chkfg)) 50%, hsl(var(--chkbg)) 50.99%)" }, "details.collapse": { "width": "100%" }, "details.collapse summary": { "position": "relative", "display": "block", "outline": "2px solid transparent", "outlineOffset": "2px" }, "details.collapse summary::-webkit-details-marker": { "display": "none" }, ".collapse:focus-visible": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 1)" }, '.collapse:has(.collapse-title:focus-visible),\n.collapse:has(> input[type="checkbox"]:focus-visible),\n.collapse:has(> input[type="radio"]:focus-visible)': { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 1)" }, ".collapse-arrow > .collapse-title:after": { "position": "absolute", "display": "block", "height": "0.5rem", "width": "0.5rem", "-TwTranslateY": "-100%", "-TwRotate": "45deg", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "transitionProperty": "all", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": ["150ms", "0.2s"], "top": "50%", "right": "1.4rem", "content": '""', "transformOrigin": "75% 75%", "boxShadow": "2px 2px", "pointerEvents": "none" }, '[dir="rtl"] .collapse-arrow > .collapse-title:after': { "-TwRotate": "-45deg" }, ".collapse-plus > .collapse-title:after": { "position": "absolute", "display": "block", "height": "0.5rem", "width": "0.5rem", "transitionProperty": "all", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "300ms", "top": "0.9rem", "right": "1.4rem", "content": '"+"', "pointerEvents": "none" }, '.collapse:not(.collapse-open):not(.collapse-close) > input[type="checkbox"],\n.collapse:not(.collapse-open):not(.collapse-close) > input[type="radio"]:not(:checked),\n.collapse:not(.collapse-open):not(.collapse-close) > .collapse-title': { "cursor": "pointer" }, ".collapse:focus:not(.collapse-open):not(.collapse-close):not(.collapse[open]) > .collapse-title": { "cursor": "unset" }, ".collapse-title": { "position": "relative" }, ':where(.collapse > input[type="checkbox"]),\n:where(.collapse > input[type="radio"])': { "zIndex": "1" }, '.collapse-title,\n:where(.collapse > input[type="checkbox"]),\n:where(.collapse > input[type="radio"])': { "width": "100%", "padding": "1rem", "paddingRight": "3rem", "minHeight": "3.75rem", "transition": "background-color 0.2s ease-out" }, '.collapse[open] > :where(.collapse-content),\n.collapse-open > :where(.collapse-content),\n.collapse:focus:not(.collapse-close) > :where(.collapse-content),\n.collapse:not(.collapse-close) > :where(input[type="checkbox"]:checked ~ .collapse-content),\n.collapse:not(.collapse-close) > :where(input[type="radio"]:checked ~ .collapse-content)': { "paddingBottom": "1rem", "transition": "padding 0.2s ease-out,\n    background-color 0.2s ease-out" }, '.collapse[open].collapse-arrow > .collapse-title:after,\n.collapse-open.collapse-arrow > .collapse-title:after,\n.collapse-arrow:focus:not(.collapse-close) > .collapse-title:after,\n.collapse-arrow:not(.collapse-close) > input[type="checkbox"]:checked ~ .collapse-title:after,\n.collapse-arrow:not(.collapse-close) > input[type="radio"]:checked ~ .collapse-title:after': { "-TwTranslateY": "-50%", "-TwRotate": "225deg", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, '[dir="rtl"] .collapse[open].collapse-arrow > .collapse-title:after,\n[dir="rtl"] .collapse-open.collapse-arrow > .collapse-title:after,\n[dir="rtl"] .collapse-arrow:focus:not(.collapse-close) .collapse-title:after,\n[dir="rtl"]\n  .collapse-arrow:not(.collapse-close)\n  input[type="checkbox"]:checked\n  ~ .collapse-title:after': { "-TwRotate": "135deg" }, '.collapse[open].collapse-plus > .collapse-title:after,\n.collapse-open.collapse-plus > .collapse-title:after,\n.collapse-plus:focus:not(.collapse-close) > .collapse-title:after,\n.collapse-plus:not(.collapse-close) > input[type="checkbox"]:checked ~ .collapse-title:after,\n.collapse-plus:not(.collapse-close) > input[type="radio"]:checked ~ .collapse-title:after': { "content": '"−"' }, ".divider:before": { "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.1" }, ".divider:after": { "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.1" }, ".divider:not(:empty)": { "gap": "1rem" }, ".drawer-toggle:checked ~ .drawer-side > .drawer-overlay": { "backgroundColor": "hsl(0 0% 0%/0.4)" }, ".drawer-toggle:focus-visible ~ .drawer-content label.drawer-button": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px" }, ".dropdown.dropdown-open .dropdown-content,\n.dropdown:focus .dropdown-content,\n.dropdown:focus-within .dropdown-content": { "-TwScaleX": "1", "-TwScaleY": "1", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".file-input-bordered": { "-TwBorderOpacity": "0.2" }, ".file-input:focus": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 0.2)" }, ".file-input-ghost": { "-TwBgOpacity": "0.05" }, ".file-input-ghost:focus": { "-TwBgOpacity": "1", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "boxShadow": "none" }, ".file-input-ghost::file-selector-button": { "borderWidth": "1px", "borderColor": "transparent", "backgroundColor": "transparent", "color": "currentColor" }, ".file-input-primary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))" }, ".file-input-primary:focus": { "outlineColor": "hsl(var(--p) / 1)" }, ".file-input-primary::file-selector-button": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".file-input-secondary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))" }, ".file-input-secondary:focus": { "outlineColor": "hsl(var(--s) / 1)" }, ".file-input-secondary::file-selector-button": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" }, ".file-input-accent": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))" }, ".file-input-accent:focus": { "outlineColor": "hsl(var(--a) / 1)" }, ".file-input-accent::file-selector-button": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" }, ".file-input-info": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))" }, ".file-input-info:focus": { "outlineColor": "hsl(var(--in) / 1)" }, ".file-input-info::file-selector-button": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" }, ".file-input-success": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))" }, ".file-input-success:focus": { "outlineColor": "hsl(var(--su) / 1)" }, ".file-input-success::file-selector-button": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" }, ".file-input-warning": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))" }, ".file-input-warning:focus": { "outlineColor": "hsl(var(--wa) / 1)" }, ".file-input-warning::file-selector-button": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" }, ".file-input-error": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))" }, ".file-input-error:focus": { "outlineColor": "hsl(var(--er) / 1)" }, ".file-input-error::file-selector-button": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" }, ".file-input-disabled,\n  .file-input[disabled]": { "cursor": "not-allowed", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "-TwTextOpacity": "0.2" }, ".file-input-disabled::placeholder,\n  .file-input[disabled]::placeholder": { "color": "hsl(var(--bc) / var(--tw-placeholder-opacity))", "-TwPlaceholderOpacity": "0.2" }, ".file-input-disabled::file-selector-button, .file-input[disabled]::file-selector-button": { "-TwBorderOpacity": "0", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.2", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "-TwTextOpacity": "0.2" }, ".footer-title": { "marginBottom": "0.5rem", "fontWeight": "700", "textTransform": "uppercase", "opacity": "0.5" }, ".label-text": { "fontSize": "0.875rem", "lineHeight": "1.25rem", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))" }, ".label-text-alt": { "fontSize": "0.75rem", "lineHeight": "1rem", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))" }, ".input input:focus": { "outline": "2px solid transparent", "outlineOffset": "2px" }, ".input[list]::-webkit-calendar-picker-indicator": { "lineHeight": "1em" }, ".input-bordered": { "-TwBorderOpacity": "0.2" }, ".input:focus,\n  .input:focus-within": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 0.2)" }, ".input-ghost": { "-TwBgOpacity": "0.05" }, ".input-ghost:focus,\n    .input-ghost:focus-within": { "-TwBgOpacity": "1", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "boxShadow": "none" }, ".input-primary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))" }, ".input-primary:focus,\n    .input-primary:focus-within": { "outlineColor": "hsl(var(--p) / 1)" }, ".input-secondary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))" }, ".input-secondary:focus,\n    .input-secondary:focus-within": { "outlineColor": "hsl(var(--s) / 1)" }, ".input-accent": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))" }, ".input-accent:focus,\n    .input-accent:focus-within": { "outlineColor": "hsl(var(--a) / 1)" }, ".input-info": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))" }, ".input-info:focus,\n    .input-info:focus-within": { "outlineColor": "hsl(var(--in) / 1)" }, ".input-success": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))" }, ".input-success:focus,\n    .input-success:focus-within": { "outlineColor": "hsl(var(--su) / 1)" }, ".input-warning": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))" }, ".input-warning:focus,\n    .input-warning:focus-within": { "outlineColor": "hsl(var(--wa) / 1)" }, ".input-error": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))" }, ".input-error:focus,\n    .input-error:focus-within": { "outlineColor": "hsl(var(--er) / 1)" }, ".input-disabled,\n  .input:disabled,\n  .input[disabled]": { "cursor": "not-allowed", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "-TwTextOpacity": "0.2" }, ".input-disabled::placeholder,\n  .input:disabled::placeholder,\n  .input[disabled]::placeholder": { "color": "hsl(var(--bc) / var(--tw-placeholder-opacity))", "-TwPlaceholderOpacity": "0.2" }, ".join > :where(*:not(:first-child))": { "marginTop": "0px", "marginBottom": "0px", "marginLeft": "-1px" }, ".join-item:focus": { "isolation": "isolate" }, ".link-primary": { "-TwTextOpacity": "1", "color": "hsl(var(--p) / var(--tw-text-opacity))" }, ".link-secondary": { "-TwTextOpacity": "1", "color": "hsl(var(--s) / var(--tw-text-opacity))" }, ".link-accent": { "-TwTextOpacity": "1", "color": "hsl(var(--a) / var(--tw-text-opacity))" }, ".link-neutral": { "-TwTextOpacity": "1", "color": "hsl(var(--n) / var(--tw-text-opacity))" }, ".link-success": { "-TwTextOpacity": "1", "color": "hsl(var(--su) / var(--tw-text-opacity))" }, ".link-info": { "-TwTextOpacity": "1", "color": "hsl(var(--in) / var(--tw-text-opacity))" }, ".link-warning": { "-TwTextOpacity": "1", "color": "hsl(var(--wa) / var(--tw-text-opacity))" }, ".link-error": { "-TwTextOpacity": "1", "color": "hsl(var(--er) / var(--tw-text-opacity))" }, ".link:focus": { "outline": "2px solid transparent", "outlineOffset": "2px" }, ".link:focus-visible": { "outline": "2px solid currentColor", "outlineOffset": "2px" }, ".loading": { "pointerEvents": "none", "display": "inline-block", "aspectRatio": "1 / 1", "width": "1.5rem", "backgroundColor": "currentColor", "maskSize": "100%", "maskRepeat": "no-repeat", "maskPosition": "center", "maskImage": `url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='%23000' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_V8m1%7Btransform-origin:center;animation:spinner_zKoa 2s linear infinite%7D.spinner_V8m1 circle%7Bstroke-linecap:round;animation:spinner_YpZS 1.5s ease-out infinite%7D%40keyframes spinner_zKoa%7B100%25%7Btransform:rotate(360deg)%7D%7D%40keyframes spinner_YpZS%7B0%25%7Bstroke-dasharray:0 150;stroke-dashoffset:0%7D47.5%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-16%7D95%25%2C100%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-59%7D%7D%3C%2Fstyle%3E%3Cg class='spinner_V8m1'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3'%3E%3C%2Fcircle%3E%3C%2Fg%3E%3C%2Fsvg%3E")` }, ".loading-spinner": { "maskImage": `url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='%23000' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_V8m1%7Btransform-origin:center;animation:spinner_zKoa 2s linear infinite%7D.spinner_V8m1 circle%7Bstroke-linecap:round;animation:spinner_YpZS 1.5s ease-out infinite%7D%40keyframes spinner_zKoa%7B100%25%7Btransform:rotate(360deg)%7D%7D%40keyframes spinner_YpZS%7B0%25%7Bstroke-dasharray:0 150;stroke-dashoffset:0%7D47.5%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-16%7D95%25%2C100%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-59%7D%7D%3C%2Fstyle%3E%3Cg class='spinner_V8m1'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3'%3E%3C%2Fcircle%3E%3C%2Fg%3E%3C%2Fsvg%3E")` }, ".loading-dots": { "maskImage": `url("data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_qM83%7Banimation:spinner_8HQG 1.05s infinite%7D.spinner_oXPr%7Banimation-delay:.1s%7D.spinner_ZTLf%7Banimation-delay:.2s%7D@keyframes spinner_8HQG%7B0%25,57.14%25%7Banimation-timing-function:cubic-bezier(0.33,.66,.66,1);transform:translate(0)%7D28.57%25%7Banimation-timing-function:cubic-bezier(0.33,0,.66,.33);transform:translateY(-6px)%7D100%25%7Btransform:translate(0)%7D%7D%3C/style%3E%3Ccircle class='spinner_qM83' cx='4' cy='12' r='3'/%3E%3Ccircle class='spinner_qM83 spinner_oXPr' cx='12' cy='12' r='3'/%3E%3Ccircle class='spinner_qM83 spinner_ZTLf' cx='20' cy='12' r='3'/%3E%3C/svg%3E")` }, ".loading-ring": { "maskImage": `url("data:image/svg+xml,%3Csvg width='44' height='44' viewBox='0 0 44 44' xmlns='http://www.w3.org/2000/svg' stroke='%23fff'%3E%3Cg fill='none' fill-rule='evenodd' stroke-width='2'%3E%3Ccircle cx='22' cy='22' r='1'%3E%3Canimate attributeName='r' begin='0s' dur='1.8s' values='1; 20' calcMode='spline' keyTimes='0; 1' keySplines='0.165, 0.84, 0.44, 1' repeatCount='indefinite' /%3E%3Canimate attributeName='stroke-opacity' begin='0s' dur='1.8s' values='1; 0' calcMode='spline' keyTimes='0; 1' keySplines='0.3, 0.61, 0.355, 1' repeatCount='indefinite' /%3E%3C/circle%3E%3Ccircle cx='22' cy='22' r='1'%3E%3Canimate attributeName='r' begin='-0.9s' dur='1.8s' values='1; 20' calcMode='spline' keyTimes='0; 1' keySplines='0.165, 0.84, 0.44, 1' repeatCount='indefinite' /%3E%3Canimate attributeName='stroke-opacity' begin='-0.9s' dur='1.8s' values='1; 0' calcMode='spline' keyTimes='0; 1' keySplines='0.3, 0.61, 0.355, 1' repeatCount='indefinite' /%3E%3C/circle%3E%3C/g%3E%3C/svg%3E")` }, ".loading-ball": { "maskImage": `url("data:image/svg+xml,%0A%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_rXNP%7Banimation:spinner_YeBj .8s infinite%7D@keyframes spinner_YeBj%7B0%25%7Banimation-timing-function:cubic-bezier(0.33,0,.66,.33);cy:5px%7D46.875%25%7Bcy:20px;rx:4px;ry:4px%7D50%25%7Banimation-timing-function:cubic-bezier(0.33,.66,.66,1);cy:20.5px;rx:4.8px;ry:3px%7D53.125%25%7Brx:4px;ry:4px%7D100%25%7Bcy:5px%7D%7D%3C/style%3E%3Cellipse class='spinner_rXNP' cx='12' cy='5' rx='4' ry='4'/%3E%3C/svg%3E")` }, ".loading-bars": { "maskImage": `url("data:image/svg+xml,%0A%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_hzlK%7Banimation:spinner_vc4H .8s linear infinite;animation-delay:-.8s%7D.spinner_koGT%7Banimation-delay:-.65s%7D.spinner_YF1u%7Banimation-delay:-.5s%7D@keyframes spinner_vc4H%7B0%25%7By:1px;height:22px%7D93.75%25%7By:5px;height:14px;opacity:.2%7D%7D%3C/style%3E%3Crect class='spinner_hzlK' x='1' y='1' width='6' height='22'/%3E%3Crect class='spinner_hzlK spinner_koGT' x='9' y='1' width='6' height='22'/%3E%3Crect class='spinner_hzlK spinner_YF1u' x='17' y='1' width='6' height='22'/%3E%3C/svg%3E")` }, ".loading-infinity": { "maskImage": `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' style='shape-rendering: auto;' width='200px' height='200px' viewBox='0 0 100 100' preserveAspectRatio='xMidYMid'%3E%3Cpath fill='none' stroke='%230a0a0a' stroke-width='10' stroke-dasharray='205.271142578125 51.317785644531256' d='M24.3 30C11.4 30 5 43.3 5 50s6.4 20 19.3 20c19.3 0 32.1-40 51.4-40 C88.6 30 95 43.3 95 50s-6.4 20-19.3 20C56.4 70 43.6 30 24.3 30z' stroke-linecap='round' style='transform:scale(0.8);transform-origin:50px 50px'%3E%3Canimate attributeName='stroke-dashoffset' repeatCount='indefinite' dur='2s' keyTimes='0;1' values='0;256.58892822265625'%3E%3C/animate%3E%3C/path%3E%3C/svg%3E")` }, ".loading-xs": { "width": "1rem" }, ".loading-sm": { "width": "1.25rem" }, ".loading-md": { "width": "1.5rem" }, ".loading-lg": { "width": "2.5rem" }, ".mask-squircle": { "maskImage": `url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M100 0C20 0 0 20 0 100s20 100 100 100 100-20 100-100S180 0 100 0Z'/%3e%3c/svg%3e")` }, ".mask-decagon": { "maskImage": `url("data:image/svg+xml,%3csvg width='192' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 0 58.779 19.098 36.327 50v61.804l-36.327 50L96 200l-58.779-19.098-36.327-50V69.098l36.327-50z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-diamond": { "maskImage": `url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m100 0 100 100-100 100L0 100z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-heart": { "maskImage": `url("data:image/svg+xml,%3csvg width='200' height='185' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M100 184.606a15.384 15.384 0 0 1-8.653-2.678C53.565 156.28 37.205 138.695 28.182 127.7 8.952 104.264-.254 80.202.005 54.146.308 24.287 24.264 0 53.406 0c21.192 0 35.869 11.937 44.416 21.879a2.884 2.884 0 0 0 4.356 0C110.725 11.927 125.402 0 146.594 0c29.142 0 53.098 24.287 53.4 54.151.26 26.061-8.956 50.122-28.176 73.554-9.023 10.994-25.383 28.58-63.165 54.228a15.384 15.384 0 0 1-8.653 2.673Z' fill='black' fill-rule='nonzero'/%3e%3c/svg%3e")` }, ".mask-hexagon": { "maskImage": `url("data:image/svg+xml,%3csvg width='182' height='201' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M.3 65.486c0-9.196 6.687-20.063 14.211-25.078l61.86-35.946c8.36-5.016 20.899-5.016 29.258 0l61.86 35.946c8.36 5.015 14.211 15.882 14.211 25.078v71.055c0 9.196-6.687 20.063-14.211 25.079l-61.86 35.945c-8.36 4.18-20.899 4.18-29.258 0L14.51 161.62C6.151 157.44.3 145.737.3 136.54V65.486Z' fill='black' fill-rule='nonzero'/%3e%3c/svg%3e")` }, ".mask-hexagon-2": { "maskImage": `url("data:image/svg+xml,%3csvg width='200' height='182' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M64.786 181.4c-9.196 0-20.063-6.687-25.079-14.21L3.762 105.33c-5.016-8.36-5.016-20.9 0-29.259l35.945-61.86C44.723 5.851 55.59 0 64.786 0h71.055c9.196 0 20.063 6.688 25.079 14.211l35.945 61.86c4.18 8.36 4.18 20.899 0 29.258l-35.945 61.86c-4.18 8.36-15.883 14.211-25.079 14.211H64.786Z' fill='black' fill-rule='nonzero'/%3e%3c/svg%3e")` }, ".mask-circle": { "maskImage": `url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3ccircle fill='black' cx='100' cy='100' r='100' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-parallelogram": { "maskImage": `url("data:image/svg+xml,%3csvg width='200' height='154' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M46.154 0H200l-46.154 153.846H0z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-parallelogram-2": { "maskImage": `url("data:image/svg+xml,%3csvg width='200' height='154' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M153.846 0H0l46.154 153.846H200z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-parallelogram-3": { "maskImage": `url("data:image/svg+xml,%3csvg width='154' height='201' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M.077 47.077v153.846l153.846-46.154V.923z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-parallelogram-4": { "maskImage": `url("data:image/svg+xml,%3csvg width='154' height='201' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M153.923 47.077v153.846L.077 154.77V.923z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-pentagon": { "maskImage": `url("data:image/svg+xml,%3csvg width='192' height='181' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 0 95.106 69.098-36.327 111.804H37.22L.894 69.098z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-square": { "maskImage": `url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M0 0h200v200H0z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-star": { "maskImage": `url("data:image/svg+xml,%3csvg width='192' height='180' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 137.263-58.779 42.024 22.163-68.389L.894 68.481l72.476-.243L96 0l22.63 68.238 72.476.243-58.49 42.417 22.163 68.389z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-star-2": { "maskImage": `url("data:image/svg+xml,%3csvg width='192' height='180' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 153.044-58.779 26.243 7.02-63.513L.894 68.481l63.117-13.01L96 0l31.989 55.472 63.117 13.01-43.347 47.292 7.02 63.513z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-triangle": { "maskImage": `url("data:image/svg+xml,%3csvg width='174' height='149' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m87 148.476-86.603.185L43.86 74.423 87 0l43.14 74.423 43.463 74.238z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-triangle-2": { "maskImage": `url("data:image/svg+xml,%3csvg width='174' height='150' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m87 .738 86.603-.184-43.463 74.238L87 149.214 43.86 74.792.397.554z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-triangle-3": { "maskImage": `url("data:image/svg+xml,%3csvg width='150' height='174' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m149.369 87.107.185 86.603-74.239-43.463L.893 87.107l74.422-43.14L149.554.505z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-triangle-4": { "maskImage": `url("data:image/svg+xml,%3csvg width='150' height='174' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M.631 87.107.446.505l74.239 43.462 74.422 43.14-74.422 43.14L.446 173.71z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ":where(.menu li:empty)": { "backgroundColor": "hsl(var(--bc) / 0.1)", "margin": "0.5rem 1rem", "height": "1px" }, ".menu :where(li ul):before": { "position": "absolute", "bottom": "0.75rem", "left": "0px", "top": "0.75rem", "width": "1px", "backgroundColor": "hsl(var(--bc) / 0.1)", "content": '""' }, ".menu :where(li:not(.menu-title) > *:not(ul):not(details):not(.menu-title)),\n.menu :where(li:not(.menu-title) > details > summary:not(.menu-title))": { "paddingLeft": "1rem", "paddingRight": "1rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem", "textAlign": "left", "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms", "borderRadius": "var(--rounded-btn, 0.5rem)", "textWrap": "balance" }, ":where(.menu li:not(.menu-title):not(.disabled) > *:not(ul):not(details):not(.menu-title)):not(summary):not(.active).focus,\n  :where(.menu li:not(.menu-title):not(.disabled) > *:not(ul):not(details):not(.menu-title)):not(summary):not(.active):focus,\n  :where(.menu li:not(.menu-title):not(.disabled) > *:not(ul):not(details):not(.menu-title)):is(summary):not(.active):focus-visible,\n  :where(.menu li:not(.menu-title):not(.disabled) > details > summary:not(.menu-title)):not(summary):not(.active).focus,\n  :where(.menu li:not(.menu-title):not(.disabled) > details > summary:not(.menu-title)):not(summary):not(.active):focus,\n  :where(.menu li:not(.menu-title):not(.disabled) > details > summary:not(.menu-title)):is(summary):not(.active):focus-visible": { "cursor": "pointer", "backgroundColor": "hsl(var(--bc) / 0.1)", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "outline": "2px solid transparent", "outlineOffset": "2px" }, ".menu li > *:not(ul):not(.menu-title):not(details):active,\n.menu li > *:not(ul):not(.menu-title):not(details).active,\n.menu li > details > summary:active": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))" }, ".menu :where(li > details > summary)::-webkit-details-marker": { "display": "none" }, ".menu :where(li > details > summary):after,\n.menu :where(li > .menu-dropdown-toggle):after": { "justifySelf": "end", "display": "block", "marginTop": "-0.5rem", "height": "0.5rem", "width": "0.5rem", "transform": "rotate(45deg)", "transitionProperty": "transform, margin-top", "transitionDuration": "0.3s", "transitionTimingFunction": "cubic-bezier(0.4, 0, 0.2, 1)", "content": '""', "transformOrigin": "75% 75%", "boxShadow": "2px 2px", "pointerEvents": "none" }, ".menu :where(li > details[open] > summary):after,\n.menu :where(li > .menu-dropdown-toggle.menu-dropdown-show):after": { "transform": "rotate(225deg)", "marginTop": "0" }, ".menu-title": { "paddingLeft": "1rem", "paddingRight": "1rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem", "fontSize": "0.875rem", "lineHeight": "1.25rem", "fontWeight": "700", "color": "hsl(var(--bc) / 0.4)" }, ".mockup-code:before": { "content": '""', "marginBottom": "1rem", "display": "block", "height": "0.75rem", "width": "0.75rem", "borderRadius": "9999px", "opacity": "0.3", "boxShadow": "1.4em 0,\n        2.8em 0,\n        4.2em 0" }, ".mockup-code pre": { "paddingRight": "1.25rem" }, ".mockup-code pre:before": { "content": '""', "marginRight": "2ch" }, ".mockup-window:before": { "content": '""', "marginBottom": "1rem", "display": "block", "aspectRatio": "1 / 1", "height": "0.75rem", "borderRadius": "9999px", "opacity": "0.3", "boxShadow": "1.4em 0,\n        2.8em 0,\n        4.2em 0" }, ".mockup-phone": { "display": "inline-block", "border": "4px solid #444", "borderRadius": "50px", "backgroundColor": "#000", "padding": "10px", "margin": "0 auto", "overflow": "hidden" }, ".mockup-phone .camera": { "position": "relative", "top": "0px", "left": "0px", "background": "#000", "height": "25px", "width": "150px", "margin": "0 auto", "borderBottomLeftRadius": "17px", "borderBottomRightRadius": "17px", "zIndex": "11" }, ".mockup-phone .camera:before": { "content": '""', "position": "absolute", "top": "35%", "left": "50%", "width": "50px", "height": "4px", "borderRadius": "5px", "backgroundColor": "#0c0b0e", "transform": "translate(-50%, -50%)" }, ".mockup-phone .camera:after": { "content": '""', "position": "absolute", "top": "20%", "left": "70%", "width": "8px", "height": "8px", "borderRadius": "5px", "backgroundColor": "#0f0b25" }, ".mockup-phone .display": { "overflow": "hidden", "borderRadius": "40px", "marginTop": "-25px" }, ".mockup-browser .mockup-browser-toolbar": { "marginTop": "0.75rem", "marginBottom": "0.75rem", "display": "inline-flex", "width": "100%", "alignItems": "center", "paddingRight": "1.4em" }, ".mockup-browser .mockup-browser-toolbar:before": { "content": '""', "marginRight": "4.8rem", "display": "inline-block", "aspectRatio": "1 / 1", "height": "0.75rem", "borderRadius": "9999px", "opacity": "0.3", "boxShadow": "1.4em 0,\n          2.8em 0,\n          4.2em 0" }, ".mockup-browser .mockup-browser-toolbar .input": { "position": "relative", "marginLeft": "auto", "marginRight": "auto", "display": "block", "height": "1.75rem", "width": "24rem", "overflow": "hidden", "textOverflow": "ellipsis", "whiteSpace": "nowrap", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "paddingLeft": "2rem" }, ".mockup-browser .mockup-browser-toolbar .input:before": { "content": '""', "position": "absolute", "left": "0.5rem", "top": "50%", "aspectRatio": "1 / 1", "height": "0.75rem", "-TwTranslateY": "-50%", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "borderRadius": "9999px", "borderWidth": "2px", "borderColor": "currentColor", "opacity": "0.6" }, ".mockup-browser .mockup-browser-toolbar .input:after": { "content": '""', "position": "absolute", "left": "1.25rem", "top": "50%", "height": "0.5rem", "-TwTranslateY": "25%", "-TwRotate": "-45deg", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "borderRadius": "9999px", "borderWidth": "1px", "borderColor": "currentColor", "opacity": "0.6" }, ".modal:not(dialog:not(.modal-open)),\n  .modal::backdrop": { "backgroundColor": "rgba(0, 0, 0, 0.3)", "animation": "modal-pop 0.2s ease-out" }, ".modal-backdrop": { "zIndex": "-1", "gridColumnStart": "1", "gridRowStart": "1", "display": "grid", "alignSelf": "stretch", "justifySelf": "stretch", "color": "transparent" }, ".modal-open .modal-box,\n.modal-toggle:checked + .modal .modal-box,\n.modal:target .modal-box,\n.modal[open] .modal-box": { "-TwTranslateY": "0px", "-TwScaleX": "1", "-TwScaleY": "1", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".modal-action > :not([hidden]) ~ :not([hidden])": { "-TwSpaceXReverse": "0", "marginRight": "calc(0.5rem * var(--tw-space-x-reverse))", "marginLeft": "calc(0.5rem * calc(1 - var(--tw-space-x-reverse)))" }, "@keyframes modal-pop": { "0%": { "opacity": "0" } }, ".progress::-moz-progress-bar": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress-primary::-moz-progress-bar": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress-secondary::-moz-progress-bar": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress-accent::-moz-progress-bar": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress-info::-moz-progress-bar": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress-success::-moz-progress-bar": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress-warning::-moz-progress-bar": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress-error::-moz-progress-bar": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress:indeterminate": { "-ProgressColor": "hsl(var(--bc))", "backgroundImage": "repeating-linear-gradient(\n    90deg,\n    var(--progress-color) -1%,\n    var(--progress-color) 10%,\n    transparent 10%,\n    transparent 90%\n  )", "backgroundSize": "200%", "backgroundPositionX": "15%", "animation": "progress-loading 5s ease-in-out infinite" }, ".progress-primary:indeterminate": { "-ProgressColor": "hsl(var(--p))" }, ".progress-secondary:indeterminate": { "-ProgressColor": "hsl(var(--s))" }, ".progress-accent:indeterminate": { "-ProgressColor": "hsl(var(--a))" }, ".progress-info:indeterminate": { "-ProgressColor": "hsl(var(--in))" }, ".progress-success:indeterminate": { "-ProgressColor": "hsl(var(--su))" }, ".progress-warning:indeterminate": { "-ProgressColor": "hsl(var(--wa))" }, ".progress-error:indeterminate": { "-ProgressColor": "hsl(var(--er))" }, ".progress::-webkit-progress-bar": { "backgroundColor": "transparent", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress::-webkit-progress-value": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress-primary::-webkit-progress-value": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))" }, ".progress-secondary::-webkit-progress-value": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))" }, ".progress-accent::-webkit-progress-value": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))" }, ".progress-info::-webkit-progress-value": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))" }, ".progress-success::-webkit-progress-value": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))" }, ".progress-warning::-webkit-progress-value": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))" }, ".progress-error::-webkit-progress-value": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))" }, ".progress:indeterminate::-moz-progress-bar": { "backgroundColor": "transparent", "backgroundImage": "repeating-linear-gradient(\n    90deg,\n    var(--progress-color) -1%,\n    var(--progress-color) 10%,\n    transparent 10%,\n    transparent 90%\n  )", "backgroundSize": "200%", "backgroundPositionX": "15%", "animation": "progress-loading 5s ease-in-out infinite" }, "@keyframes progress-loading": { "50%": { "backgroundPositionX": "-115%" } }, ".radio:focus-visible": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 1)" }, '.radio:checked,\n  .radio[aria-checked="true"]': { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "animation": "radiomark var(--animation-input, 0.2s) ease-out", "boxShadow": "0 0 0 4px hsl(var(--b1)) inset,\n      0 0 0 4px hsl(var(--b1)) inset" }, ".radio-primary": { "-Chkbg": "var(--p)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))" }, ".radio-primary:focus-visible": { "outlineColor": "hsl(var(--p) / 1)" }, '.radio-primary:checked,\n    .radio-primary[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".radio-secondary": { "-Chkbg": "var(--s)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))" }, ".radio-secondary:focus-visible": { "outlineColor": "hsl(var(--s) / 1)" }, '.radio-secondary:checked,\n    .radio-secondary[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" }, ".radio-accent": { "-Chkbg": "var(--a)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))" }, ".radio-accent:focus-visible": { "outlineColor": "hsl(var(--a) / 1)" }, '.radio-accent:checked,\n    .radio-accent[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" }, ".radio-success": { "-Chkbg": "var(--su)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))" }, ".radio-success:focus-visible": { "outlineColor": "hsl(var(--su) / 1)" }, '.radio-success:checked,\n    .radio-success[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" }, ".radio-warning": { "-Chkbg": "var(--wa)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))" }, ".radio-warning:focus-visible": { "outlineColor": "hsl(var(--wa) / 1)" }, '.radio-warning:checked,\n    .radio-warning[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" }, ".radio-info": { "-Chkbg": "var(--in)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))" }, ".radio-info:focus-visible": { "outlineColor": "hsl(var(--in) / 1)" }, '.radio-info:checked,\n    .radio-info[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" }, ".radio-error": { "-Chkbg": "var(--er)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))" }, ".radio-error:focus-visible": { "outlineColor": "hsl(var(--er) / 1)" }, '.radio-error:checked,\n    .radio-error[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" }, ".radio:disabled": { "cursor": "not-allowed", "opacity": "0.2" }, "@keyframes radiomark": { "0%": { "boxShadow": "0 0 0 12px hsl(var(--b1)) inset,\n      0 0 0 12px hsl(var(--b1)) inset" }, "50%": { "boxShadow": "0 0 0 3px hsl(var(--b1)) inset,\n      0 0 0 3px hsl(var(--b1)) inset" }, "100%": { "boxShadow": "0 0 0 4px hsl(var(--b1)) inset,\n      0 0 0 4px hsl(var(--b1)) inset" } }, ".radio-mark": { "display": "none" }, ".range:focus-visible::-webkit-slider-thumb": { "-FocusShadow": "0 0 0 6px hsl(var(--b1)) inset, 0 0 0 2rem hsl(var(--range-shdw)) inset" }, ".range:focus-visible::-moz-range-thumb": { "-FocusShadow": "0 0 0 6px hsl(var(--b1)) inset, 0 0 0 2rem hsl(var(--range-shdw)) inset" }, ".range::-webkit-slider-runnable-track": { "height": "0.5rem", "width": "100%", "backgroundColor": "hsl(var(--bc) / 0.1)", "borderRadius": "var(--rounded-box, 1rem)" }, ".range::-moz-range-track": { "height": "0.5rem", "width": "100%", "backgroundColor": "hsl(var(--bc) / 0.1)", "borderRadius": "var(--rounded-box, 1rem)" }, ".range::-webkit-slider-thumb": { "position": "relative", "height": "1.5rem", "width": "1.5rem", "borderStyle": "none", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)", "appearance": "none", "WebkitAppearance": "none", "top": "50%", "color": "hsl(var(--range-shdw))", "transform": "translateY(-50%)", "-FillerSize": "100rem", "-FillerOffset": "0.6rem", "boxShadow": "0 0 0 3px hsl(var(--range-shdw)) inset,\n      var(--focus-shadow, 0 0),\n      calc(var(--filler-size) * -1 - var(--filler-offset)) 0 0 var(--filler-size)" }, ".range::-moz-range-thumb": { "position": "relative", "height": "1.5rem", "width": "1.5rem", "borderStyle": "none", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)", "top": "50%", "color": "hsl(var(--range-shdw))", "-FillerSize": "100rem", "-FillerOffset": "0.5rem", "boxShadow": "0 0 0 3px hsl(var(--range-shdw)) inset,\n      var(--focus-shadow, 0 0),\n      calc(var(--filler-size) * -1 - var(--filler-offset)) 0 0 var(--filler-size)" }, ".range-primary": { "-RangeShdw": "var(--p)" }, ".range-secondary": { "-RangeShdw": "var(--s)" }, ".range-accent": { "-RangeShdw": "var(--a)" }, ".range-success": { "-RangeShdw": "var(--su)" }, ".range-warning": { "-RangeShdw": "var(--wa)" }, ".range-info": { "-RangeShdw": "var(--in)" }, ".range-error": { "-RangeShdw": "var(--er)" }, ".rating input": { "appearance": "none", "WebkitAppearance": "none" }, ".rating .rating-hidden": { "width": "0.5rem", "backgroundColor": "transparent" }, '.rating input:checked ~ input,\n  .rating input[aria-checked="true"] ~ input': { "-TwBgOpacity": "0.2" }, ".rating input:focus-visible": { "transitionProperty": "transform", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "300ms", "transform": "translateY(-0.125em)" }, ".rating input:active:focus": { "animation": "none", "transform": "translateY(-0.125em)" }, ".rating-half :where(input:not(.rating-hidden))": { "width": "0.75rem" }, "@keyframes rating-pop": { "0%": { "transform": "translateY(-0.125em)" }, "40%": { "transform": "translateY(-0.125em)" }, "100%": { "transform": "translateY(0)" } }, ".select-bordered": { "-TwBorderOpacity": "0.2" }, ".select:focus": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 0.2)" }, ".select-ghost": { "-TwBgOpacity": "0.05" }, ".select-ghost:focus": { "-TwBgOpacity": "1", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))" }, ".select-primary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))" }, ".select-primary:focus": { "outlineColor": "hsl(var(--p) / 1)" }, ".select-secondary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))" }, ".select-secondary:focus": { "outlineColor": "hsl(var(--s) / 1)" }, ".select-accent": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))" }, ".select-accent:focus": { "outlineColor": "hsl(var(--a) / 1)" }, ".select-info": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))" }, ".select-info:focus": { "outlineColor": "hsl(var(--in) / 1)" }, ".select-success": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))" }, ".select-success:focus": { "outlineColor": "hsl(var(--su) / 1)" }, ".select-warning": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))" }, ".select-warning:focus": { "outlineColor": "hsl(var(--wa) / 1)" }, ".select-error": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))" }, ".select-error:focus": { "outlineColor": "hsl(var(--er) / 1)" }, ".select-disabled,\n  .select:disabled,\n  .select[disabled]": { "cursor": "not-allowed", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "-TwTextOpacity": "0.2" }, ".select-disabled::placeholder,\n  .select:disabled::placeholder,\n  .select[disabled]::placeholder": { "color": "hsl(var(--bc) / var(--tw-placeholder-opacity))", "-TwPlaceholderOpacity": "0.2" }, '.select-multiple,\n  .select[multiple],\n  .select[size].select:not([size="1"])': { "backgroundImage": "none", "paddingRight": "1rem" }, '[dir="rtl"] .select': { "backgroundPosition": "calc(0% + 12px) calc(1px + 50%),\n    calc(0% + 16px) calc(1px + 50%)" }, ":where(.stats) > :not([hidden]) ~ :not([hidden])": { "-TwDivideXReverse": "0", "borderRightWidth": "calc(1px * var(--tw-divide-x-reverse))", "borderLeftWidth": "calc(1px * calc(1 - var(--tw-divide-x-reverse)))", "-TwDivideYReverse": "0", "borderTopWidth": "calc(0px * calc(1 - var(--tw-divide-y-reverse)))", "borderBottomWidth": "calc(0px * var(--tw-divide-y-reverse))" }, ".steps .step:before": { "top": "0px", "gridColumnStart": "1", "gridRowStart": "1", "height": "0.5rem", "width": "100%", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "content": '""', "marginLeft": "-100%" }, ".steps .step:after": { "content": "counter(step)", "counterIncrement": "step", "zIndex": "1", "position": "relative", "gridColumnStart": "1", "gridRowStart": "1", "display": "grid", "height": "2rem", "width": "2rem", "placeItems": "center", "placeSelf": "center", "borderRadius": "9999px", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))" }, ".steps .step:first-child:before": { "content": "none" }, ".steps .step[data-content]:after": { "content": "attr(data-content)" }, ".steps .step-neutral + .step-neutral:before,\n  .steps .step-neutral:after": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))" }, ".steps .step-primary + .step-primary:before,\n  .steps .step-primary:after": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".steps .step-secondary + .step-secondary:before,\n  .steps .step-secondary:after": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" }, ".steps .step-accent + .step-accent:before,\n  .steps .step-accent:after": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" }, ".steps .step-info + .step-info:before": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))" }, ".steps .step-info:after": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" }, ".steps .step-success + .step-success:before": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))" }, ".steps .step-success:after": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" }, ".steps .step-warning + .step-warning:before": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))" }, ".steps .step-warning:after": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" }, ".steps .step-error + .step-error:before": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))" }, ".steps .step-error:after": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" }, ".swap-rotate .swap-on,\n.swap-rotate .swap-indeterminate,\n.swap-rotate input:indeterminate ~ .swap-on": { "-TwRotate": "45deg", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".swap-rotate input:checked ~ .swap-off,\n.swap-active:where(.swap-rotate) .swap-off,\n.swap-rotate input:indeterminate ~ .swap-off": { "-TwRotate": "-45deg", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".swap-rotate input:checked ~ .swap-on,\n.swap-active:where(.swap-rotate) .swap-on,\n.swap-rotate input:indeterminate ~ .swap-indeterminate": { "-TwRotate": "0deg", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".swap-flip": { "transformStyle": "preserve-3d", "perspective": "16em" }, ".swap-flip .swap-on,\n.swap-flip .swap-indeterminate,\n.swap-flip input:indeterminate ~ .swap-on": { "transform": "rotateY(180deg)", "backfaceVisibility": "hidden", "opacity": "1" }, ".swap-flip input:checked ~ .swap-off,\n.swap-active:where(.swap-flip) .swap-off,\n.swap-flip input:indeterminate ~ .swap-off": { "transform": "rotateY(-180deg)", "backfaceVisibility": "hidden", "opacity": "1" }, ".swap-flip input:checked ~ .swap-on,\n.swap-active:where(.swap-flip) .swap-on,\n.swap-flip input:indeterminate ~ .swap-indeterminate": { "transform": "rotateY(0deg)" }, ".tab.tab-active:not(.tab-disabled):not([disabled])": { "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "1", "-TwTextOpacity": "1" }, ".tab:focus": { "outline": "2px solid transparent", "outlineOffset": "2px" }, ".tab:focus-visible": { "outline": "2px solid currentColor", "outlineOffset": "-3px" }, ".tab:focus-visible.tab-lifted": { "borderBottomRightRadius": "var(--tab-radius, 0.5rem)", "borderBottomLeftRadius": "var(--tab-radius, 0.5rem)" }, ".tab-disabled,\n  .tab[disabled]": { "cursor": "not-allowed", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "-TwTextOpacity": "0.2" }, ".tab-bordered": { "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.2", "borderStyle": "solid", "borderBottomWidth": "calc(var(--tab-border, 1px) + 1px)" }, ".tab-lifted": { "border": "var(--tab-border, 1px) solid transparent", "borderWidth": "0 0 var(--tab-border, 1px) 0", "borderTopLeftRadius": "var(--tab-radius, 0.5rem)", "borderTopRightRadius": "var(--tab-radius, 0.5rem)", "borderBottomColor": "var(--tab-border-color)", "paddingLeft": "var(--tab-padding, 1rem)", "paddingRight": "var(--tab-padding, 1rem)", "paddingTop": "var(--tab-border, 1px)" }, ".tab-lifted.tab-active:not(.tab-disabled):not([disabled])": { "backgroundColor": "var(--tab-bg)", "borderWidth": "var(--tab-border, 1px) var(--tab-border, 1px) 0 var(--tab-border, 1px)", "borderLeftColor": "var(--tab-border-color)", "borderRightColor": "var(--tab-border-color)", "borderTopColor": "var(--tab-border-color)", "paddingLeft": "calc(var(--tab-padding, 1rem) - var(--tab-border, 1px))", "paddingRight": "calc(var(--tab-padding, 1rem) - var(--tab-border, 1px))", "paddingBottom": "var(--tab-border, 1px)", "paddingTop": "0" }, ".tab-lifted.tab-active:not(.tab-disabled):not([disabled]):before,\n    .tab-lifted.tab-active:not(.tab-disabled):not([disabled]):after": { "zIndex": "1", "content": '""', "display": "block", "position": "absolute", "width": "var(--tab-radius, 0.5rem)", "height": "var(--tab-radius, 0.5rem)", "bottom": "0", "-TabGrad": "calc(68% - var(--tab-border, 1px))", "-TabCornerBg": "radial-gradient(\n        circle at var(--circle-pos),\n        transparent var(--tab-grad),\n        var(--tab-border-color) calc(var(--tab-grad) + 0.3px),\n        var(--tab-border-color) calc(var(--tab-grad) + var(--tab-border, 1px)),\n        var(--tab-bg) calc(var(--tab-grad) + var(--tab-border, 1px) + 0.3px)\n      )" }, ".tab-lifted.tab-active:not(.tab-disabled):not([disabled]):before": { "left": "calc(var(--tab-radius, 0.5rem) * -1)", "-CirclePos": "top left", "backgroundImage": "var(--tab-corner-bg)" }, '[dir="rtl"] .tab-lifted.tab-active:not(.tab-disabled):not([disabled]):before': { "-CirclePos": "top right" }, ".tab-lifted.tab-active:not(.tab-disabled):not([disabled]):after": { "right": "calc(var(--tab-radius, 0.5rem) * -1)", "-CirclePos": "top right", "backgroundImage": "var(--tab-corner-bg)" }, '[dir="rtl"] .tab-lifted.tab-active:not(.tab-disabled):not([disabled]):after': { "-CirclePos": "top left" }, ".tab-lifted.tab-active:not(.tab-disabled):not([disabled]):first-child:before": { "background": "none" }, ".tab-lifted.tab-active:not(.tab-disabled):not([disabled]):last-child:after": { "background": "none" }, ".tab-lifted.tab-active:not(.tab-disabled):not([disabled])\n  + .tab-lifted.tab-active:not(.tab-disabled):not([disabled]):before": { "background": "none" }, ".tabs-boxed": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "padding": "0.25rem", "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".tabs-boxed .tab": { "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".tabs-boxed .tab-active:not(.tab-disabled):not([disabled])": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".table :where(th, td)": { "paddingLeft": "1rem", "paddingRight": "1rem", "paddingTop": "0.75rem", "paddingBottom": "0.75rem", "verticalAlign": "middle" }, ".table tr.active,\n  .table tr.active:nth-child(even),\n  .table-zebra tbody tr:nth-child(even)": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))" }, ".table-zebra tr.active,\n    .table-zebra tr.active:nth-child(even),\n    .table-zebra-zebra tbody tr:nth-child(even)": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))" }, ".table :where(thead, tbody) :where(tr:not(:last-child)),\n    .table :where(thead, tbody) :where(tr:first-child:last-child)": { "borderBottomWidth": "1px", "-TwBorderOpacity": "1", "borderBottomColor": "hsl(var(--b2) / var(--tw-border-opacity))" }, ".table :where(thead, tfoot)": { "whiteSpace": "nowrap", "fontSize": "0.75rem", "lineHeight": "1rem", "fontWeight": "700", "color": "hsl(var(--bc) / 0.6)" }, ".textarea-bordered": { "-TwBorderOpacity": "0.2" }, ".textarea:focus": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 0.2)" }, ".textarea-ghost": { "-TwBgOpacity": "0.05" }, ".textarea-ghost:focus": { "-TwBgOpacity": "1", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "boxShadow": "none" }, ".textarea-primary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))" }, ".textarea-primary:focus": { "outlineColor": "hsl(var(--p) / 1)" }, ".textarea-secondary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))" }, ".textarea-secondary:focus": { "outlineColor": "hsl(var(--s) / 1)" }, ".textarea-accent": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))" }, ".textarea-accent:focus": { "outlineColor": "hsl(var(--a) / 1)" }, ".textarea-info": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))" }, ".textarea-info:focus": { "outlineColor": "hsl(var(--in) / 1)" }, ".textarea-success": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))" }, ".textarea-success:focus": { "outlineColor": "hsl(var(--su) / 1)" }, ".textarea-warning": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))" }, ".textarea-warning:focus": { "outlineColor": "hsl(var(--wa) / 1)" }, ".textarea-error": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))" }, ".textarea-error:focus": { "outlineColor": "hsl(var(--er) / 1)" }, ".textarea-disabled,\n  .textarea:disabled,\n  .textarea[disabled]": { "cursor": "not-allowed", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "-TwTextOpacity": "0.2" }, ".textarea-disabled::placeholder,\n  .textarea:disabled::placeholder,\n  .textarea[disabled]::placeholder": { "color": "hsl(var(--bc) / var(--tw-placeholder-opacity))", "-TwPlaceholderOpacity": "0.2" }, ".toast > *": { "animation": "toast-pop 0.25s ease-out" }, "@keyframes toast-pop": { "0%": { "transform": "scale(0.9)", "opacity": "0" }, "100%": { "transform": "scale(1)", "opacity": "1" } }, '[dir="rtl"] .toggle': { "-Handleoffsetcalculator": "calc(var(--handleoffset) * 1)" }, ".toggle:focus-visible": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 0.2)" }, '.toggle:checked,\n  .toggle[checked="true"],\n  .toggle[aria-checked="true"]': { "-Handleoffsetcalculator": "var(--handleoffset)", "-TwBorderOpacity": "1", "-TwBgOpacity": "1" }, '[dir="rtl"] .toggle:checked, [dir="rtl"] .toggle[checked="true"], [dir="rtl"] .toggle[aria-checked="true"]': { "-Handleoffsetcalculator": "calc(var(--handleoffset) * -1)" }, ".toggle:indeterminate": { "-TwBorderOpacity": "1", "-TwBgOpacity": "1", "boxShadow": "calc(var(--handleoffset) / 2) 0 0 2px var(--tglbg) inset,\n      calc(var(--handleoffset) / -2) 0 0 2px var(--tglbg) inset,\n      0 0 0 2px var(--tglbg) inset" }, '[dir="rtl"] .toggle:indeterminate': { "boxShadow": "calc(var(--handleoffset) / 2) 0 0 2px var(--tglbg) inset,\n        calc(var(--handleoffset) / -2) 0 0 2px var(--tglbg) inset,\n        0 0 0 2px var(--tglbg) inset" }, ".toggle-primary:focus-visible": { "outlineColor": "hsl(var(--p) / 1)" }, '.toggle-primary:checked,\n    .toggle-primary[checked="true"],\n    .toggle-primary[aria-checked="true"]': { "borderColor": "hsl(var(--p) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".toggle-secondary:focus-visible": { "outlineColor": "hsl(var(--s) / 1)" }, '.toggle-secondary:checked,\n    .toggle-secondary[checked="true"],\n    .toggle-secondary[aria-checked="true"]': { "borderColor": "hsl(var(--s) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" }, ".toggle-accent:focus-visible": { "outlineColor": "hsl(var(--a) / 1)" }, '.toggle-accent:checked,\n    .toggle-accent[checked="true"],\n    .toggle-accent[aria-checked="true"]': { "borderColor": "hsl(var(--a) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" }, ".toggle-success:focus-visible": { "outlineColor": "hsl(var(--su) / 1)" }, '.toggle-success:checked,\n    .toggle-success[checked="true"],\n    .toggle-success[aria-checked="true"]': { "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" }, ".toggle-warning:focus-visible": { "outlineColor": "hsl(var(--wa) / 1)" }, '.toggle-warning:checked,\n    .toggle-warning[checked="true"],\n    .toggle-warning[aria-checked="true"]': { "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" }, ".toggle-info:focus-visible": { "outlineColor": "hsl(var(--in) / 1)" }, '.toggle-info:checked,\n    .toggle-info[checked="true"],\n    .toggle-info[aria-checked="true"]': { "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" }, ".toggle-error:focus-visible": { "outlineColor": "hsl(var(--er) / 1)" }, '.toggle-error:checked,\n    .toggle-error[checked="true"],\n    .toggle-error[aria-checked="true"]': { "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" }, ".toggle:disabled": { "cursor": "not-allowed", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "backgroundColor": "transparent", "opacity": "0.3", "-Togglehandleborder": "0 0 0 3px hsl(var(--bc)) inset,\n      var(--handleoffsetcalculator) 0 0 3px hsl(var(--bc)) inset" }, ".toggle-mark": { "display": "none" }, ":root .prose": { "-TwProseBody": "hsl(var(--bc) / 0.8)", "-TwProseHeadings": "hsl(var(--bc))", "-TwProseLead": "hsl(var(--bc))", "-TwProseLinks": "hsl(var(--bc))", "-TwProseBold": "hsl(var(--bc))", "-TwProseCounters": "hsl(var(--bc))", "-TwProseBullets": "hsl(var(--bc) / 0.5)", "-TwProseHr": "hsl(var(--bc) / 0.2)", "-TwProseQuotes": "hsl(var(--bc))", "-TwProseQuoteBorders": "hsl(var(--bc) / 0.2)", "-TwProseCaptions": "hsl(var(--bc) / 0.5)", "-TwProseCode": "hsl(var(--bc))", "-TwProsePreCode": "hsl(var(--nc))", "-TwProsePreBg": "hsl(var(--n))", "-TwProseThBorders": "hsl(var(--bc) / 0.5)", "-TwProseTdBorders": "hsl(var(--bc) / 0.2)" }, '.prose :where(code):not(:where([class~="not-prose"] *))': { "padding": "2px 8px", "borderRadius": "var(--rounded-badge)" }, ".prose code:after,\n  .prose code:before": { "content": "none" }, ".prose pre code": { "borderRadius": "0", "padding": "0" }, '.prose :where(tbody tr, thead):not(:where([class~="not-prose"] *))': { "borderBottomColor": "hsl(var(--bc) / 20%)" } };
  }
});

// node_modules/daisyui/dist/styled.rtl.js
var require_styled_rtl = __commonJS({
  "node_modules/daisyui/dist/styled.rtl.js"(exports, module) {
    module.exports = { ".alert": { "display": "grid", "width": "100%", "gridAutoFlow": "row", "alignContent": "flex-start", "alignItems": "center", "justifyItems": "center", "gap": "1rem", "textAlign": "center", "borderWidth": "1px", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))", "padding": "1rem", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "borderRadius": "var(--rounded-box, 1rem)", "-AlertBg": "hsl(var(--b2))", "-AlertBgMix": "hsl(var(--b1))", "backgroundColor": "var(--alert-bg)" }, "@media (min-width: 640px)": { ".alert": { "gridAutoFlow": "column", "gridTemplateColumns": "auto minmax(auto,1fr)", "justifyItems": "start", "textAlign": "right" } }, ".artboard": { "width": "100%" }, ".avatar": { "position": "relative", "display": "inline-flex" }, ".avatar > div": { "display": "block", "aspectRatio": "1 / 1", "overflow": "hidden" }, ".avatar img": { "height": "100%", "width": "100%", "objectFit": "cover" }, ".avatar.placeholder > div": { "display": "flex", "alignItems": "center", "justifyContent": "center" }, ".badge": { "display": "inline-flex", "alignItems": "center", "justifyContent": "center", "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms", "height": "1.25rem", "fontSize": "0.875rem", "lineHeight": "1.25rem", "width": "fit-content", "paddingRight": "0.563rem", "paddingLeft": "0.563rem", "borderWidth": "1px", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "borderRadius": "var(--rounded-badge, 1.9rem)" }, ".btm-nav": { "position": "fixed", "bottom": "0px", "right": "0px", "left": "0px", "display": "flex", "width": "100%", "flexDirection": "row", "alignItems": "center", "justifyContent": "space-around", "paddingBottom": "env(safe-area-inset-bottom)", "height": "4rem", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "color": "currentColor" }, ".btm-nav > *": { "position": "relative", "display": "flex", "height": "100%", "flexBasis": "100%", "cursor": "pointer", "flexDirection": "column", "alignItems": "center", "justifyContent": "center", "gap": "0.25rem", "borderColor": "currentColor" }, ".breadcrumbs": { "maxWidth": "100%", "overflowX": "auto", "paddingTop": "0.5rem", "paddingBottom": "0.5rem" }, ".breadcrumbs > ul,\n  .breadcrumbs > ol": { "display": "flex", "alignItems": "center", "whiteSpace": "nowrap", "minHeight": "min-content" }, ".breadcrumbs > ul > li, .breadcrumbs > ol > li": { "display": "flex", "alignItems": "center" }, ".breadcrumbs > ul > li > a, .breadcrumbs > ol > li > a": { "display": "flex", "cursor": "pointer", "alignItems": "center" }, "@media (hover:hover)": [{ ".breadcrumbs > ul > li > a:hover, .breadcrumbs > ol > li > a:hover": { "textDecorationLine": "underline" } }, { ".link-hover:hover": { "textDecorationLine": "underline" } }, { ".checkbox-primary:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))" } }, { ".checkbox-secondary:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))" } }, { ".checkbox-accent:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))" } }, { ".checkbox-success:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))" } }, { ".checkbox-warning:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))" } }, { ".checkbox-info:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))" } }, { ".checkbox-error:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))" } }, { ".label a:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))" } }, { ".link-primary:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--pf) / var(--tw-text-opacity))" } }, { ".link-secondary:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--sf) / var(--tw-text-opacity))" } }, { ".link-accent:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--af) / var(--tw-text-opacity))" } }, { ".link-neutral:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--nf) / var(--tw-text-opacity))" } }, { ".link-success:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--su) / var(--tw-text-opacity))" } }, { ".link-info:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--in) / var(--tw-text-opacity))" } }, { ".link-warning:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--wa) / var(--tw-text-opacity))" } }, { ".link-error:hover": { "-TwTextOpacity": "1", "color": "hsl(var(--er) / var(--tw-text-opacity))" } }, { ".menu li > *:not(ul):not(.menu-title):not(details):active,\n.menu li > *:not(ul):not(.menu-title):not(details).active,\n.menu li > details > summary:active": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))" } }, { ".radio-primary:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))" } }, { ".radio-secondary:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))" } }, { ".radio-accent:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))" } }, { ".radio-success:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))" } }, { ".radio-warning:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))" } }, { ".radio-info:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))" } }, { ".radio-error:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))" } }, { ".tab:hover": { "-TwTextOpacity": "1" } }, { ".tabs-boxed .tab-active:not(.tab-disabled):not([disabled]):hover": { "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" } }, { ".table tr.hover:hover,\n  .table tr.hover:nth-child(even):hover": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))" } }, { ".table-zebra tr.hover:hover,\n  .table-zebra tr.hover:nth-child(even):hover": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))" } }], ".btn": { "display": "inline-flex", "flexShrink": "0", "cursor": "pointer", "userSelect": "none", "flexWrap": "wrap", "alignItems": "center", "justifyContent": "center", "borderColor": ["transparent", "hsl(var(--b2) / var(--tw-border-opacity))"], "textAlign": "center", "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms", "borderRadius": "var(--rounded-btn, 0.5rem)", "height": "3rem", "paddingRight": "1rem", "paddingLeft": "1rem", "minHeight": "3rem", "fontSize": "0.875rem", "lineHeight": "1em", "gap": "0.5rem", "fontWeight": "600", "textDecorationLine": ["none", "none"], "borderWidth": "var(--border-btn, 1px)", "animation": "button-pop var(--animation-btn, 0.25s) ease-out", "textTransform": "var(--btn-text-case, uppercase)", "-TwBorderOpacity": "1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--bc) / 1)" }, ".btn-disabled,\n  .btn[disabled],\n  .btn:disabled": { "pointerEvents": "none" }, ".btn-square": { "height": "3rem", "width": "3rem", "padding": "0px" }, ".btn-circle": { "height": "3rem", "width": "3rem", "borderRadius": "9999px", "padding": "0px" }, ".btn-group": { "display": "inline-flex" }, '.btn-group > input[type="radio"].btn': { "appearance": "none" }, '.btn-group > input[type="radio"].btn:before': { "content": "attr(data-title)" }, '.btn:is(input[type="checkbox"]),\n.btn:is(input[type="radio"])': { "width": "auto", "appearance": "none" }, '.btn:is(input[type="checkbox"]):after,\n.btn:is(input[type="radio"]):after': { "-TwContent": "attr(aria-label)", "content": "var(--tw-content)" }, ".card": { "position": "relative", "display": "flex", "flexDirection": "column", "borderRadius": "var(--rounded-box, 1rem)" }, ".card:focus": { "outline": "2px solid transparent", "outlineOffset": "2px" }, ".card-body": { "display": ["flex", "flex"], "flex": "1 1 auto", "flexDirection": ["column", "column"], "padding": "var(--padding-card, 2rem)", "gap": "0.5rem" }, ".card-body :where(p)": { "flexGrow": "1" }, ".card-actions": { "display": "flex", "flexWrap": "wrap", "alignItems": "flex-start", "gap": "0.5rem" }, ".card figure": { "display": "flex", "alignItems": "center", "justifyContent": "center" }, ".card.image-full": { "display": "grid" }, ".card.image-full:before": { "position": "relative", "content": '""', "zIndex": "10", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "opacity": "0.75", "borderRadius": "var(--rounded-box, 1rem)" }, ".card.image-full:before,\n    .card.image-full > *": { "gridColumnStart": "1", "gridRowStart": "1" }, ".card.image-full > figure img": { "height": "100%", "objectFit": "cover" }, ".card.image-full > .card-body": { "position": "relative", "zIndex": "20", "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))" }, ".carousel": { "display": "inline-flex", "overflowX": "scroll", "scrollSnapType": "x mandatory", "scrollBehavior": "smooth", "msOverflowStyle": "none", "scrollbarWidth": "none" }, ".carousel-vertical": { "flexDirection": "column", "overflowY": "scroll", "scrollSnapType": "y mandatory" }, ".carousel-item": { "boxSizing": "content-box", "display": "flex", "flex": "none", "scrollSnapAlign": "start" }, ".carousel-center .carousel-item": { "scrollSnapAlign": "center" }, ".carousel-end .carousel-item": { "scrollSnapAlign": "end" }, ".chat": { "display": "grid", "gridTemplateColumns": "repeat(2, minmax(0, 1fr))", "columnGap": "0.75rem", "paddingTop": "0.25rem", "paddingBottom": "0.25rem" }, ".chat-image": { "gridRow": "span 2 / span 2", "alignSelf": "flex-end" }, ".chat-header": { "gridRowStart": "1", "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".chat-footer": { "gridRowStart": "3", "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".chat-bubble": { "position": "relative", "display": "block", "width": "fit-content", "paddingRight": "1rem", "paddingLeft": "1rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem", "maxWidth": "90%", "borderRadius": "var(--rounded-box, 1rem)", "minHeight": "2.75rem", "minWidth": "2.75rem", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))" }, ".chat-bubble:before": { "position": "absolute", "bottom": "0px", "height": "0.75rem", "width": "0.75rem", "backgroundColor": "inherit", "content": '""', "maskSize": "contain", "maskRepeat": "no-repeat", "maskPosition": "center" }, ".chat-start": { "placeItems": "start", "gridTemplateColumns": "auto 1fr" }, ".chat-start .chat-header": { "gridColumnStart": "2" }, ".chat-start .chat-footer": { "gridColumnStart": "2" }, ".chat-start .chat-image": { "gridColumnStart": "1" }, ".chat-start .chat-bubble": { "gridColumnStart": "2", "borderBottomRightRadius": "0px" }, ".chat-start .chat-bubble:before": { "maskImage": `url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 3 3 L 3 0 C 3 1 1 3 0 3'/%3e%3c/svg%3e")`, "right": "-0.749rem" }, '[dir="rtl"] .chat-start .chat-bubble:before': { "maskImage": `url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 1 3 L 3 3 C 2 3 0 1 0 0'/%3e%3c/svg%3e")` }, ".chat-end": { "placeItems": "end", "gridTemplateColumns": "1fr auto" }, ".chat-end .chat-header": { "gridColumnStart": "1" }, ".chat-end .chat-footer": { "gridColumnStart": "1" }, ".chat-end .chat-image": { "gridColumnStart": "2" }, ".chat-end .chat-bubble": { "gridColumnStart": "1", "borderBottomLeftRadius": "0px" }, ".chat-end .chat-bubble:before": { "maskImage": `url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 1 3 L 3 3 C 2 3 0 1 0 0'/%3e%3c/svg%3e")`, "right": "99.9%" }, '[dir="rtl"] .chat-end .chat-bubble:before': { "maskImage": `url("data:image/svg+xml,%3csvg width='3' height='3' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m 0 3 L 3 3 L 3 0 C 3 1 1 3 0 3'/%3e%3c/svg%3e")` }, ".checkbox": { "flexShrink": "0", "-Chkbg": "var(--bc)", "-Chkfg": "var(--b1)", "height": "1.5rem", "width": "1.5rem", "cursor": "pointer", "appearance": "none", "borderWidth": "1px", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.2", "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".collapse:not(td):not(tr):not(colgroup)": { "visibility": "visible" }, ".collapse": { "position": "relative", "display": "grid", "overflow": "hidden", "gridTemplateRows": "auto 0fr", "transition": "grid-template-rows 0.2s", "width": "100%", "borderRadius": "var(--rounded-box, 1rem)" }, '.collapse-title,\n.collapse > input[type="checkbox"],\n.collapse > input[type="radio"],\n.collapse-content': { "gridColumnStart": "1", "gridRowStart": "1" }, '.collapse > input[type="checkbox"],\n.collapse > input[type="radio"]': { "appearance": "none", "opacity": "0" }, ".collapse-content": { "visibility": "hidden", "gridColumnStart": "1", "gridRowStart": "2", "minHeight": "0px", "transition": ["visibility 0.2s", "padding 0.2s ease-out,\n    background-color 0.2s ease-out"], "paddingRight": "1rem", "paddingLeft": "1rem", "cursor": "unset" }, ".collapse[open],\n.collapse-open,\n.collapse:focus:not(.collapse-close)": { "gridTemplateRows": "auto 1fr" }, '.collapse:not(.collapse-close):has(> input[type="checkbox"]:checked),\n.collapse:not(.collapse-close):has(> input[type="radio"]:checked)': { "gridTemplateRows": "auto 1fr" }, '.collapse[open] > .collapse-content,\n.collapse-open > .collapse-content,\n.collapse:focus:not(.collapse-close) > .collapse-content,\n.collapse:not(.collapse-close) > input[type="checkbox"]:checked ~ .collapse-content,\n.collapse:not(.collapse-close) > input[type="radio"]:checked ~ .collapse-content': { "visibility": "visible", "minHeight": "fit-content" }, ":root .countdown": { "lineHeight": "1em" }, ".countdown": { "display": "inline-flex" }, ".countdown > *": { "height": "1em", "display": "inline-block", "overflowY": "hidden" }, ".countdown > *:before": { "position": "relative", "content": '"00\\A 01\\A 02\\A 03\\A 04\\A 05\\A 06\\A 07\\A 08\\A 09\\A 10\\A 11\\A 12\\A 13\\A 14\\A 15\\A 16\\A 17\\A 18\\A 19\\A 20\\A 21\\A 22\\A 23\\A 24\\A 25\\A 26\\A 27\\A 28\\A 29\\A 30\\A 31\\A 32\\A 33\\A 34\\A 35\\A 36\\A 37\\A 38\\A 39\\A 40\\A 41\\A 42\\A 43\\A 44\\A 45\\A 46\\A 47\\A 48\\A 49\\A 50\\A 51\\A 52\\A 53\\A 54\\A 55\\A 56\\A 57\\A 58\\A 59\\A 60\\A 61\\A 62\\A 63\\A 64\\A 65\\A 66\\A 67\\A 68\\A 69\\A 70\\A 71\\A 72\\A 73\\A 74\\A 75\\A 76\\A 77\\A 78\\A 79\\A 80\\A 81\\A 82\\A 83\\A 84\\A 85\\A 86\\A 87\\A 88\\A 89\\A 90\\A 91\\A 92\\A 93\\A 94\\A 95\\A 96\\A 97\\A 98\\A 99\\A"', "whiteSpace": "pre", "top": "calc(var(--value) * -1em)", "textAlign": "center", "transition": "all 1s cubic-bezier(1, 0, 0, 1)" }, ".divider": { "display": "flex", "flexDirection": "row", "alignItems": "center", "alignSelf": "stretch", "marginTop": "1rem", "marginBottom": "1rem", "height": "1rem", "whiteSpace": "nowrap" }, ".divider:before,\n  .divider:after": { "content": '""', "flexGrow": "1", "height": "0.125rem", "width": "100%" }, ".drawer": { "position": "relative", "display": "grid", "gridAutoColumns": "max-content auto", "width": "100%" }, ".drawer-content": { "gridColumnStart": "2", "gridRowStart": "1" }, ".drawer-side": { "pointerEvents": "none", "position": "fixed", "right": "0px", "top": "0px", "gridColumnStart": "1", "gridRowStart": "1", "display": "grid", "width": "100%", "gridTemplateColumns": "repeat(1, minmax(0, 1fr))", "gridTemplateRows": "repeat(1, minmax(0, 1fr))", "alignItems": "flex-start", "justifyItems": "start", "overflowY": "auto", "overscrollBehavior": "contain", "height": ["100vh", "100dvh"], "scrollbarWidth": "none" }, ".drawer-side::-webkit-scrollbar": { "display": "none" }, ".drawer-side > .drawer-overlay": { "position": "sticky", "top": "0px", "placeSelf": "stretch", "cursor": "pointer", "backgroundColor": "transparent", "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms" }, ".drawer-side > *": { "gridColumnStart": "1", "gridRowStart": "1" }, ".drawer-side > *:not(.drawer-overlay)": { "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "300ms", "transform": "translateX(100%)" }, '[dir="rtl"] .drawer-side > *:not(.drawer-overlay)': { "transform": "translateX(100%)" }, ".drawer-toggle": { "position": "fixed", "height": "0px", "width": "0px", "appearance": "none", "opacity": "0" }, ".drawer-toggle:checked ~ .drawer-side": { "pointerEvents": "auto", "visibility": "visible" }, ".drawer-toggle:checked ~ .drawer-side > *:not(.drawer-overlay)": { "transform": "translateX(0%)" }, ".drawer-end": { "gridAutoColumns": "auto max-content" }, ".drawer-end .drawer-toggle ~ .drawer-content": { "gridColumnStart": "1" }, ".drawer-end .drawer-toggle ~ .drawer-side": { "gridColumnStart": "2", "justifyItems": "end" }, ".drawer-end .drawer-toggle ~ .drawer-side > *:not(.drawer-overlay)": { "transform": "translateX(-100%)" }, ".drawer-end .drawer-toggle:checked ~ .drawer-side > *:not(.drawer-overlay)": { "transform": "translateX(0%)" }, ".dropdown": { "position": "relative", "display": "inline-block" }, ".dropdown > *:not(summary):focus": { "outline": "2px solid transparent", "outlineOffset": "2px" }, ".dropdown .dropdown-content": { "position": "absolute" }, ".dropdown:is(:not(details)) .dropdown-content": { "visibility": "hidden", "opacity": "0", "transformOrigin": "top", "-TwScaleX": ".95", "-TwScaleY": ".95", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms" }, ".dropdown-end .dropdown-content": { "left": "0px" }, ".dropdown-left .dropdown-content": { "bottom": "auto", "left": "100%", "top": "0px", "transformOrigin": "left" }, ".dropdown-right .dropdown-content": { "bottom": "auto", "right": "100%", "top": "0px", "transformOrigin": "right" }, ".dropdown-bottom .dropdown-content": { "bottom": "auto", "top": "100%", "transformOrigin": "top" }, ".dropdown-top .dropdown-content": { "bottom": "100%", "top": "auto", "transformOrigin": "bottom" }, ".dropdown-end.dropdown-right .dropdown-content": { "bottom": "0px", "top": "auto" }, ".dropdown-end.dropdown-left .dropdown-content": { "bottom": "0px", "top": "auto" }, ".dropdown.dropdown-open .dropdown-content,\n.dropdown:not(.dropdown-hover):focus .dropdown-content,\n.dropdown:focus-within .dropdown-content": { "visibility": "visible", "opacity": "1" }, "@media (hover: hover)": [{ ".dropdown.dropdown-hover:hover .dropdown-content": { "visibility": "visible", "opacity": "1" } }, { ".btm-nav > *.disabled:hover,\n      .btm-nav > *[disabled]:hover": { "pointerEvents": "none", "-TwBorderOpacity": "0", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "-TwTextOpacity": "0.2" } }, { ".btn:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b3) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))" } }, { ".btn-primary:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--pf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--pf) / var(--tw-bg-opacity))" } }, { ".btn-secondary:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--sf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--sf) / var(--tw-bg-opacity))" } }, { ".btn-accent:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--af) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--af) / var(--tw-bg-opacity))" } }, { ".btn-neutral:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--nf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--nf) / var(--tw-bg-opacity))" } }, { ".btn-info:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))" } }, { ".btn-success:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))" } }, { ".btn-warning:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))" } }, { ".btn-error:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))" } }, { ".btn.glass:hover": { "-GlassOpacity": "25%", "-GlassBorderOpacity": "15%" } }, { ".btn-ghost:hover": { "-TwBorderOpacity": "0", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.2" } }, { ".btn-link:hover": { "borderColor": "transparent", "backgroundColor": "transparent", "textDecorationLine": "underline" } }, { ".btn-outline:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--b1) / var(--tw-text-opacity))" } }, { ".btn-outline.btn-primary:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--pf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--pf) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" } }, { ".btn-outline.btn-secondary:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--sf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--sf) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" } }, { ".btn-outline.btn-accent:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--af) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--af) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" } }, { ".btn-outline.btn-success:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" } }, { ".btn-outline.btn-info:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" } }, { ".btn-outline.btn-warning:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" } }, { ".btn-outline.btn-error:hover": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" } }, { ".btn-disabled:hover,\n    .btn[disabled]:hover,\n    .btn:disabled:hover": { "-TwBorderOpacity": "0", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.2", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "-TwTextOpacity": "0.2" } }, { '.btn:is(input[type="checkbox"]:checked):hover, .btn:is(input[type="radio"]:checked):hover': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--pf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--pf) / var(--tw-bg-opacity))" } }, { ".dropdown.dropdown-hover:hover .dropdown-content": { "-TwScaleX": "1", "-TwScaleY": "1", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" } }, { ":where(.menu li:not(.menu-title):not(.disabled) > *:not(ul):not(details):not(.menu-title)):not(.active):hover, :where(.menu li:not(.menu-title):not(.disabled) > details > summary:not(.menu-title)):not(.active):hover": { "cursor": "pointer", "backgroundColor": "hsl(var(--bc) / 0.1)", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "outline": "2px solid transparent", "outlineOffset": "2px" } }, { ".tab[disabled],\n    .tab[disabled]:hover": { "cursor": "not-allowed", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "-TwTextOpacity": "0.2" } }], ".dropdown:is(details) summary::-webkit-details-marker": { "display": "none" }, ".file-input": { "height": "3rem", "flexShrink": "1", "paddingLeft": "1rem", "fontSize": ["0.875rem", "1rem"], "lineHeight": ["1.25rem", "2", "1.5rem"], "overflow": "hidden", "borderWidth": "1px", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".file-input::file-selector-button": { "marginLeft": "1rem", "display": "inline-flex", "height": "100%", "flexShrink": "0", "cursor": "pointer", "userSelect": "none", "flexWrap": "wrap", "alignItems": "center", "justifyContent": "center", "paddingRight": "1rem", "paddingLeft": "1rem", "textAlign": "center", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "1em"], "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms", "borderStyle": "solid", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--n) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "fontWeight": "600", "textTransform": ["uppercase", "var(--btn-text-case, uppercase)"], "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))", "textDecorationLine": "none", "borderWidth": "var(--border-btn, 1px)", "animation": "button-pop var(--animation-btn, 0.25s) ease-out" }, ".footer": { "display": "grid", "width": "100%", "gridAutoFlow": "row", "placeItems": "start", "columnGap": "1rem", "rowGap": "2.5rem", "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".footer > *": { "display": "grid", "placeItems": "start", "gap": "0.5rem" }, ".footer-center": { "placeItems": "center", "textAlign": "center" }, ".footer-center > *": { "placeItems": "center" }, "@media (min-width: 48rem)": { ".footer": { "gridAutoFlow": "column" }, ".footer-center": { "gridAutoFlow": "row dense" } }, ".form-control": { "display": "flex", "flexDirection": "column" }, ".label": { "display": "flex", "userSelect": "none", "alignItems": "center", "justifyContent": "space-between", "paddingRight": "0.25rem", "paddingLeft": "0.25rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem" }, ".hero": { "display": "grid", "width": "100%", "placeItems": "center", "backgroundSize": "cover", "backgroundPosition": "center" }, ".hero > *": { "gridColumnStart": "1", "gridRowStart": "1" }, ".hero-overlay": { "gridColumnStart": "1", "gridRowStart": "1", "height": "100%", "width": "100%", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.5" }, ".hero-content": { "zIndex": "0", "display": "flex", "alignItems": "center", "justifyContent": "center", "maxWidth": "80rem", "gap": "1rem", "padding": "1rem" }, ".indicator": { "position": "relative", "display": "inline-flex", "width": "max-content" }, ".indicator :where(.indicator-item)": { "zIndex": "1", "position": "absolute", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "whiteSpace": "nowrap" }, ".input": { "flexShrink": "1", "height": "3rem", "paddingRight": "1rem", "paddingLeft": "1rem", "fontSize": ["0.875rem", "1rem"], "lineHeight": ["1.25rem", "2", "1.5rem"], "borderWidth": "1px", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".input-group": { "display": "flex", "width": "100%", "alignItems": "stretch" }, ".input-group > .input": { "isolation": "isolate" }, ".input-group > *,\n  .input-group > .input,\n  .input-group > .textarea,\n  .input-group > .select": { "borderRadius": "0px" }, ".input-group-md": { "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"] }, ".input-group-lg": { "fontSize": "1.125rem", "lineHeight": ["1.75rem", "2"] }, ".input-group-sm": { "fontSize": "0.875rem", "lineHeight": "2rem" }, ".input-group-xs": { "fontSize": "0.75rem", "lineHeight": ["1rem", "1.625"] }, ".input-group :where(span)": { "display": "flex", "alignItems": "center", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))", "paddingRight": "1rem", "paddingLeft": "1rem" }, ".input-group > :first-child": { "borderTopRightRadius": "var(--rounded-btn, 0.5rem)", "borderTopLeftRadius": "0", "borderBottomRightRadius": "var(--rounded-btn, 0.5rem)", "borderBottomLeftRadius": "0" }, ".input-group > :last-child": { "borderTopRightRadius": "0", "borderTopLeftRadius": "var(--rounded-btn, 0.5rem)", "borderBottomRightRadius": "0", "borderBottomLeftRadius": "var(--rounded-btn, 0.5rem)" }, ".input-group-vertical": { "flexDirection": "column" }, ".input-group-vertical :first-child": { "borderTopRightRadius": "var(--rounded-btn, 0.5rem)", "borderTopLeftRadius": "var(--rounded-btn, 0.5rem)", "borderBottomRightRadius": "0", "borderBottomLeftRadius": "0" }, ".input-group-vertical :last-child": { "borderTopRightRadius": "0", "borderTopLeftRadius": "0", "borderBottomRightRadius": "var(--rounded-btn, 0.5rem)", "borderBottomLeftRadius": "var(--rounded-btn, 0.5rem)" }, ".join": { "display": "inline-flex", "alignItems": "stretch", "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".join :where(.join-item)": { "borderStartEndRadius": "0", "borderEndEndRadius": "0", "borderEndStartRadius": "0", "borderStartStartRadius": "0" }, ".join .join-item:not(:first-child):not(:last-child),\n  .join *:not(:first-child):not(:last-child) .join-item": { "borderStartEndRadius": "0", "borderEndEndRadius": "0", "borderEndStartRadius": "0", "borderStartStartRadius": "0" }, ".join .join-item:first-child:not(:last-child),\n  .join *:first-child:not(:last-child) .join-item": { "borderStartEndRadius": "0", "borderEndEndRadius": "0" }, ".join .dropdown .join-item:first-child:not(:last-child),\n  .join *:first-child:not(:last-child) .dropdown .join-item": { "borderStartEndRadius": "inherit", "borderEndEndRadius": "inherit" }, ".join :where(.join-item:first-child:not(:last-child)),\n  .join :where(*:first-child:not(:last-child) .join-item)": { "borderEndStartRadius": "inherit", "borderStartStartRadius": "inherit" }, ".join .join-item:last-child:not(:first-child),\n  .join *:last-child:not(:first-child) .join-item": { "borderEndStartRadius": "0", "borderStartStartRadius": "0" }, ".join :where(.join-item:last-child:not(:first-child)),\n  .join :where(*:last-child:not(:first-child) .join-item)": { "borderStartEndRadius": "inherit", "borderEndEndRadius": "inherit" }, "@supports not selector(:has(*))": { ":where(.join *)": { "borderRadius": "inherit" } }, "@supports selector(:has(*))": { ":where(.join *:has(.join-item))": { "borderRadius": "inherit" } }, ".kbd": { "display": "inline-flex", "alignItems": "center", "justifyContent": "center", "borderWidth": "1px", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.2", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "paddingRight": "0.5rem", "paddingLeft": "0.5rem", "borderRadius": "var(--rounded-btn, 0.5rem)", "borderBottomWidth": "2px", "minHeight": "2.2em", "minWidth": "2.2em" }, ".link": { "cursor": "pointer", "textDecorationLine": "underline" }, ".link-hover": { "textDecorationLine": "none" }, ".mask": { "maskSize": "contain", "maskRepeat": "no-repeat", "maskPosition": "center" }, ".mask-half-1": { "maskSize": "200%", "maskPosition": "left" }, ".mask-half-2": { "maskSize": "200%", "maskPosition": "right" }, ".menu": { "display": "flex", "flexDirection": "column", "flexWrap": "wrap", "fontSize": "0.875rem", "lineHeight": "1.25rem", "padding": "0.5rem" }, ".menu :where(li ul)": { "position": "relative", "whiteSpace": "nowrap", "marginRight": "1rem", "paddingRight": "0.5rem" }, ".menu :where(li:not(.menu-title) > *:not(ul):not(details):not(.menu-title)),\n  .menu :where(li:not(.menu-title) > details > summary:not(.menu-title))": { "display": "grid", "gridAutoFlow": "column", "alignContent": "flex-start", "alignItems": "center", "gap": "0.5rem", "gridAutoColumns": "minmax(auto, max-content) auto max-content", "userSelect": "none" }, ".menu li.disabled": { "cursor": "not-allowed", "userSelect": "none", "color": "hsl(var(--bc) / 0.3)" }, ".menu :where(li > .menu-dropdown:not(.menu-dropdown-show))": { "display": "none" }, ":where(.menu li)": { "position": "relative", "display": "flex", "flexShrink": "0", "flexDirection": "column", "flexWrap": "wrap", "alignItems": "stretch" }, ":where(.menu li) .badge": { "justifySelf": "end" }, ".mockup-code": { "position": "relative", "overflow": "hidden", "overflowX": "auto", "minWidth": "18rem", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "paddingTop": "1.25rem", "paddingBottom": "1.25rem", "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".mockup-code pre[data-prefix]:before": { "content": ["attr(data-prefix)", "attr(data-prefix)"], "display": "inline-block", "textAlign": "left", "width": "2rem", "opacity": "0.5" }, ".mockup-window": { "position": "relative", "overflow": "hidden", "overflowX": "auto", "paddingTop": "1.25rem", "borderRadius": "var(--rounded-box, 1rem)" }, ".mockup-window pre[data-prefix]:before": { "content": "attr(data-prefix)", "display": "inline-block", "textAlign": "left" }, ".mockup-browser": { "position": "relative", "overflow": "hidden", "overflowX": "auto", "borderRadius": "var(--rounded-box, 1rem)" }, ".mockup-browser pre[data-prefix]:before": { "content": "attr(data-prefix)", "display": "inline-block", "textAlign": "left" }, ".modal": { "pointerEvents": "none", "position": "fixed", "inset": "0px", "margin": "0px", "display": "grid", "height": "100%", "maxHeight": "none", "width": "100%", "maxWidth": "none", "justifyItems": "center", "padding": "0px", "opacity": "0", "overscrollBehavior": ["contain", "contain"], "zIndex": "999", "backgroundColor": "transparent", "color": "inherit", "transitionDuration": "200ms", "transitionTimingFunction": "cubic-bezier(0, 0, 0.2, 1)", "transitionProperty": "transform, opacity, visibility", "overflowY": "hidden" }, ".modal-scroll": { "overscrollBehavior": "auto" }, ":where(.modal)": { "alignItems": "center" }, ".modal-box": { "maxHeight": "calc(100vh - 5em)", "gridColumnStart": "1", "gridRowStart": "1", "width": "91.666667%", "maxWidth": "32rem", "-TwScaleX": ".9", "-TwScaleY": ".9", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "padding": "1.5rem", "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms", "borderTopRightRadius": "var(--rounded-box, 1rem)", "borderTopLeftRadius": "var(--rounded-box, 1rem)", "borderBottomRightRadius": "var(--rounded-box, 1rem)", "borderBottomLeftRadius": "var(--rounded-box, 1rem)", "boxShadow": "rgba(0, 0, 0, 0.25) 0px 25px 50px -12px", "overflowY": "auto", "overscrollBehavior": "contain" }, ".modal-open,\n.modal:target,\n.modal-toggle:checked + .modal,\n.modal[open]": { "pointerEvents": "auto", "visibility": "visible", "opacity": "1" }, ".modal-action": { "display": "flex", "marginTop": "1.5rem", "justifyContent": "flex-end" }, ".modal-toggle": { "position": "fixed", "height": "0px", "width": "0px", "appearance": "none", "opacity": "0" }, ":root:has(:is(.modal-open, .modal:target, .modal-toggle:checked + .modal, .modal[open]))": { "overflow": "hidden" }, ".navbar": { "display": "flex", "alignItems": "center", "padding": "var(--navbar-padding, 0.5rem)", "minHeight": "4rem", "width": "100%" }, ":where(.navbar > *)": { "display": "inline-flex", "alignItems": "center" }, ".navbar-start": { "width": "50%", "justifyContent": "flex-start" }, ".navbar-center": { "flexShrink": "0" }, ".navbar-end": { "width": "50%", "justifyContent": "flex-end" }, ".progress": { "position": "relative", "width": "100%", "appearance": "none", "overflow": "hidden", "height": "0.5rem", "backgroundColor": "hsl(var(--bc) / 0.2)", "borderRadius": "var(--rounded-box, 1rem)" }, ".radial-progress": { "position": "relative", "display": "inline-grid", "height": "var(--size)", "width": "var(--size)", "placeContent": "center", "borderRadius": "9999px", "backgroundColor": "transparent", "verticalAlign": "middle", "boxSizing": "content-box", "-Value": "0", "-Size": "5rem", "-Thickness": "calc(var(--size) / 10)" }, ".radial-progress::-moz-progress-bar": { "appearance": "none", "backgroundColor": "transparent" }, ".radial-progress::-webkit-progress-value": { "appearance": "none", "backgroundColor": "transparent" }, ".radial-progress::-webkit-progress-bar": { "appearance": "none", "backgroundColor": "transparent" }, ".radial-progress:before,\n.radial-progress:after": { "position": "absolute", "borderRadius": "9999px", "content": '""' }, ".radial-progress:before": { "inset": "0px", "background": "radial-gradient(farthest-side, currentColor 98%, #0000) top/var(--thickness) var(--thickness)\n      no-repeat,\n    conic-gradient(currentColor calc(var(--value) * 1%), #0000 0)", "WebkitMask": "radial-gradient(\n    farthest-side,\n    #0000 calc(99% - var(--thickness)),\n    #000 calc(100% - var(--thickness))\n  )", "mask": "radial-gradient(\n    farthest-side,\n    #0000 calc(99% - var(--thickness)),\n    #000 calc(100% - var(--thickness))\n  )" }, ".radial-progress:after": { "inset": "calc(50% - var(--thickness) / 2)", "transform": "rotate(calc(-1*(var(--value) * 3.6deg - 90deg))) translate(calc(-1*(var(--size) / 2 - 50%)))", "backgroundColor": "currentColor" }, ".radio": { "flexShrink": "0", "-Chkbg": "var(--bc)", "height": "1.5rem", "width": "1.5rem", "cursor": "pointer", "appearance": "none", "borderRadius": "9999px", "borderWidth": "1px", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.2" }, ".range": { "height": "1.5rem", "width": "100%", "cursor": "pointer", "appearance": "none", "WebkitAppearance": "none", "-RangeShdw": "var(--bc)", "overflow": "hidden", "backgroundColor": "transparent", "borderRadius": "var(--rounded-box, 1rem)" }, ".range:focus": { "outline": "none" }, ".rating": { "position": "relative", "display": "inline-flex" }, ".rating :where(input)": { "cursor": "pointer", "borderRadius": "0px", "animation": "rating-pop var(--animation-input, 0.25s) ease-out", "height": "1.5rem", "width": "1.5rem", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "-TwBgOpacity": "1" }, ".select": { "display": "inline-flex", "cursor": "pointer", "userSelect": "none", "appearance": "none", "height": "3rem", "paddingRight": "1rem", "paddingLeft": ["2.5rem", "2.5rem"], "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"], "minHeight": "3rem", "borderWidth": "1px", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-btn, 0.5rem)", "backgroundImage": "linear-gradient(-45deg, transparent 50%, currentColor 50%),\n    linear-gradient(-135deg, currentColor 50%, transparent 50%)", "backgroundPosition": "calc(100% - (100% - 20px)) calc(1px + 50%),\n    calc(100% - (100% - 16.1px)) calc(1px + 50%)", "backgroundSize": "4px 4px,\n    4px 4px", "backgroundRepeat": "no-repeat" }, ".select[multiple]": { "height": "auto" }, ".stack": { "display": "inline-grid", "placeItems": "center", "alignItems": "flex-end" }, ".stack > *": { "gridColumnStart": "1", "gridRowStart": "1", "transform": "translateY(10%) scale(0.9)", "zIndex": "1", "width": "100%", "opacity": "0.6" }, ".stack > *:nth-child(2)": { "transform": "translateY(5%) scale(0.95)", "zIndex": "2", "opacity": "0.8" }, ".stack > *:nth-child(1)": { "transform": "translateY(0) scale(1)", "zIndex": "3", "opacity": "1" }, ".stats": { "display": "inline-grid", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ":where(.stats)": { "gridAutoFlow": "column", "overflowX": "auto" }, ".stat": { "display": "inline-grid", "width": "100%", "gridTemplateColumns": "repeat(1, 1fr)", "columnGap": "1rem", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.1", "paddingRight": "1.5rem", "paddingLeft": "1.5rem", "paddingTop": "1rem", "paddingBottom": "1rem" }, ".stat-figure": { "gridColumnStart": "2", "gridRow": "span 3 / span 3", "gridRowStart": "1", "placeSelf": "center", "justifySelf": "end" }, ".stat-title": { "gridColumnStart": "1", "whiteSpace": "nowrap", "color": "hsl(var(--bc) / 0.6)" }, ".stat-value": { "gridColumnStart": "1", "whiteSpace": "nowrap", "fontSize": "2.25rem", "lineHeight": "2.5rem", "fontWeight": "800" }, ".stat-desc": { "gridColumnStart": "1", "whiteSpace": "nowrap", "fontSize": "0.75rem", "lineHeight": "1rem", "color": "hsl(var(--bc) / 0.6)" }, ".stat-actions": { "gridColumnStart": "1", "whiteSpace": "nowrap", "marginTop": "1rem" }, ".steps": { "display": "inline-grid", "gridAutoFlow": "column", "overflow": "hidden", "overflowX": "auto", "counterReset": "step", "gridAutoColumns": "1fr" }, ".steps .step": { "display": "grid", "gridTemplateColumns": ["repeat(1, minmax(0, 1fr))", "auto"], "gridTemplateRows": ["repeat(2, minmax(0, 1fr))", "40px 1fr"], "placeItems": "center", "textAlign": "center", "minWidth": "4rem" }, ".swap": { "position": "relative", "display": "inline-grid", "userSelect": "none", "placeContent": "center", "cursor": "pointer" }, ".swap > *": { "gridColumnStart": "1", "gridRowStart": "1", "transitionDuration": "300ms", "transitionTimingFunction": "cubic-bezier(0, 0, 0.2, 1)", "transitionProperty": "transform, opacity" }, ".swap input": { "appearance": "none" }, ".swap .swap-on,\n.swap .swap-indeterminate,\n.swap input:indeterminate ~ .swap-on": { "opacity": "0" }, ".swap input:checked ~ .swap-off,\n.swap-active .swap-off,\n.swap input:indeterminate ~ .swap-off": { "opacity": "0" }, ".swap input:checked ~ .swap-on,\n.swap-active .swap-on,\n.swap input:indeterminate ~ .swap-indeterminate": { "opacity": "1" }, ".tabs": { "display": "flex", "flexWrap": "wrap", "alignItems": "flex-end" }, ".tab": { "position": "relative", "display": "inline-flex", "cursor": "pointer", "userSelect": "none", "flexWrap": "wrap", "alignItems": "center", "justifyContent": "center", "textAlign": "center", "height": "2rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"], "-TabPadding": "1rem", "-TwTextOpacity": "0.5", "-TabColor": "hsl(var(--bc) / var(--tw-text-opacity, 1))", "-TabBg": "hsl(var(--b1) / var(--tw-bg-opacity, 1))", "-TabBorderColor": "hsl(var(--b3) / var(--tw-bg-opacity, 1))", "color": "var(--tab-color)", "paddingRight": "var(--tab-padding, 1rem)", "paddingLeft": "var(--tab-padding, 1rem)" }, ".table": { "position": "relative", "width": "100%", "textAlign": "right", "fontSize": "0.875rem", "lineHeight": "1.25rem", "borderRadius": "var(--rounded-box, 1rem)" }, ".table :where(.table-pin-rows thead tr)": { "position": "sticky", "top": "0px", "zIndex": "1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))" }, ".table :where(.table-pin-rows tfoot tr)": { "position": "sticky", "bottom": "0px", "zIndex": "1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))" }, ".table :where(.table-pin-cols tr th)": { "position": "sticky", "right": "0px", "left": "0px", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))" }, ".table-zebra tbody tr:nth-child(even) :where(.table-pin-cols tr th)": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))" }, ".textarea": { "flexShrink": "1", "minHeight": "3rem", "paddingRight": "1rem", "paddingLeft": "1rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"], "borderWidth": "1px", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".toast": { "position": "fixed", "display": "flex", "minWidth": "fit-content", "flexDirection": "column", "whiteSpace": "nowrap", "gap": "0.5rem", "padding": "1rem" }, ".toggle": { "flexShrink": "0", "-Tglbg": "hsl(var(--b1))", "-Handleoffset": "1.5rem", "-Handleoffsetcalculator": "calc(var(--handleoffset) * -1)", "-Togglehandleborder": "0 0", "height": "1.5rem", "width": "3rem", "cursor": "pointer", "appearance": "none", "borderWidth": "1px", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.2", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.5", "borderRadius": "var(--rounded-badge, 1.9rem)", "transition": "background,\n    box-shadow var(--animation-input, 0.2s) ease-out", "boxShadow": "var(--handleoffsetcalculator) 0 0 2px var(--tglbg) inset,\n    0 0 0 2px var(--tglbg) inset,\n    var(--togglehandleborder)" }, ".alert-info": { "borderColor": "hsl(var(--in) / 0.2)", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))", "-AlertBg": "hsl(var(--in))", "-AlertBgMix": "hsl(var(--b1))" }, ".alert-success": { "borderColor": "hsl(var(--su) / 0.2)", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))", "-AlertBg": "hsl(var(--su))", "-AlertBgMix": "hsl(var(--b1))" }, ".alert-warning": { "borderColor": "hsl(var(--wa) / 0.2)", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))", "-AlertBg": "hsl(var(--wa))", "-AlertBgMix": "hsl(var(--b1))" }, ".alert-error": { "borderColor": "hsl(var(--er) / 0.2)", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))", "-AlertBg": "hsl(var(--er))", "-AlertBgMix": "hsl(var(--b1))" }, ".avatar-group": { "display": "flex", "overflow": "hidden" }, ".avatar-group :where(.avatar)": { "overflow": "hidden", "borderRadius": "9999px", "borderWidth": "4px", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b1) / var(--tw-border-opacity))" }, ".badge-neutral": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--n) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))" }, ".badge-primary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".badge-secondary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" }, ".badge-accent": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" }, ".badge-info": { "borderColor": "transparent", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" }, ".badge-success": { "borderColor": "transparent", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" }, ".badge-warning": { "borderColor": "transparent", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" }, ".badge-error": { "borderColor": "transparent", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" }, ".badge-ghost": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))" }, ".badge-outline": { "borderColor": "currentColor", "-TwBorderOpacity": "0.5", "backgroundColor": "transparent", "color": "currentColor" }, ".badge-outline.badge-neutral": { "-TwTextOpacity": "1", "color": "hsl(var(--n) / var(--tw-text-opacity))" }, ".badge-outline.badge-primary": { "-TwTextOpacity": "1", "color": "hsl(var(--p) / var(--tw-text-opacity))" }, ".badge-outline.badge-secondary": { "-TwTextOpacity": "1", "color": "hsl(var(--s) / var(--tw-text-opacity))" }, ".badge-outline.badge-accent": { "-TwTextOpacity": "1", "color": "hsl(var(--a) / var(--tw-text-opacity))" }, ".badge-outline.badge-info": { "-TwTextOpacity": "1", "color": "hsl(var(--in) / var(--tw-text-opacity))" }, ".badge-outline.badge-success": { "-TwTextOpacity": "1", "color": "hsl(var(--su) / var(--tw-text-opacity))" }, ".badge-outline.badge-warning": { "-TwTextOpacity": "1", "color": "hsl(var(--wa) / var(--tw-text-opacity))" }, ".badge-outline.badge-error": { "-TwTextOpacity": "1", "color": "hsl(var(--er) / var(--tw-text-opacity))" }, ".btm-nav > *:not(.active)": { "paddingTop": "0.125rem" }, ".btm-nav > *:where(.active)": { "borderTopWidth": "2px", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))" }, ".btm-nav > *.disabled,\n    .btm-nav > *[disabled]": { "pointerEvents": "none", "-TwBorderOpacity": "0", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "-TwTextOpacity": "0.2" }, ".btm-nav > * .label": { "fontSize": "1rem", "lineHeight": "1.5rem" }, ".breadcrumbs > ul > li > a:focus, .breadcrumbs > ol > li > a:focus": { "outline": "2px solid transparent", "outlineOffset": "2px" }, ".breadcrumbs > ul > li > a:focus-visible, .breadcrumbs > ol > li > a:focus-visible": { "outline": "2px solid currentColor", "outlineOffset": "2px" }, ".breadcrumbs > ul > li + *:before, .breadcrumbs > ol > li + *:before": { "content": '""', "marginRight": "0.5rem", "marginLeft": "0.75rem", "display": "block", "height": "0.375rem", "width": "0.375rem", "-TwRotate": "45deg", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "opacity": "0.4", "borderTop": "1px solid", "borderLeft": "1px solid", "backgroundColor": "transparent" }, '[dir="rtl"] .breadcrumbs > ul > li + *:before,\n[dir="rtl"] .breadcrumbs > ol > li + *:before': { "-TwRotate": "-45deg" }, ".btn:active:hover,\n  .btn:active:focus": { "animation": "button-pop 0s ease-out", "transform": "scale(var(--btn-focus-scale, 0.97))" }, ".btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b3) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))" }, ".btn:focus-visible": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px" }, ".btn-primary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--p) / 1)" }, ".btn-primary.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--pf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--pf) / var(--tw-bg-opacity))" }, ".btn-secondary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--s) / 1)" }, ".btn-secondary.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--sf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--sf) / var(--tw-bg-opacity))" }, ".btn-accent": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--a) / 1)" }, ".btn-accent.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--af) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--af) / var(--tw-bg-opacity))" }, ".btn-neutral": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--n) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--n) / 1)" }, ".btn-neutral.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--nf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--nf) / var(--tw-bg-opacity))" }, ".btn-info": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--in) / 1)" }, ".btn-info.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))" }, ".btn-success": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--su) / 1)" }, ".btn-success.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))" }, ".btn-warning": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--wa) / 1)" }, ".btn-warning.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))" }, ".btn-error": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))", "outlineColor": "hsl(var(--er) / 1)" }, ".btn-error.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))" }, ".btn.glass": { "-TwShadow": "0 0 #0000", "-TwShadowColored": "0 0 #0000", "boxShadow": "var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)", "outlineColor": "currentColor" }, ".btn.glass.btn-active": { "-GlassOpacity": "25%", "-GlassBorderOpacity": "15%" }, ".btn-ghost": { "borderWidth": "1px", "borderColor": "transparent", "backgroundColor": "transparent", "color": "currentColor", "-TwShadow": "0 0 #0000", "-TwShadowColored": "0 0 #0000", "boxShadow": "var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)", "outlineColor": "currentColor" }, ".btn-ghost.btn-active": { "-TwBorderOpacity": "0", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.2" }, ".btn-link": { "borderColor": "transparent", "backgroundColor": "transparent", "-TwTextOpacity": "1", "color": "hsl(var(--p) / var(--tw-text-opacity))", "textDecorationLine": "underline", "-TwShadow": "0 0 #0000", "-TwShadowColored": "0 0 #0000", "boxShadow": "var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)", "outlineColor": "currentColor" }, ".btn-link.btn-active": { "borderColor": "transparent", "backgroundColor": "transparent", "textDecorationLine": "underline" }, ".btn-outline": { "borderColor": "currentColor", "backgroundColor": "transparent", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "-TwShadow": "0 0 #0000", "-TwShadowColored": "0 0 #0000", "boxShadow": "var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)" }, ".btn-outline.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--b1) / var(--tw-text-opacity))" }, ".btn-outline.btn-primary": { "-TwTextOpacity": "1", "color": "hsl(var(--p) / var(--tw-text-opacity))" }, ".btn-outline.btn-primary.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--pf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--pf) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".btn-outline.btn-secondary": { "-TwTextOpacity": "1", "color": "hsl(var(--s) / var(--tw-text-opacity))" }, ".btn-outline.btn-secondary.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--sf) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--sf) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" }, ".btn-outline.btn-accent": { "-TwTextOpacity": "1", "color": "hsl(var(--a) / var(--tw-text-opacity))" }, ".btn-outline.btn-accent.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--af) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--af) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" }, ".btn-outline.btn-success": { "-TwTextOpacity": "1", "color": "hsl(var(--su) / var(--tw-text-opacity))" }, ".btn-outline.btn-success.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" }, ".btn-outline.btn-info": { "-TwTextOpacity": "1", "color": "hsl(var(--in) / var(--tw-text-opacity))" }, ".btn-outline.btn-info.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" }, ".btn-outline.btn-warning": { "-TwTextOpacity": "1", "color": "hsl(var(--wa) / var(--tw-text-opacity))" }, ".btn-outline.btn-warning.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" }, ".btn-outline.btn-error": { "-TwTextOpacity": "1", "color": "hsl(var(--er) / var(--tw-text-opacity))" }, ".btn-outline.btn-error.btn-active": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" }, ".btn.btn-disabled,\n  .btn[disabled],\n  .btn:disabled": { "-TwBorderOpacity": "0", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.2", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "-TwTextOpacity": "0.2" }, '.btn-group > input[type="radio"]:checked.btn,\n  .btn-group > .btn-active': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, '.btn-group > input[type="radio"]:checked.btn:focus-visible, .btn-group > .btn-active:focus-visible': { "outlineStyle": "solid", "outlineWidth": "2px", "outlineColor": "hsl(var(--p) / 1)" }, '.btn:is(input[type="checkbox"]:checked),\n.btn:is(input[type="radio"]:checked)': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, '.btn:is(input[type="checkbox"]:checked):focus-visible, .btn:is(input[type="radio"]:checked):focus-visible': { "outlineColor": "hsl(var(--p) / 1)" }, "@keyframes button-pop": { "0%": { "transform": "scale(var(--btn-focus-scale, 0.98))" }, "40%": { "transform": "scale(1.02)" }, "100%": { "transform": "scale(1)" } }, ".card :where(figure:first-child)": { "overflow": "hidden", "borderStartStartRadius": "inherit", "borderStartEndRadius": "inherit", "borderEndStartRadius": "unset", "borderEndEndRadius": "unset" }, ".card :where(figure:last-child)": { "overflow": "hidden", "borderStartStartRadius": "unset", "borderStartEndRadius": "unset", "borderEndStartRadius": "inherit", "borderEndEndRadius": "inherit" }, ".card:focus-visible": { "outline": "2px solid currentColor", "outlineOffset": "2px" }, ".card.bordered": { "borderWidth": "1px", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))" }, ".card-bordered": { "borderWidth": "1px", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))" }, ".card.compact .card-body": { "padding": "1rem", "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".card-title": { "display": "flex", "alignItems": "center", "gap": "0.5rem", "fontSize": "1.25rem", "lineHeight": "1.75rem", "fontWeight": "600" }, ".card.image-full :where(figure)": { "overflow": "hidden", "borderRadius": "inherit" }, ".carousel::-webkit-scrollbar": { "display": "none" }, ".chat-bubble-primary": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".chat-bubble-secondary": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" }, ".chat-bubble-accent": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" }, ".chat-bubble-info": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" }, ".chat-bubble-success": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" }, ".chat-bubble-warning": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" }, ".chat-bubble-error": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" }, ".checkbox:focus-visible": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 1)" }, '.checkbox:checked,\n  .checkbox[checked="true"],\n  .checkbox[aria-checked="true"]': { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "backgroundRepeat": "no-repeat", "animation": "checkmark var(--animation-input, 0.2s) ease-out", "backgroundImage": "linear-gradient(45deg, transparent 65%, hsl(var(--chkbg)) 65.99%),\n      linear-gradient(-45deg, transparent 75%, hsl(var(--chkbg)) 75.99%),\n      linear-gradient(45deg, hsl(var(--chkbg)) 40%, transparent 40.99%),\n      linear-gradient(\n        -45deg,\n        hsl(var(--chkbg)) 30%,\n        hsl(var(--chkfg)) 30.99%,\n        hsl(var(--chkfg)) 40%,\n        transparent 40.99%\n      ),\n      linear-gradient(45deg, hsl(var(--chkfg)) 50%, hsl(var(--chkbg)) 50.99%)" }, ".checkbox:indeterminate": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "backgroundRepeat": "no-repeat", "animation": "checkmark var(--animation-input, 0.2s) ease-out", "backgroundImage": "linear-gradient(-90deg, transparent 80%, hsl(var(--chkbg)) 80%),\n      linear-gradient(90deg, transparent 80%, hsl(var(--chkbg)) 80%),\n      linear-gradient(\n        0deg,\n        hsl(var(--chkbg)) 43%,\n        hsl(var(--chkfg)) 43%,\n        hsl(var(--chkfg)) 57%,\n        hsl(var(--chkbg)) 57%\n      )" }, ".checkbox-primary": { "-Chkbg": "var(--p)", "-Chkfg": "var(--pc)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))" }, ".checkbox-primary:focus-visible": { "outlineColor": "hsl(var(--p) / 1)" }, '.checkbox-primary:checked,\n    .checkbox-primary[checked="true"],\n    .checkbox-primary[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".checkbox-secondary": { "-Chkbg": "var(--s)", "-Chkfg": "var(--sc)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))" }, ".checkbox-secondary:focus-visible": { "outlineColor": "hsl(var(--s) / 1)" }, '.checkbox-secondary:checked,\n    .checkbox-secondary[checked="true"],\n    .checkbox-secondary[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" }, ".checkbox-accent": { "-Chkbg": "var(--a)", "-Chkfg": "var(--ac)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))" }, ".checkbox-accent:focus-visible": { "outlineColor": "hsl(var(--a) / 1)" }, '.checkbox-accent:checked,\n    .checkbox-accent[checked="true"],\n    .checkbox-accent[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" }, ".checkbox-success": { "-Chkbg": "var(--su)", "-Chkfg": "var(--suc)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))" }, ".checkbox-success:focus-visible": { "outlineColor": "hsl(var(--su) / 1)" }, '.checkbox-success:checked,\n    .checkbox-success[checked="true"],\n    .checkbox-success[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" }, ".checkbox-warning": { "-Chkbg": "var(--wa)", "-Chkfg": "var(--wac)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))" }, ".checkbox-warning:focus-visible": { "outlineColor": "hsl(var(--wa) / 1)" }, '.checkbox-warning:checked,\n    .checkbox-warning[checked="true"],\n    .checkbox-warning[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" }, ".checkbox-info": { "-Chkbg": "var(--in)", "-Chkfg": "var(--inc)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))" }, ".checkbox-info:focus-visible": { "outlineColor": "hsl(var(--in) / 1)" }, '.checkbox-info:checked,\n    .checkbox-info[checked="true"],\n    .checkbox-info[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" }, ".checkbox-error": { "-Chkbg": "var(--er)", "-Chkfg": "var(--erc)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))" }, ".checkbox-error:focus-visible": { "outlineColor": "hsl(var(--er) / 1)" }, '.checkbox-error:checked,\n    .checkbox-error[checked="true"],\n    .checkbox-error[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" }, ".checkbox:disabled": { "cursor": "not-allowed", "borderColor": "transparent", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "opacity": "0.2" }, "@keyframes checkmark": { "0%": { "backgroundPositionY": "5px" }, "50%": { "backgroundPositionY": "-2px" }, "100%": { "backgroundPositionY": "0" } }, ".checkbox-mark": { "display": "none" }, '[dir="rtl"] .checkbox:checked,\n    [dir="rtl"] .checkbox[checked="true"],\n    [dir="rtl"] .checkbox[aria-checked="true"]': { "backgroundImage": "linear-gradient(-45deg, transparent 65%, hsl(var(--chkbg)) 65.99%),\n        linear-gradient(45deg, transparent 75%, hsl(var(--chkbg)) 75.99%),\n        linear-gradient(-45deg, hsl(var(--chkbg)) 40%, transparent 40.99%),\n        linear-gradient(\n          45deg,\n          hsl(var(--chkbg)) 30%,\n          hsl(var(--chkfg)) 30.99%,\n          hsl(var(--chkfg)) 40%,\n          transparent 40.99%\n        ),\n        linear-gradient(-45deg, hsl(var(--chkfg)) 50%, hsl(var(--chkbg)) 50.99%)" }, "details.collapse": { "width": "100%" }, "details.collapse summary": { "position": "relative", "display": "block", "outline": "2px solid transparent", "outlineOffset": "2px" }, "details.collapse summary::-webkit-details-marker": { "display": "none" }, ".collapse:focus-visible": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 1)" }, '.collapse:has(.collapse-title:focus-visible),\n.collapse:has(> input[type="checkbox"]:focus-visible),\n.collapse:has(> input[type="radio"]:focus-visible)': { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 1)" }, ".collapse-arrow > .collapse-title:after": { "position": "absolute", "display": "block", "height": "0.5rem", "width": "0.5rem", "-TwTranslateY": "-100%", "-TwRotate": "45deg", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "transitionProperty": "all", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": ["150ms", "0.2s"], "top": "50%", "left": "1.4rem", "content": '""', "transformOrigin": "25% 75%", "boxShadow": "-2px 2px", "pointerEvents": "none" }, '[dir="rtl"] .collapse-arrow > .collapse-title:after': { "-TwRotate": "-45deg" }, ".collapse-plus > .collapse-title:after": { "position": "absolute", "display": "block", "height": "0.5rem", "width": "0.5rem", "transitionProperty": "all", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "300ms", "top": "0.9rem", "left": "1.4rem", "content": '"+"', "pointerEvents": "none" }, '.collapse:not(.collapse-open):not(.collapse-close) > input[type="checkbox"],\n.collapse:not(.collapse-open):not(.collapse-close) > input[type="radio"]:not(:checked),\n.collapse:not(.collapse-open):not(.collapse-close) > .collapse-title': { "cursor": "pointer" }, ".collapse:focus:not(.collapse-open):not(.collapse-close):not(.collapse[open]) > .collapse-title": { "cursor": "unset" }, ".collapse-title": { "position": "relative" }, ':where(.collapse > input[type="checkbox"]),\n:where(.collapse > input[type="radio"])': { "zIndex": "1" }, '.collapse-title,\n:where(.collapse > input[type="checkbox"]),\n:where(.collapse > input[type="radio"])': { "width": "100%", "padding": "1rem", "paddingLeft": "3rem", "minHeight": "3.75rem", "transition": "background-color 0.2s ease-out" }, '.collapse[open] > :where(.collapse-content),\n.collapse-open > :where(.collapse-content),\n.collapse:focus:not(.collapse-close) > :where(.collapse-content),\n.collapse:not(.collapse-close) > :where(input[type="checkbox"]:checked ~ .collapse-content),\n.collapse:not(.collapse-close) > :where(input[type="radio"]:checked ~ .collapse-content)': { "paddingBottom": "1rem", "transition": "padding 0.2s ease-out,\n    background-color 0.2s ease-out" }, '.collapse[open].collapse-arrow > .collapse-title:after,\n.collapse-open.collapse-arrow > .collapse-title:after,\n.collapse-arrow:focus:not(.collapse-close) > .collapse-title:after,\n.collapse-arrow:not(.collapse-close) > input[type="checkbox"]:checked ~ .collapse-title:after,\n.collapse-arrow:not(.collapse-close) > input[type="radio"]:checked ~ .collapse-title:after': { "-TwTranslateY": "-50%", "-TwRotate": "225deg", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, '[dir="rtl"] .collapse[open].collapse-arrow > .collapse-title:after,\n[dir="rtl"] .collapse-open.collapse-arrow > .collapse-title:after,\n[dir="rtl"] .collapse-arrow:focus:not(.collapse-close) .collapse-title:after,\n[dir="rtl"]\n  .collapse-arrow:not(.collapse-close)\n  input[type="checkbox"]:checked\n  ~ .collapse-title:after': { "-TwRotate": "135deg" }, '.collapse[open].collapse-plus > .collapse-title:after,\n.collapse-open.collapse-plus > .collapse-title:after,\n.collapse-plus:focus:not(.collapse-close) > .collapse-title:after,\n.collapse-plus:not(.collapse-close) > input[type="checkbox"]:checked ~ .collapse-title:after,\n.collapse-plus:not(.collapse-close) > input[type="radio"]:checked ~ .collapse-title:after': { "content": '"−"' }, ".divider:before": { "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.1" }, ".divider:after": { "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.1" }, ".divider:not(:empty)": { "gap": "1rem" }, ".drawer-toggle:checked ~ .drawer-side > .drawer-overlay": { "backgroundColor": "hsl(0 0% 0%/0.4)" }, ".drawer-toggle:focus-visible ~ .drawer-content label.drawer-button": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px" }, ".dropdown.dropdown-open .dropdown-content,\n.dropdown:focus .dropdown-content,\n.dropdown:focus-within .dropdown-content": { "-TwScaleX": "1", "-TwScaleY": "1", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".file-input-bordered": { "-TwBorderOpacity": "0.2" }, ".file-input:focus": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 0.2)" }, ".file-input-ghost": { "-TwBgOpacity": "0.05" }, ".file-input-ghost:focus": { "-TwBgOpacity": "1", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "boxShadow": "none" }, ".file-input-ghost::file-selector-button": { "borderWidth": "1px", "borderColor": "transparent", "backgroundColor": "transparent", "color": "currentColor" }, ".file-input-primary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))" }, ".file-input-primary:focus": { "outlineColor": "hsl(var(--p) / 1)" }, ".file-input-primary::file-selector-button": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".file-input-secondary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))" }, ".file-input-secondary:focus": { "outlineColor": "hsl(var(--s) / 1)" }, ".file-input-secondary::file-selector-button": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" }, ".file-input-accent": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))" }, ".file-input-accent:focus": { "outlineColor": "hsl(var(--a) / 1)" }, ".file-input-accent::file-selector-button": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" }, ".file-input-info": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))" }, ".file-input-info:focus": { "outlineColor": "hsl(var(--in) / 1)" }, ".file-input-info::file-selector-button": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" }, ".file-input-success": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))" }, ".file-input-success:focus": { "outlineColor": "hsl(var(--su) / 1)" }, ".file-input-success::file-selector-button": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" }, ".file-input-warning": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))" }, ".file-input-warning:focus": { "outlineColor": "hsl(var(--wa) / 1)" }, ".file-input-warning::file-selector-button": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" }, ".file-input-error": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))" }, ".file-input-error:focus": { "outlineColor": "hsl(var(--er) / 1)" }, ".file-input-error::file-selector-button": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" }, ".file-input-disabled,\n  .file-input[disabled]": { "cursor": "not-allowed", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "-TwTextOpacity": "0.2" }, ".file-input-disabled::placeholder,\n  .file-input[disabled]::placeholder": { "color": "hsl(var(--bc) / var(--tw-placeholder-opacity))", "-TwPlaceholderOpacity": "0.2" }, ".file-input-disabled::file-selector-button, .file-input[disabled]::file-selector-button": { "-TwBorderOpacity": "0", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwBgOpacity": "0.2", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "-TwTextOpacity": "0.2" }, ".footer-title": { "marginBottom": "0.5rem", "fontWeight": "700", "textTransform": "uppercase", "opacity": "0.5" }, ".label-text": { "fontSize": "0.875rem", "lineHeight": "1.25rem", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))" }, ".label-text-alt": { "fontSize": "0.75rem", "lineHeight": "1rem", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))" }, ".input input:focus": { "outline": "2px solid transparent", "outlineOffset": "2px" }, ".input[list]::-webkit-calendar-picker-indicator": { "lineHeight": "1em" }, ".input-bordered": { "-TwBorderOpacity": "0.2" }, ".input:focus,\n  .input:focus-within": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 0.2)" }, ".input-ghost": { "-TwBgOpacity": "0.05" }, ".input-ghost:focus,\n    .input-ghost:focus-within": { "-TwBgOpacity": "1", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "boxShadow": "none" }, ".input-primary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))" }, ".input-primary:focus,\n    .input-primary:focus-within": { "outlineColor": "hsl(var(--p) / 1)" }, ".input-secondary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))" }, ".input-secondary:focus,\n    .input-secondary:focus-within": { "outlineColor": "hsl(var(--s) / 1)" }, ".input-accent": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))" }, ".input-accent:focus,\n    .input-accent:focus-within": { "outlineColor": "hsl(var(--a) / 1)" }, ".input-info": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))" }, ".input-info:focus,\n    .input-info:focus-within": { "outlineColor": "hsl(var(--in) / 1)" }, ".input-success": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))" }, ".input-success:focus,\n    .input-success:focus-within": { "outlineColor": "hsl(var(--su) / 1)" }, ".input-warning": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))" }, ".input-warning:focus,\n    .input-warning:focus-within": { "outlineColor": "hsl(var(--wa) / 1)" }, ".input-error": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))" }, ".input-error:focus,\n    .input-error:focus-within": { "outlineColor": "hsl(var(--er) / 1)" }, ".input-disabled,\n  .input:disabled,\n  .input[disabled]": { "cursor": "not-allowed", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "-TwTextOpacity": "0.2" }, ".input-disabled::placeholder,\n  .input:disabled::placeholder,\n  .input[disabled]::placeholder": { "color": "hsl(var(--bc) / var(--tw-placeholder-opacity))", "-TwPlaceholderOpacity": "0.2" }, ".join > :where(*:not(:first-child))": { "marginTop": "0px", "marginBottom": "0px", "marginRight": "-1px" }, ".join-item:focus": { "isolation": "isolate" }, ".link-primary": { "-TwTextOpacity": "1", "color": "hsl(var(--p) / var(--tw-text-opacity))" }, ".link-secondary": { "-TwTextOpacity": "1", "color": "hsl(var(--s) / var(--tw-text-opacity))" }, ".link-accent": { "-TwTextOpacity": "1", "color": "hsl(var(--a) / var(--tw-text-opacity))" }, ".link-neutral": { "-TwTextOpacity": "1", "color": "hsl(var(--n) / var(--tw-text-opacity))" }, ".link-success": { "-TwTextOpacity": "1", "color": "hsl(var(--su) / var(--tw-text-opacity))" }, ".link-info": { "-TwTextOpacity": "1", "color": "hsl(var(--in) / var(--tw-text-opacity))" }, ".link-warning": { "-TwTextOpacity": "1", "color": "hsl(var(--wa) / var(--tw-text-opacity))" }, ".link-error": { "-TwTextOpacity": "1", "color": "hsl(var(--er) / var(--tw-text-opacity))" }, ".link:focus": { "outline": "2px solid transparent", "outlineOffset": "2px" }, ".link:focus-visible": { "outline": "2px solid currentColor", "outlineOffset": "2px" }, ".loading": { "pointerEvents": "none", "display": "inline-block", "aspectRatio": "1 / 1", "width": "1.5rem", "backgroundColor": "currentColor", "maskSize": "100%", "maskRepeat": "no-repeat", "maskPosition": "center", "maskImage": `url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='%23000' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_V8m1%7Btransform-origin:center;animation:spinner_zKoa 2s linear infinite%7D.spinner_V8m1 circle%7Bstroke-linecap:round;animation:spinner_YpZS 1.5s ease-out infinite%7D%40keyframes spinner_zKoa%7B100%25%7Btransform:rotate(360deg)%7D%7D%40keyframes spinner_YpZS%7B0%25%7Bstroke-dasharray:0 150;stroke-dashoffset:0%7D47.5%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-16%7D95%25%2C100%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-59%7D%7D%3C%2Fstyle%3E%3Cg class='spinner_V8m1'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3'%3E%3C%2Fcircle%3E%3C%2Fg%3E%3C%2Fsvg%3E")` }, ".loading-spinner": { "maskImage": `url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='%23000' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_V8m1%7Btransform-origin:center;animation:spinner_zKoa 2s linear infinite%7D.spinner_V8m1 circle%7Bstroke-linecap:round;animation:spinner_YpZS 1.5s ease-out infinite%7D%40keyframes spinner_zKoa%7B100%25%7Btransform:rotate(360deg)%7D%7D%40keyframes spinner_YpZS%7B0%25%7Bstroke-dasharray:0 150;stroke-dashoffset:0%7D47.5%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-16%7D95%25%2C100%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-59%7D%7D%3C%2Fstyle%3E%3Cg class='spinner_V8m1'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3'%3E%3C%2Fcircle%3E%3C%2Fg%3E%3C%2Fsvg%3E")` }, ".loading-dots": { "maskImage": `url("data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_qM83%7Banimation:spinner_8HQG 1.05s infinite%7D.spinner_oXPr%7Banimation-delay:.1s%7D.spinner_ZTLf%7Banimation-delay:.2s%7D@keyframes spinner_8HQG%7B0%25,57.14%25%7Banimation-timing-function:cubic-bezier(0.33,.66,.66,1);transform:translate(0)%7D28.57%25%7Banimation-timing-function:cubic-bezier(0.33,0,.66,.33);transform:translateY(-6px)%7D100%25%7Btransform:translate(0)%7D%7D%3C/style%3E%3Ccircle class='spinner_qM83' cx='4' cy='12' r='3'/%3E%3Ccircle class='spinner_qM83 spinner_oXPr' cx='12' cy='12' r='3'/%3E%3Ccircle class='spinner_qM83 spinner_ZTLf' cx='20' cy='12' r='3'/%3E%3C/svg%3E")` }, ".loading-ring": { "maskImage": `url("data:image/svg+xml,%3Csvg width='44' height='44' viewBox='0 0 44 44' xmlns='http://www.w3.org/2000/svg' stroke='%23fff'%3E%3Cg fill='none' fill-rule='evenodd' stroke-width='2'%3E%3Ccircle cx='22' cy='22' r='1'%3E%3Canimate attributeName='r' begin='0s' dur='1.8s' values='1; 20' calcMode='spline' keyTimes='0; 1' keySplines='0.165, 0.84, 0.44, 1' repeatCount='indefinite' /%3E%3Canimate attributeName='stroke-opacity' begin='0s' dur='1.8s' values='1; 0' calcMode='spline' keyTimes='0; 1' keySplines='0.3, 0.61, 0.355, 1' repeatCount='indefinite' /%3E%3C/circle%3E%3Ccircle cx='22' cy='22' r='1'%3E%3Canimate attributeName='r' begin='-0.9s' dur='1.8s' values='1; 20' calcMode='spline' keyTimes='0; 1' keySplines='0.165, 0.84, 0.44, 1' repeatCount='indefinite' /%3E%3Canimate attributeName='stroke-opacity' begin='-0.9s' dur='1.8s' values='1; 0' calcMode='spline' keyTimes='0; 1' keySplines='0.3, 0.61, 0.355, 1' repeatCount='indefinite' /%3E%3C/circle%3E%3C/g%3E%3C/svg%3E")` }, ".loading-ball": { "maskImage": `url("data:image/svg+xml,%0A%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_rXNP%7Banimation:spinner_YeBj .8s infinite%7D@keyframes spinner_YeBj%7B0%25%7Banimation-timing-function:cubic-bezier(0.33,0,.66,.33);cy:5px%7D46.875%25%7Bcy:20px;rx:4px;ry:4px%7D50%25%7Banimation-timing-function:cubic-bezier(0.33,.66,.66,1);cy:20.5px;rx:4.8px;ry:3px%7D53.125%25%7Brx:4px;ry:4px%7D100%25%7Bcy:5px%7D%7D%3C/style%3E%3Cellipse class='spinner_rXNP' cx='12' cy='5' rx='4' ry='4'/%3E%3C/svg%3E")` }, ".loading-bars": { "maskImage": `url("data:image/svg+xml,%0A%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_hzlK%7Banimation:spinner_vc4H .8s linear infinite;animation-delay:-.8s%7D.spinner_koGT%7Banimation-delay:-.65s%7D.spinner_YF1u%7Banimation-delay:-.5s%7D@keyframes spinner_vc4H%7B0%25%7By:1px;height:22px%7D93.75%25%7By:5px;height:14px;opacity:.2%7D%7D%3C/style%3E%3Crect class='spinner_hzlK' x='1' y='1' width='6' height='22'/%3E%3Crect class='spinner_hzlK spinner_koGT' x='9' y='1' width='6' height='22'/%3E%3Crect class='spinner_hzlK spinner_YF1u' x='17' y='1' width='6' height='22'/%3E%3C/svg%3E")` }, ".loading-infinity": { "maskImage": `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' style='shape-rendering: auto;' width='200px' height='200px' viewBox='0 0 100 100' preserveAspectRatio='xMidYMid'%3E%3Cpath fill='none' stroke='%230a0a0a' stroke-width='10' stroke-dasharray='205.271142578125 51.317785644531256' d='M24.3 30C11.4 30 5 43.3 5 50s6.4 20 19.3 20c19.3 0 32.1-40 51.4-40 C88.6 30 95 43.3 95 50s-6.4 20-19.3 20C56.4 70 43.6 30 24.3 30z' stroke-linecap='round' style='transform:scale(0.8);transform-origin:50px 50px'%3E%3Canimate attributeName='stroke-dashoffset' repeatCount='indefinite' dur='2s' keyTimes='0;1' values='0;256.58892822265625'%3E%3C/animate%3E%3C/path%3E%3C/svg%3E")` }, ".loading-xs": { "width": "1rem" }, ".loading-sm": { "width": "1.25rem" }, ".loading-md": { "width": "1.5rem" }, ".loading-lg": { "width": "2.5rem" }, ".mask-squircle": { "maskImage": `url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M100 0C20 0 0 20 0 100s20 100 100 100 100-20 100-100S180 0 100 0Z'/%3e%3c/svg%3e")` }, ".mask-decagon": { "maskImage": `url("data:image/svg+xml,%3csvg width='192' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 0 58.779 19.098 36.327 50v61.804l-36.327 50L96 200l-58.779-19.098-36.327-50V69.098l36.327-50z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-diamond": { "maskImage": `url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m100 0 100 100-100 100L0 100z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-heart": { "maskImage": `url("data:image/svg+xml,%3csvg width='200' height='185' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M100 184.606a15.384 15.384 0 0 1-8.653-2.678C53.565 156.28 37.205 138.695 28.182 127.7 8.952 104.264-.254 80.202.005 54.146.308 24.287 24.264 0 53.406 0c21.192 0 35.869 11.937 44.416 21.879a2.884 2.884 0 0 0 4.356 0C110.725 11.927 125.402 0 146.594 0c29.142 0 53.098 24.287 53.4 54.151.26 26.061-8.956 50.122-28.176 73.554-9.023 10.994-25.383 28.58-63.165 54.228a15.384 15.384 0 0 1-8.653 2.673Z' fill='black' fill-rule='nonzero'/%3e%3c/svg%3e")` }, ".mask-hexagon": { "maskImage": `url("data:image/svg+xml,%3csvg width='182' height='201' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M.3 65.486c0-9.196 6.687-20.063 14.211-25.078l61.86-35.946c8.36-5.016 20.899-5.016 29.258 0l61.86 35.946c8.36 5.015 14.211 15.882 14.211 25.078v71.055c0 9.196-6.687 20.063-14.211 25.079l-61.86 35.945c-8.36 4.18-20.899 4.18-29.258 0L14.51 161.62C6.151 157.44.3 145.737.3 136.54V65.486Z' fill='black' fill-rule='nonzero'/%3e%3c/svg%3e")` }, ".mask-hexagon-2": { "maskImage": `url("data:image/svg+xml,%3csvg width='200' height='182' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M64.786 181.4c-9.196 0-20.063-6.687-25.079-14.21L3.762 105.33c-5.016-8.36-5.016-20.9 0-29.259l35.945-61.86C44.723 5.851 55.59 0 64.786 0h71.055c9.196 0 20.063 6.688 25.079 14.211l35.945 61.86c4.18 8.36 4.18 20.899 0 29.258l-35.945 61.86c-4.18 8.36-15.883 14.211-25.079 14.211H64.786Z' fill='black' fill-rule='nonzero'/%3e%3c/svg%3e")` }, ".mask-circle": { "maskImage": `url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3ccircle fill='black' cx='100' cy='100' r='100' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-parallelogram": { "maskImage": `url("data:image/svg+xml,%3csvg width='200' height='154' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M46.154 0H200l-46.154 153.846H0z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-parallelogram-2": { "maskImage": `url("data:image/svg+xml,%3csvg width='200' height='154' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M153.846 0H0l46.154 153.846H200z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-parallelogram-3": { "maskImage": `url("data:image/svg+xml,%3csvg width='154' height='201' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M.077 47.077v153.846l153.846-46.154V.923z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-parallelogram-4": { "maskImage": `url("data:image/svg+xml,%3csvg width='154' height='201' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M153.923 47.077v153.846L.077 154.77V.923z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-pentagon": { "maskImage": `url("data:image/svg+xml,%3csvg width='192' height='181' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 0 95.106 69.098-36.327 111.804H37.22L.894 69.098z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-square": { "maskImage": `url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M0 0h200v200H0z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-star": { "maskImage": `url("data:image/svg+xml,%3csvg width='192' height='180' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 137.263-58.779 42.024 22.163-68.389L.894 68.481l72.476-.243L96 0l22.63 68.238 72.476.243-58.49 42.417 22.163 68.389z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-star-2": { "maskImage": `url("data:image/svg+xml,%3csvg width='192' height='180' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 153.044-58.779 26.243 7.02-63.513L.894 68.481l63.117-13.01L96 0l31.989 55.472 63.117 13.01-43.347 47.292 7.02 63.513z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-triangle": { "maskImage": `url("data:image/svg+xml,%3csvg width='174' height='149' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m87 148.476-86.603.185L43.86 74.423 87 0l43.14 74.423 43.463 74.238z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-triangle-2": { "maskImage": `url("data:image/svg+xml,%3csvg width='174' height='150' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m87 .738 86.603-.184-43.463 74.238L87 149.214 43.86 74.792.397.554z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-triangle-3": { "maskImage": `url("data:image/svg+xml,%3csvg width='150' height='174' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m149.369 87.107.185 86.603-74.239-43.463L.893 87.107l74.422-43.14L149.554.505z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ".mask-triangle-4": { "maskImage": `url("data:image/svg+xml,%3csvg width='150' height='174' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M.631 87.107.446.505l74.239 43.462 74.422 43.14-74.422 43.14L.446 173.71z' fill-rule='evenodd'/%3e%3c/svg%3e")` }, ":where(.menu li:empty)": { "backgroundColor": "hsl(var(--bc) / 0.1)", "margin": "0.5rem 1rem", "height": "1px" }, ".menu :where(li ul):before": { "position": "absolute", "bottom": "0.75rem", "right": "0px", "top": "0.75rem", "width": "1px", "backgroundColor": "hsl(var(--bc) / 0.1)", "content": '""' }, ".menu :where(li:not(.menu-title) > *:not(ul):not(details):not(.menu-title)),\n.menu :where(li:not(.menu-title) > details > summary:not(.menu-title))": { "paddingRight": "1rem", "paddingLeft": "1rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem", "textAlign": "right", "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "200ms", "borderRadius": "var(--rounded-btn, 0.5rem)", "textWrap": "balance" }, ":where(.menu li:not(.menu-title):not(.disabled) > *:not(ul):not(details):not(.menu-title)):not(summary):not(.active).focus,\n  :where(.menu li:not(.menu-title):not(.disabled) > *:not(ul):not(details):not(.menu-title)):not(summary):not(.active):focus,\n  :where(.menu li:not(.menu-title):not(.disabled) > *:not(ul):not(details):not(.menu-title)):is(summary):not(.active):focus-visible,\n  :where(.menu li:not(.menu-title):not(.disabled) > details > summary:not(.menu-title)):not(summary):not(.active).focus,\n  :where(.menu li:not(.menu-title):not(.disabled) > details > summary:not(.menu-title)):not(summary):not(.active):focus,\n  :where(.menu li:not(.menu-title):not(.disabled) > details > summary:not(.menu-title)):is(summary):not(.active):focus-visible": { "cursor": "pointer", "backgroundColor": "hsl(var(--bc) / 0.1)", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "outline": "2px solid transparent", "outlineOffset": "2px" }, ".menu li > *:not(ul):not(.menu-title):not(details):active,\n.menu li > *:not(ul):not(.menu-title):not(details).active,\n.menu li > details > summary:active": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))" }, ".menu :where(li > details > summary)::-webkit-details-marker": { "display": "none" }, ".menu :where(li > details > summary):after,\n.menu :where(li > .menu-dropdown-toggle):after": { "justifySelf": "end", "display": "block", "marginTop": "-0.5rem", "height": "0.5rem", "width": "0.5rem", "transform": "rotate(-45deg)", "transitionProperty": "transform, margin-top", "transitionDuration": "0.3s", "transitionTimingFunction": "cubic-bezier(0.4, 0, 0.2, 1)", "content": '""', "transformOrigin": "25% 75%", "boxShadow": "-2px 2px", "pointerEvents": "none" }, ".menu :where(li > details[open] > summary):after,\n.menu :where(li > .menu-dropdown-toggle.menu-dropdown-show):after": { "transform": "rotate(-225deg)", "marginTop": "0" }, ".menu-title": { "paddingRight": "1rem", "paddingLeft": "1rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem", "fontSize": "0.875rem", "lineHeight": "1.25rem", "fontWeight": "700", "color": "hsl(var(--bc) / 0.4)" }, ".mockup-code:before": { "content": '""', "marginBottom": "1rem", "display": "block", "height": "0.75rem", "width": "0.75rem", "borderRadius": "9999px", "opacity": "0.3", "boxShadow": "-1.4em 0,\n        -2.8em 0,\n        -4.2em 0" }, ".mockup-code pre": { "paddingLeft": "1.25rem" }, ".mockup-code pre:before": { "content": '""', "marginLeft": "2ch" }, ".mockup-window:before": { "content": '""', "marginBottom": "1rem", "display": "block", "aspectRatio": "1 / 1", "height": "0.75rem", "borderRadius": "9999px", "opacity": "0.3", "boxShadow": "-1.4em 0,\n        -2.8em 0,\n        -4.2em 0" }, ".mockup-phone": { "display": "inline-block", "border": "4px solid #444", "borderRadius": "50px", "backgroundColor": "#000", "padding": "10px", "margin": "0 auto", "overflow": "hidden" }, ".mockup-phone .camera": { "position": "relative", "top": "0px", "right": "0px", "background": "#000", "height": "25px", "width": "150px", "margin": "0 auto", "borderBottomRightRadius": "17px", "borderBottomLeftRadius": "17px", "zIndex": "11" }, ".mockup-phone .camera:before": { "content": '""', "position": "absolute", "top": "35%", "right": "50%", "width": "50px", "height": "4px", "borderRadius": "5px", "backgroundColor": "#0c0b0e", "transform": "translate(50%, -50%)" }, ".mockup-phone .camera:after": { "content": '""', "position": "absolute", "top": "20%", "right": "70%", "width": "8px", "height": "8px", "borderRadius": "5px", "backgroundColor": "#0f0b25" }, ".mockup-phone .display": { "overflow": "hidden", "borderRadius": "40px", "marginTop": "-25px" }, ".mockup-browser .mockup-browser-toolbar": { "marginTop": "0.75rem", "marginBottom": "0.75rem", "display": "inline-flex", "width": "100%", "alignItems": "center", "paddingLeft": "1.4em" }, ".mockup-browser .mockup-browser-toolbar:before": { "content": '""', "marginLeft": "4.8rem", "display": "inline-block", "aspectRatio": "1 / 1", "height": "0.75rem", "borderRadius": "9999px", "opacity": "0.3", "boxShadow": "-1.4em 0,\n          -2.8em 0,\n          -4.2em 0" }, ".mockup-browser .mockup-browser-toolbar .input": { "position": "relative", "marginRight": "auto", "marginLeft": "auto", "display": "block", "height": "1.75rem", "width": "24rem", "overflow": "hidden", "textOverflow": "ellipsis", "whiteSpace": "nowrap", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "paddingRight": "2rem" }, ".mockup-browser .mockup-browser-toolbar .input:before": { "content": '""', "position": "absolute", "right": "0.5rem", "top": "50%", "aspectRatio": "1 / 1", "height": "0.75rem", "-TwTranslateY": "-50%", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "borderRadius": "9999px", "borderWidth": "2px", "borderColor": "currentColor", "opacity": "0.6" }, ".mockup-browser .mockup-browser-toolbar .input:after": { "content": '""', "position": "absolute", "right": "1.25rem", "top": "50%", "height": "0.5rem", "-TwTranslateY": "25%", "-TwRotate": "-45deg", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "borderRadius": "9999px", "borderWidth": "1px", "borderColor": "currentColor", "opacity": "0.6" }, ".modal:not(dialog:not(.modal-open)),\n  .modal::backdrop": { "backgroundColor": "rgba(0, 0, 0, 0.3)", "animation": "modal-pop 0.2s ease-out" }, ".modal-backdrop": { "zIndex": "-1", "gridColumnStart": "1", "gridRowStart": "1", "display": "grid", "alignSelf": "stretch", "justifySelf": "stretch", "color": "transparent" }, ".modal-open .modal-box,\n.modal-toggle:checked + .modal .modal-box,\n.modal:target .modal-box,\n.modal[open] .modal-box": { "-TwTranslateY": "0px", "-TwScaleX": "1", "-TwScaleY": "1", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".modal-action > :not([hidden]) ~ :not([hidden])": { "-TwSpaceXReverse": "0", "marginLeft": "calc(0.5rem * var(--tw-space-x-reverse))", "marginRight": "calc(0.5rem * calc(1 - var(--tw-space-x-reverse)))" }, "@keyframes modal-pop": { "0%": { "opacity": "0" } }, ".progress::-moz-progress-bar": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress-primary::-moz-progress-bar": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress-secondary::-moz-progress-bar": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress-accent::-moz-progress-bar": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress-info::-moz-progress-bar": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress-success::-moz-progress-bar": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress-warning::-moz-progress-bar": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress-error::-moz-progress-bar": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress:indeterminate": { "-ProgressColor": "hsl(var(--bc))", "backgroundImage": "repeating-linear-gradient(\n    -90deg,\n    var(--progress-color) -1%,\n    var(--progress-color) 10%,\n    transparent 10%,\n    transparent 90%\n  )", "backgroundSize": "200%", "backgroundPositionX": "85%", "animation": "progress-loading 5s ease-in-out infinite" }, ".progress-primary:indeterminate": { "-ProgressColor": "hsl(var(--p))" }, ".progress-secondary:indeterminate": { "-ProgressColor": "hsl(var(--s))" }, ".progress-accent:indeterminate": { "-ProgressColor": "hsl(var(--a))" }, ".progress-info:indeterminate": { "-ProgressColor": "hsl(var(--in))" }, ".progress-success:indeterminate": { "-ProgressColor": "hsl(var(--su))" }, ".progress-warning:indeterminate": { "-ProgressColor": "hsl(var(--wa))" }, ".progress-error:indeterminate": { "-ProgressColor": "hsl(var(--er))" }, ".progress::-webkit-progress-bar": { "backgroundColor": "transparent", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress::-webkit-progress-value": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)" }, ".progress-primary::-webkit-progress-value": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))" }, ".progress-secondary::-webkit-progress-value": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))" }, ".progress-accent::-webkit-progress-value": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))" }, ".progress-info::-webkit-progress-value": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))" }, ".progress-success::-webkit-progress-value": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))" }, ".progress-warning::-webkit-progress-value": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))" }, ".progress-error::-webkit-progress-value": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))" }, ".progress:indeterminate::-moz-progress-bar": { "backgroundColor": "transparent", "backgroundImage": "repeating-linear-gradient(\n    -90deg,\n    var(--progress-color) -1%,\n    var(--progress-color) 10%,\n    transparent 10%,\n    transparent 90%\n  )", "backgroundSize": "200%", "backgroundPositionX": "85%", "animation": "progress-loading 5s ease-in-out infinite" }, "@keyframes progress-loading": { "50%": { "backgroundPositionX": "215%" } }, ".radio:focus-visible": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 1)" }, '.radio:checked,\n  .radio[aria-checked="true"]': { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--bc) / var(--tw-bg-opacity))", "animation": "radiomark var(--animation-input, 0.2s) ease-out", "boxShadow": "0 0 0 4px hsl(var(--b1)) inset,\n      0 0 0 4px hsl(var(--b1)) inset" }, ".radio-primary": { "-Chkbg": "var(--p)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))" }, ".radio-primary:focus-visible": { "outlineColor": "hsl(var(--p) / 1)" }, '.radio-primary:checked,\n    .radio-primary[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".radio-secondary": { "-Chkbg": "var(--s)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))" }, ".radio-secondary:focus-visible": { "outlineColor": "hsl(var(--s) / 1)" }, '.radio-secondary:checked,\n    .radio-secondary[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" }, ".radio-accent": { "-Chkbg": "var(--a)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))" }, ".radio-accent:focus-visible": { "outlineColor": "hsl(var(--a) / 1)" }, '.radio-accent:checked,\n    .radio-accent[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" }, ".radio-success": { "-Chkbg": "var(--su)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))" }, ".radio-success:focus-visible": { "outlineColor": "hsl(var(--su) / 1)" }, '.radio-success:checked,\n    .radio-success[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" }, ".radio-warning": { "-Chkbg": "var(--wa)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))" }, ".radio-warning:focus-visible": { "outlineColor": "hsl(var(--wa) / 1)" }, '.radio-warning:checked,\n    .radio-warning[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" }, ".radio-info": { "-Chkbg": "var(--in)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))" }, ".radio-info:focus-visible": { "outlineColor": "hsl(var(--in) / 1)" }, '.radio-info:checked,\n    .radio-info[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" }, ".radio-error": { "-Chkbg": "var(--er)", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))" }, ".radio-error:focus-visible": { "outlineColor": "hsl(var(--er) / 1)" }, '.radio-error:checked,\n    .radio-error[aria-checked="true"]': { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" }, ".radio:disabled": { "cursor": "not-allowed", "opacity": "0.2" }, "@keyframes radiomark": { "0%": { "boxShadow": "0 0 0 12px hsl(var(--b1)) inset,\n      0 0 0 12px hsl(var(--b1)) inset" }, "50%": { "boxShadow": "0 0 0 3px hsl(var(--b1)) inset,\n      0 0 0 3px hsl(var(--b1)) inset" }, "100%": { "boxShadow": "0 0 0 4px hsl(var(--b1)) inset,\n      0 0 0 4px hsl(var(--b1)) inset" } }, ".radio-mark": { "display": "none" }, ".range:focus-visible::-webkit-slider-thumb": { "-FocusShadow": "0 0 0 6px hsl(var(--b1)) inset, 0 0 0 2rem hsl(var(--range-shdw)) inset" }, ".range:focus-visible::-moz-range-thumb": { "-FocusShadow": "0 0 0 6px hsl(var(--b1)) inset, 0 0 0 2rem hsl(var(--range-shdw)) inset" }, ".range::-webkit-slider-runnable-track": { "height": "0.5rem", "width": "100%", "backgroundColor": "hsl(var(--bc) / 0.1)", "borderRadius": "var(--rounded-box, 1rem)" }, ".range::-moz-range-track": { "height": "0.5rem", "width": "100%", "backgroundColor": "hsl(var(--bc) / 0.1)", "borderRadius": "var(--rounded-box, 1rem)" }, ".range::-webkit-slider-thumb": { "position": "relative", "height": "1.5rem", "width": "1.5rem", "borderStyle": "none", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)", "appearance": "none", "WebkitAppearance": "none", "top": "50%", "color": "hsl(var(--range-shdw))", "transform": "translateY(-50%)", "-FillerSize": "100rem", "-FillerOffset": "0.6rem", "boxShadow": "0 0 0 3px hsl(var(--range-shdw)) inset,\n      var(--focus-shadow, 0 0),\n      calc(-1*(var(--filler-size) * -1 - var(--filler-offset))) 0 0 var(--filler-size)" }, ".range::-moz-range-thumb": { "position": "relative", "height": "1.5rem", "width": "1.5rem", "borderStyle": "none", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "borderRadius": "var(--rounded-box, 1rem)", "top": "50%", "color": "hsl(var(--range-shdw))", "-FillerSize": "100rem", "-FillerOffset": "0.5rem", "boxShadow": "0 0 0 3px hsl(var(--range-shdw)) inset,\n      var(--focus-shadow, 0 0),\n      calc(-1*(var(--filler-size) * -1 - var(--filler-offset))) 0 0 var(--filler-size)" }, ".range-primary": { "-RangeShdw": "var(--p)" }, ".range-secondary": { "-RangeShdw": "var(--s)" }, ".range-accent": { "-RangeShdw": "var(--a)" }, ".range-success": { "-RangeShdw": "var(--su)" }, ".range-warning": { "-RangeShdw": "var(--wa)" }, ".range-info": { "-RangeShdw": "var(--in)" }, ".range-error": { "-RangeShdw": "var(--er)" }, ".rating input": { "appearance": "none", "WebkitAppearance": "none" }, ".rating .rating-hidden": { "width": "0.5rem", "backgroundColor": "transparent" }, '.rating input:checked ~ input,\n  .rating input[aria-checked="true"] ~ input': { "-TwBgOpacity": "0.2" }, ".rating input:focus-visible": { "transitionProperty": "transform", "transitionTimingFunction": ["cubic-bezier(0.4, 0, 0.2, 1)", "cubic-bezier(0, 0, 0.2, 1)"], "transitionDuration": "300ms", "transform": "translateY(-0.125em)" }, ".rating input:active:focus": { "animation": "none", "transform": "translateY(-0.125em)" }, ".rating-half :where(input:not(.rating-hidden))": { "width": "0.75rem" }, "@keyframes rating-pop": { "0%": { "transform": "translateY(-0.125em)" }, "40%": { "transform": "translateY(-0.125em)" }, "100%": { "transform": "translateY(0)" } }, ".select-bordered": { "-TwBorderOpacity": "0.2" }, ".select:focus": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 0.2)" }, ".select-ghost": { "-TwBgOpacity": "0.05" }, ".select-ghost:focus": { "-TwBgOpacity": "1", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))" }, ".select-primary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))" }, ".select-primary:focus": { "outlineColor": "hsl(var(--p) / 1)" }, ".select-secondary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))" }, ".select-secondary:focus": { "outlineColor": "hsl(var(--s) / 1)" }, ".select-accent": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))" }, ".select-accent:focus": { "outlineColor": "hsl(var(--a) / 1)" }, ".select-info": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))" }, ".select-info:focus": { "outlineColor": "hsl(var(--in) / 1)" }, ".select-success": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))" }, ".select-success:focus": { "outlineColor": "hsl(var(--su) / 1)" }, ".select-warning": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))" }, ".select-warning:focus": { "outlineColor": "hsl(var(--wa) / 1)" }, ".select-error": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))" }, ".select-error:focus": { "outlineColor": "hsl(var(--er) / 1)" }, ".select-disabled,\n  .select:disabled,\n  .select[disabled]": { "cursor": "not-allowed", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "-TwTextOpacity": "0.2" }, ".select-disabled::placeholder,\n  .select:disabled::placeholder,\n  .select[disabled]::placeholder": { "color": "hsl(var(--bc) / var(--tw-placeholder-opacity))", "-TwPlaceholderOpacity": "0.2" }, '.select-multiple,\n  .select[multiple],\n  .select[size].select:not([size="1"])': { "backgroundImage": "none", "paddingLeft": "1rem" }, '[dir="rtl"] .select': { "backgroundPosition": "calc(100% - (0% + 12px)) calc(1px + 50%),\n    calc(100% - (0% + 16px)) calc(1px + 50%)" }, ":where(.stats) > :not([hidden]) ~ :not([hidden])": { "-TwDivideXReverse": "0", "borderLeftWidth": "calc(1px * var(--tw-divide-x-reverse))", "borderRightWidth": "calc(1px * calc(1 - var(--tw-divide-x-reverse)))", "-TwDivideYReverse": "0", "borderTopWidth": "calc(0px * calc(1 - var(--tw-divide-y-reverse)))", "borderBottomWidth": "calc(0px * var(--tw-divide-y-reverse))" }, ".steps .step:before": { "top": "0px", "gridColumnStart": "1", "gridRowStart": "1", "height": "0.5rem", "width": "100%", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "content": '""', "marginRight": "-100%" }, ".steps .step:after": { "content": "counter(step)", "counterIncrement": "step", "zIndex": "1", "position": "relative", "gridColumnStart": "1", "gridRowStart": "1", "display": "grid", "height": "2rem", "width": "2rem", "placeItems": "center", "placeSelf": "center", "borderRadius": "9999px", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))" }, ".steps .step:first-child:before": { "content": "none" }, ".steps .step[data-content]:after": { "content": "attr(data-content)" }, ".steps .step-neutral + .step-neutral:before,\n  .steps .step-neutral:after": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--n) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--nc) / var(--tw-text-opacity))" }, ".steps .step-primary + .step-primary:before,\n  .steps .step-primary:after": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".steps .step-secondary + .step-secondary:before,\n  .steps .step-secondary:after": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" }, ".steps .step-accent + .step-accent:before,\n  .steps .step-accent:after": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" }, ".steps .step-info + .step-info:before": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))" }, ".steps .step-info:after": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" }, ".steps .step-success + .step-success:before": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))" }, ".steps .step-success:after": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" }, ".steps .step-warning + .step-warning:before": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))" }, ".steps .step-warning:after": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" }, ".steps .step-error + .step-error:before": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))" }, ".steps .step-error:after": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" }, ".swap-rotate .swap-on,\n.swap-rotate .swap-indeterminate,\n.swap-rotate input:indeterminate ~ .swap-on": { "-TwRotate": "45deg", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".swap-rotate input:checked ~ .swap-off,\n.swap-active:where(.swap-rotate) .swap-off,\n.swap-rotate input:indeterminate ~ .swap-off": { "-TwRotate": "-45deg", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".swap-rotate input:checked ~ .swap-on,\n.swap-active:where(.swap-rotate) .swap-on,\n.swap-rotate input:indeterminate ~ .swap-indeterminate": { "-TwRotate": "0deg", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".swap-flip": { "transformStyle": "preserve-3d", "perspective": "16em" }, ".swap-flip .swap-on,\n.swap-flip .swap-indeterminate,\n.swap-flip input:indeterminate ~ .swap-on": { "transform": "rotateY(-180deg)", "backfaceVisibility": "hidden", "opacity": "1" }, ".swap-flip input:checked ~ .swap-off,\n.swap-active:where(.swap-flip) .swap-off,\n.swap-flip input:indeterminate ~ .swap-off": { "transform": "rotateY(180deg)", "backfaceVisibility": "hidden", "opacity": "1" }, ".swap-flip input:checked ~ .swap-on,\n.swap-active:where(.swap-flip) .swap-on,\n.swap-flip input:indeterminate ~ .swap-indeterminate": { "transform": "rotateY(0deg)" }, ".tab.tab-active:not(.tab-disabled):not([disabled])": { "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "1", "-TwTextOpacity": "1" }, ".tab:focus": { "outline": "2px solid transparent", "outlineOffset": "2px" }, ".tab:focus-visible": { "outline": "2px solid currentColor", "outlineOffset": "-3px" }, ".tab:focus-visible.tab-lifted": { "borderBottomLeftRadius": "var(--tab-radius, 0.5rem)", "borderBottomRightRadius": "var(--tab-radius, 0.5rem)" }, ".tab-disabled,\n  .tab[disabled]": { "cursor": "not-allowed", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "-TwTextOpacity": "0.2" }, ".tab-bordered": { "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.2", "borderStyle": "solid", "borderBottomWidth": "calc(var(--tab-border, 1px) + 1px)" }, ".tab-lifted": { "border": "var(--tab-border, 1px) solid transparent", "borderWidth": "0 0 var(--tab-border, 1px) 0", "borderTopRightRadius": "var(--tab-radius, 0.5rem)", "borderTopLeftRadius": "var(--tab-radius, 0.5rem)", "borderBottomColor": "var(--tab-border-color)", "paddingRight": "var(--tab-padding, 1rem)", "paddingLeft": "var(--tab-padding, 1rem)", "paddingTop": "var(--tab-border, 1px)" }, ".tab-lifted.tab-active:not(.tab-disabled):not([disabled])": { "backgroundColor": "var(--tab-bg)", "borderWidth": "var(--tab-border, 1px) var(--tab-border, 1px) 0 var(--tab-border, 1px)", "borderRightColor": "var(--tab-border-color)", "borderLeftColor": "var(--tab-border-color)", "borderTopColor": "var(--tab-border-color)", "paddingRight": "calc(var(--tab-padding, 1rem) - var(--tab-border, 1px))", "paddingLeft": "calc(var(--tab-padding, 1rem) - var(--tab-border, 1px))", "paddingBottom": "var(--tab-border, 1px)", "paddingTop": "0" }, ".tab-lifted.tab-active:not(.tab-disabled):not([disabled]):before,\n    .tab-lifted.tab-active:not(.tab-disabled):not([disabled]):after": { "zIndex": "1", "content": '""', "display": "block", "position": "absolute", "width": "var(--tab-radius, 0.5rem)", "height": "var(--tab-radius, 0.5rem)", "bottom": "0", "-TabGrad": "calc(68% - var(--tab-border, 1px))", "-TabCornerBg": "radial-gradient(\n        circle at var(--circle-pos),\n        transparent var(--tab-grad),\n        var(--tab-border-color) calc(var(--tab-grad) + 0.3px),\n        var(--tab-border-color) calc(var(--tab-grad) + var(--tab-border, 1px)),\n        var(--tab-bg) calc(var(--tab-grad) + var(--tab-border, 1px) + 0.3px)\n      )" }, ".tab-lifted.tab-active:not(.tab-disabled):not([disabled]):before": { "right": "calc(var(--tab-radius, 0.5rem) * -1)", "-CirclePos": "top left", "backgroundImage": "var(--tab-corner-bg)" }, '[dir="rtl"] .tab-lifted.tab-active:not(.tab-disabled):not([disabled]):before': { "-CirclePos": "top right" }, ".tab-lifted.tab-active:not(.tab-disabled):not([disabled]):after": { "left": "calc(var(--tab-radius, 0.5rem) * -1)", "-CirclePos": "top right", "backgroundImage": "var(--tab-corner-bg)" }, '[dir="rtl"] .tab-lifted.tab-active:not(.tab-disabled):not([disabled]):after': { "-CirclePos": "top left" }, ".tab-lifted.tab-active:not(.tab-disabled):not([disabled]):first-child:before": { "background": "none" }, ".tab-lifted.tab-active:not(.tab-disabled):not([disabled]):last-child:after": { "background": "none" }, ".tab-lifted.tab-active:not(.tab-disabled):not([disabled])\n  + .tab-lifted.tab-active:not(.tab-disabled):not([disabled]):before": { "background": "none" }, ".tabs-boxed": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "padding": "0.25rem", "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".tabs-boxed .tab": { "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".tabs-boxed .tab-active:not(.tab-disabled):not([disabled])": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".table :where(th, td)": { "paddingRight": "1rem", "paddingLeft": "1rem", "paddingTop": "0.75rem", "paddingBottom": "0.75rem", "verticalAlign": "middle" }, ".table tr.active,\n  .table tr.active:nth-child(even),\n  .table-zebra tbody tr:nth-child(even)": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))" }, ".table-zebra tr.active,\n    .table-zebra tr.active:nth-child(even),\n    .table-zebra-zebra tbody tr:nth-child(even)": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))" }, ".table :where(thead, tbody) :where(tr:not(:last-child)),\n    .table :where(thead, tbody) :where(tr:first-child:last-child)": { "borderBottomWidth": "1px", "-TwBorderOpacity": "1", "borderBottomColor": "hsl(var(--b2) / var(--tw-border-opacity))" }, ".table :where(thead, tfoot)": { "whiteSpace": "nowrap", "fontSize": "0.75rem", "lineHeight": "1rem", "fontWeight": "700", "color": "hsl(var(--bc) / 0.6)" }, ".textarea-bordered": { "-TwBorderOpacity": "0.2" }, ".textarea:focus": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 0.2)" }, ".textarea-ghost": { "-TwBgOpacity": "0.05" }, ".textarea-ghost:focus": { "-TwBgOpacity": "1", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "boxShadow": "none" }, ".textarea-primary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--p) / var(--tw-border-opacity))" }, ".textarea-primary:focus": { "outlineColor": "hsl(var(--p) / 1)" }, ".textarea-secondary": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--s) / var(--tw-border-opacity))" }, ".textarea-secondary:focus": { "outlineColor": "hsl(var(--s) / 1)" }, ".textarea-accent": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--a) / var(--tw-border-opacity))" }, ".textarea-accent:focus": { "outlineColor": "hsl(var(--a) / 1)" }, ".textarea-info": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--in) / var(--tw-border-opacity))" }, ".textarea-info:focus": { "outlineColor": "hsl(var(--in) / 1)" }, ".textarea-success": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--su) / var(--tw-border-opacity))" }, ".textarea-success:focus": { "outlineColor": "hsl(var(--su) / 1)" }, ".textarea-warning": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))" }, ".textarea-warning:focus": { "outlineColor": "hsl(var(--wa) / 1)" }, ".textarea-error": { "-TwBorderOpacity": "1", "borderColor": "hsl(var(--er) / var(--tw-border-opacity))" }, ".textarea-error:focus": { "outlineColor": "hsl(var(--er) / 1)" }, ".textarea-disabled,\n  .textarea:disabled,\n  .textarea[disabled]": { "cursor": "not-allowed", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--b2) / var(--tw-border-opacity))", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b2) / var(--tw-bg-opacity))", "-TwTextOpacity": "0.2" }, ".textarea-disabled::placeholder,\n  .textarea:disabled::placeholder,\n  .textarea[disabled]::placeholder": { "color": "hsl(var(--bc) / var(--tw-placeholder-opacity))", "-TwPlaceholderOpacity": "0.2" }, ".toast > *": { "animation": "toast-pop 0.25s ease-out" }, "@keyframes toast-pop": { "0%": { "transform": "scale(0.9)", "opacity": "0" }, "100%": { "transform": "scale(1)", "opacity": "1" } }, '[dir="rtl"] .toggle': { "-Handleoffsetcalculator": "calc(var(--handleoffset) * 1)" }, ".toggle:focus-visible": { "outlineStyle": "solid", "outlineWidth": "2px", "outlineOffset": "2px", "outlineColor": "hsl(var(--bc) / 0.2)" }, '.toggle:checked,\n  .toggle[checked="true"],\n  .toggle[aria-checked="true"]': { "-Handleoffsetcalculator": "var(--handleoffset)", "-TwBorderOpacity": "1", "-TwBgOpacity": "1" }, '[dir="rtl"] .toggle:checked, [dir="rtl"] .toggle[checked="true"], [dir="rtl"] .toggle[aria-checked="true"]': { "-Handleoffsetcalculator": "calc(var(--handleoffset) * -1)" }, ".toggle:indeterminate": { "-TwBorderOpacity": "1", "-TwBgOpacity": "1", "boxShadow": "calc(-1*(var(--handleoffset) / 2)) 0 0 2px var(--tglbg) inset,\n      calc(-1*(var(--handleoffset) / -2)) 0 0 2px var(--tglbg) inset,\n      0 0 0 2px var(--tglbg) inset" }, '[dir="rtl"] .toggle:indeterminate': { "boxShadow": "calc(-1*(var(--handleoffset) / 2)) 0 0 2px var(--tglbg) inset,\n        calc(-1*(var(--handleoffset) / -2)) 0 0 2px var(--tglbg) inset,\n        0 0 0 2px var(--tglbg) inset" }, ".toggle-primary:focus-visible": { "outlineColor": "hsl(var(--p) / 1)" }, '.toggle-primary:checked,\n    .toggle-primary[checked="true"],\n    .toggle-primary[aria-checked="true"]': { "borderColor": "hsl(var(--p) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--p) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--pc) / var(--tw-text-opacity))" }, ".toggle-secondary:focus-visible": { "outlineColor": "hsl(var(--s) / 1)" }, '.toggle-secondary:checked,\n    .toggle-secondary[checked="true"],\n    .toggle-secondary[aria-checked="true"]': { "borderColor": "hsl(var(--s) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--s) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--sc) / var(--tw-text-opacity))" }, ".toggle-accent:focus-visible": { "outlineColor": "hsl(var(--a) / 1)" }, '.toggle-accent:checked,\n    .toggle-accent[checked="true"],\n    .toggle-accent[aria-checked="true"]': { "borderColor": "hsl(var(--a) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--a) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--ac) / var(--tw-text-opacity))" }, ".toggle-success:focus-visible": { "outlineColor": "hsl(var(--su) / 1)" }, '.toggle-success:checked,\n    .toggle-success[checked="true"],\n    .toggle-success[aria-checked="true"]': { "borderColor": "hsl(var(--su) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--suc) / var(--tw-text-opacity))" }, ".toggle-warning:focus-visible": { "outlineColor": "hsl(var(--wa) / 1)" }, '.toggle-warning:checked,\n    .toggle-warning[checked="true"],\n    .toggle-warning[aria-checked="true"]': { "borderColor": "hsl(var(--wa) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--wa) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--wac) / var(--tw-text-opacity))" }, ".toggle-info:focus-visible": { "outlineColor": "hsl(var(--in) / 1)" }, '.toggle-info:checked,\n    .toggle-info[checked="true"],\n    .toggle-info[aria-checked="true"]': { "borderColor": "hsl(var(--in) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--in) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--inc) / var(--tw-text-opacity))" }, ".toggle-error:focus-visible": { "outlineColor": "hsl(var(--er) / 1)" }, '.toggle-error:checked,\n    .toggle-error[checked="true"],\n    .toggle-error[aria-checked="true"]': { "borderColor": "hsl(var(--er) / var(--tw-border-opacity))", "-TwBorderOpacity": "0.1", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--er) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--erc) / var(--tw-text-opacity))" }, ".toggle:disabled": { "cursor": "not-allowed", "-TwBorderOpacity": "1", "borderColor": "hsl(var(--bc) / var(--tw-border-opacity))", "backgroundColor": "transparent", "opacity": "0.3", "-Togglehandleborder": "0 0 0 3px hsl(var(--bc)) inset,\n      var(--handleoffsetcalculator) 0 0 3px hsl(var(--bc)) inset" }, ".toggle-mark": { "display": "none" }, ":root .prose": { "-TwProseBody": "hsl(var(--bc) / 0.8)", "-TwProseHeadings": "hsl(var(--bc))", "-TwProseLead": "hsl(var(--bc))", "-TwProseLinks": "hsl(var(--bc))", "-TwProseBold": "hsl(var(--bc))", "-TwProseCounters": "hsl(var(--bc))", "-TwProseBullets": "hsl(var(--bc) / 0.5)", "-TwProseHr": "hsl(var(--bc) / 0.2)", "-TwProseQuotes": "hsl(var(--bc))", "-TwProseQuoteBorders": "hsl(var(--bc) / 0.2)", "-TwProseCaptions": "hsl(var(--bc) / 0.5)", "-TwProseCode": "hsl(var(--bc))", "-TwProsePreCode": "hsl(var(--nc))", "-TwProsePreBg": "hsl(var(--n))", "-TwProseThBorders": "hsl(var(--bc) / 0.5)", "-TwProseTdBorders": "hsl(var(--bc) / 0.2)" }, '.prose :where(code):not(:where([class~="not-prose"] *))': { "padding": "2px 8px", "borderRadius": "var(--rounded-badge)" }, ".prose code:after,\n  .prose code:before": { "content": "none" }, ".prose pre code": { "borderRadius": "0", "padding": "0" }, '.prose :where(tbody tr, thead):not(:where([class~="not-prose"] *))': { "borderBottomColor": "hsl(var(--bc) / 20%)" } };
  }
});

// node_modules/daisyui/dist/utilities-unstyled.js
var require_utilities_unstyled = __commonJS({
  "node_modules/daisyui/dist/utilities-unstyled.js"(exports, module) {
    module.exports = { ".artboard-demo": { "display": "flex", "flex": "none", "flexDirection": "column", "alignItems": "center", "justifyContent": "center" }, ".artboard.phone": { "width": "320px" }, ".artboard.phone-1": { "width": "320px", "height": "568px" }, ".artboard.phone-1.horizontal,\n      .artboard.phone-1.artboard-horizontal": { "width": "568px", "height": "320px" }, ".artboard.phone-2": { "width": "375px", "height": "667px" }, ".artboard.phone-2.horizontal,\n      .artboard.phone-2.artboard-horizontal": { "width": "667px", "height": "375px" }, ".artboard.phone-3": { "width": "414px", "height": "736px" }, ".artboard.phone-3.horizontal,\n      .artboard.phone-3.artboard-horizontal": { "width": "736px", "height": "414px" }, ".artboard.phone-4": { "width": "375px", "height": "812px" }, ".artboard.phone-4.horizontal,\n      .artboard.phone-4.artboard-horizontal": { "width": "812px", "height": "375px" }, ".artboard.phone-5": { "width": "414px", "height": "896px" }, ".artboard.phone-5.horizontal,\n      .artboard.phone-5.artboard-horizontal": { "width": "896px", "height": "414px" }, ".artboard.phone-6": { "width": "320px", "height": "1024px" }, ".artboard.phone-6.horizontal,\n      .artboard.phone-6.artboard-horizontal": { "width": "1024px", "height": "320px" }, ".badge-xs": { "height": "0.75rem", "fontSize": "0.75rem", "lineHeight": ".75rem", "paddingLeft": "0.313rem", "paddingRight": "0.313rem" }, ".badge-sm": { "height": "1rem", "fontSize": "0.75rem", "lineHeight": "1rem", "paddingLeft": "0.438rem", "paddingRight": "0.438rem" }, ".badge-md": { "height": "1.25rem", "fontSize": "0.875rem", "lineHeight": "1.25rem", "paddingLeft": "0.563rem", "paddingRight": "0.563rem" }, ".badge-lg": { "height": "1.5rem", "fontSize": "1rem", "lineHeight": "1.5rem", "paddingLeft": "0.688rem", "paddingRight": "0.688rem" }, ".btm-nav-xs": { "height": "2.5rem" }, ".btm-nav-xs > *:where(.active)": { "borderTopWidth": "1px" }, ".btm-nav-xs .btm-nav-label": { "fontSize": "0.75rem", "lineHeight": "1rem" }, ".btm-nav-sm": { "height": "3rem" }, ".btm-nav-sm > *:where(.active)": { "borderTopWidth": "2px" }, ".btm-nav-sm .btm-nav-label": { "fontSize": "0.75rem", "lineHeight": "1rem" }, ".btm-nav-md": { "height": "4rem" }, ".btm-nav-md > *:where(.active)": { "borderTopWidth": "2px" }, ".btm-nav-md .btm-nav-label": { "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".btm-nav-lg": { "height": "5rem" }, ".btm-nav-lg > *:where(.active)": { "borderTopWidth": "4px" }, ".btm-nav-lg .btm-nav-label": { "fontSize": "1rem", "lineHeight": "1.5rem" }, ".btn-xs": { "height": "1.5rem", "paddingLeft": "0.5rem", "paddingRight": "0.5rem", "minHeight": "1.5rem", "fontSize": "0.75rem" }, ".btn-sm": { "height": "2rem", "paddingLeft": "0.75rem", "paddingRight": "0.75rem", "minHeight": "2rem", "fontSize": "0.875rem" }, ".btn-md": { "height": "3rem", "paddingLeft": "1rem", "paddingRight": "1rem", "minHeight": "3rem", "fontSize": "0.875rem" }, ".btn-lg": { "height": "4rem", "paddingLeft": "1.5rem", "paddingRight": "1.5rem", "minHeight": "4rem", "fontSize": "1.125rem" }, ".btn-wide": { "width": "16rem" }, ".btn-block": { "width": "100%" }, ".btn-square:where(.btn-xs)": { "height": "1.5rem", "width": "1.5rem", "padding": "0px" }, ".btn-square:where(.btn-sm)": { "height": "2rem", "width": "2rem", "padding": "0px" }, ".btn-square:where(.btn-md)": { "height": "3rem", "width": "3rem", "padding": "0px" }, ".btn-square:where(.btn-lg)": { "height": "4rem", "width": "4rem", "padding": "0px" }, ".btn-circle:where(.btn-xs)": { "height": "1.5rem", "width": "1.5rem", "borderRadius": "9999px", "padding": "0px" }, ".btn-circle:where(.btn-sm)": { "height": "2rem", "width": "2rem", "borderRadius": "9999px", "padding": "0px" }, ".btn-circle:where(.btn-md)": { "height": "3rem", "width": "3rem", "borderRadius": "9999px", "padding": "0px" }, ".btn-circle:where(.btn-lg)": { "height": "4rem", "width": "4rem", "borderRadius": "9999px", "padding": "0px" }, ".btn-group-horizontal": { "flexDirection": "row" }, ".btn-group-vertical": { "flexDirection": "column" }, ".card-side": { "alignItems": "stretch", "flexDirection": "row" }, ".card-side :where(figure:first-child)": { "overflow": "hidden", "borderStartStartRadius": "inherit", "borderStartEndRadius": "unset", "borderEndStartRadius": "inherit", "borderEndEndRadius": "unset" }, ".card-side :where(figure:last-child)": { "overflow": "hidden", "borderStartStartRadius": "unset", "borderStartEndRadius": "inherit", "borderEndStartRadius": "unset", "borderEndEndRadius": "inherit" }, ".card-side figure > *": { "maxWidth": "unset" }, ":where(.card-side figure > *)": { "width": "100%", "height": "100%", "objectFit": "cover" }, ".checkbox-xs": { "height": "1rem", "width": "1rem" }, ".checkbox-sm": { "height": "1.25rem", "width": "1.25rem" }, ".checkbox-md": { "height": "1.5rem", "width": "1.5rem" }, ".checkbox-lg": { "height": "2rem", "width": "2rem" }, ".divider-horizontal": { "flexDirection": "column" }, ".divider-horizontal:before": { "height": "100%", "width": "0.125rem" }, ".divider-horizontal:after": { "height": "100%", "width": "0.125rem" }, ".divider-vertical": { "flexDirection": "row" }, ".divider-vertical:before": { "height": "0.125rem", "width": "100%" }, ".divider-vertical:after": { "height": "0.125rem", "width": "100%" }, ".drawer-open > .drawer-toggle": { "display": "none" }, ".drawer-open > .drawer-toggle ~ .drawer-side": { "pointerEvents": "auto", "visibility": "visible", "position": "sticky", "display": "block", "width": "auto", "overscrollBehavior": "auto" }, ".drawer-open > .drawer-toggle ~ .drawer-side > *:not(.drawer-overlay)": { "transform": "translateX(0%)" }, '[dir="rtl"] .drawer-open > .drawer-toggle ~ .drawer-side > *:not(.drawer-overlay)': { "transform": "translateX(0%)" }, ".drawer-open > .drawer-toggle:checked ~ .drawer-side": { "pointerEvents": "auto", "visibility": "visible" }, ".file-input-xs": { "height": "1.5rem", "paddingRight": "0.5rem", "fontSize": "0.75rem", "lineHeight": ["1rem", "1.625"] }, ".file-input-xs::file-selector-button": { "marginRight": "0.5rem", "fontSize": "0.75rem" }, ".file-input-sm": { "height": "2rem", "paddingRight": "0.75rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"] }, ".file-input-sm::file-selector-button": { "marginRight": "0.75rem", "fontSize": "0.875rem" }, ".file-input-md": { "height": "3rem", "paddingRight": "1rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"] }, ".file-input-md::file-selector-button": { "marginRight": "1rem", "fontSize": "0.875rem" }, ".file-input-lg": { "height": "4rem", "paddingRight": "1.5rem", "fontSize": "1.125rem", "lineHeight": ["1.75rem", "2"] }, ".file-input-lg::file-selector-button": { "marginRight": "1.5rem", "fontSize": "1.125rem" }, ".indicator :where(.indicator-item)": { "bottom": "auto", "left": "auto", "right": "0px", "top": "0px", "-TwTranslateY": "-50%", "-TwTranslateX": "50%", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".indicator :where(.indicator-item.indicator-start)": { "left": "0px", "right": "auto", "-TwTranslateX": "-50%", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".indicator :where(.indicator-item.indicator-center)": { "left": "50%", "right": "50%", "-TwTranslateX": "-50%", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".indicator :where(.indicator-item.indicator-end)": { "left": "auto", "right": "0px", "-TwTranslateX": "50%", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".indicator :where(.indicator-item.indicator-bottom)": { "bottom": "0px", "top": "auto", "-TwTranslateY": "50%", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".indicator :where(.indicator-item.indicator-middle)": { "bottom": "50%", "top": "50%", "-TwTranslateY": "-50%", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".indicator :where(.indicator-item.indicator-top)": { "bottom": "auto", "top": "0px", "-TwTranslateY": "-50%", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".input-xs": { "height": "1.5rem", "paddingLeft": "0.5rem", "paddingRight": "0.5rem", "fontSize": "0.75rem", "lineHeight": ["1rem", "1.625"] }, ".input-md": { "height": "3rem", "paddingLeft": "1rem", "paddingRight": "1rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"] }, ".input-lg": { "height": "4rem", "paddingLeft": "1.5rem", "paddingRight": "1.5rem", "fontSize": "1.125rem", "lineHeight": ["1.75rem", "2"] }, ".input-sm": { "height": "2rem", "paddingLeft": "0.75rem", "paddingRight": "0.75rem", "fontSize": "0.875rem", "lineHeight": "2rem" }, ".join.join-vertical": { "flexDirection": "column" }, ".join.join-vertical .join-item:first-child:not(:last-child),\n  .join.join-vertical *:first-child:not(:last-child) .join-item": { "borderBottomLeftRadius": "0", "borderBottomRightRadius": "0", "borderTopLeftRadius": "inherit", "borderTopRightRadius": "inherit" }, ".join.join-vertical .join-item:last-child:not(:first-child),\n  .join.join-vertical *:last-child:not(:first-child) .join-item": { "borderTopLeftRadius": "0", "borderTopRightRadius": "0", "borderBottomLeftRadius": "inherit", "borderBottomRightRadius": "inherit" }, ".join.join-horizontal": { "flexDirection": "row" }, ".join.join-horizontal .join-item:first-child:not(:last-child),\n  .join.join-horizontal *:first-child:not(:last-child) .join-item": { "borderBottomRightRadius": "0", "borderTopRightRadius": "0", "borderBottomLeftRadius": "inherit", "borderTopLeftRadius": "inherit" }, ".join.join-horizontal .join-item:last-child:not(:first-child),\n  .join.join-horizontal *:last-child:not(:first-child) .join-item": { "borderBottomLeftRadius": "0", "borderTopLeftRadius": "0", "borderBottomRightRadius": "inherit", "borderTopRightRadius": "inherit" }, ".kbd-xs": { "paddingLeft": "0.25rem", "paddingRight": "0.25rem", "fontSize": "0.75rem", "lineHeight": "1rem", "minHeight": "1.2em", "minWidth": "1.2em" }, ".kbd-sm": { "paddingLeft": "0.25rem", "paddingRight": "0.25rem", "fontSize": "0.875rem", "lineHeight": "1.25rem", "minHeight": "1.6em", "minWidth": "1.6em" }, ".kbd-md": { "paddingLeft": "0.5rem", "paddingRight": "0.5rem", "fontSize": "1rem", "lineHeight": "1.5rem", "minHeight": "2.2em", "minWidth": "2.2em" }, ".kbd-lg": { "paddingLeft": "1rem", "paddingRight": "1rem", "fontSize": "1.125rem", "lineHeight": "1.75rem", "minHeight": "2.5em", "minWidth": "2.5em" }, ".menu-horizontal": { "display": "inline-flex", "flexDirection": "row" }, ".menu-horizontal > li:not(.menu-title) > details > ul": { "position": "absolute" }, ".menu-vertical": { "display": "flex", "flexDirection": "column" }, ".menu-vertical > li:not(.menu-title) > details > ul": { "position": "relative" }, ".modal-top": { "placeItems": "start" }, ".modal-middle": { "placeItems": "center" }, ".modal-bottom": { "placeItems": "end" }, ".radio-xs": { "height": "1rem", "width": "1rem" }, ".radio-sm": { "height": "1.25rem", "width": "1.25rem" }, ".radio-md": { "height": "1.5rem", "width": "1.5rem" }, ".radio-lg": { "height": "2rem", "width": "2rem" }, ".range-xs": { "height": "1rem" }, ".range-xs::-webkit-slider-runnable-track": { "height": "0.25rem" }, ".range-xs::-moz-range-track": { "height": "0.25rem" }, ".range-xs::-webkit-slider-thumb": { "height": "1rem", "width": "1rem", "-FillerOffset": "0.4rem" }, ".range-xs::-moz-range-thumb": { "height": "1rem", "width": "1rem", "-FillerOffset": "0.4rem" }, ".range-sm": { "height": "1.25rem" }, ".range-sm::-webkit-slider-runnable-track": { "height": "0.25rem" }, ".range-sm::-moz-range-track": { "height": "0.25rem" }, ".range-sm::-webkit-slider-thumb": { "height": "1.25rem", "width": "1.25rem", "-FillerOffset": "0.5rem" }, ".range-sm::-moz-range-thumb": { "height": "1.25rem", "width": "1.25rem", "-FillerOffset": "0.5rem" }, ".range-md": { "height": "1.5rem" }, ".range-md::-webkit-slider-runnable-track": { "height": "0.5rem" }, ".range-md::-moz-range-track": { "height": "0.5rem" }, ".range-md::-webkit-slider-thumb": { "height": "1.5rem", "width": "1.5rem", "-FillerOffset": "0.6rem" }, ".range-md::-moz-range-thumb": { "height": "1.5rem", "width": "1.5rem", "-FillerOffset": "0.6rem" }, ".range-lg": { "height": "2rem" }, ".range-lg::-webkit-slider-runnable-track": { "height": "1rem" }, ".range-lg::-moz-range-track": { "height": "1rem" }, ".range-lg::-webkit-slider-thumb": { "height": "2rem", "width": "2rem", "-FillerOffset": "1rem" }, ".range-lg::-moz-range-thumb": { "height": "2rem", "width": "2rem", "-FillerOffset": "1rem" }, ".rating-xs input": { "height": "0.75rem", "width": "0.75rem" }, ".rating-sm input": { "height": "1rem", "width": "1rem" }, ".rating-md input": { "height": "1.5rem", "width": "1.5rem" }, ".rating-lg input": { "height": "2.5rem", "width": "2.5rem" }, ".rating-half.rating-xs input:not(.rating-hidden)": { "width": "0.375rem" }, ".rating-half.rating-sm input:not(.rating-hidden)": { "width": "0.5rem" }, ".rating-half.rating-md input:not(.rating-hidden)": { "width": "0.75rem" }, ".rating-half.rating-lg input:not(.rating-hidden)": { "width": "1.25rem" }, ".select-md": { "height": "3rem", "paddingLeft": "1rem", "paddingRight": "2.5rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"], "minHeight": "3rem" }, '[dir="rtl"] .select-md': { "paddingLeft": "2.5rem", "paddingRight": "1rem" }, ".select-lg": { "height": "4rem", "paddingLeft": "1.5rem", "paddingRight": "2rem", "fontSize": "1.125rem", "lineHeight": ["1.75rem", "2"], "minHeight": "4rem" }, '[dir="rtl"] .select-lg': { "paddingLeft": "2rem", "paddingRight": "1.5rem" }, ".select-sm": { "height": "2rem", "paddingLeft": "0.75rem", "paddingRight": "2rem", "fontSize": "0.875rem", "lineHeight": "2rem", "minHeight": "2rem" }, '[dir="rtl"] .select-sm': { "paddingLeft": "2rem", "paddingRight": "0.75rem" }, ".select-xs": { "height": "1.5rem", "paddingLeft": "0.5rem", "paddingRight": "2rem", "fontSize": "0.75rem", "lineHeight": ["1rem", "1.625"], "minHeight": "1.5rem" }, '[dir="rtl"] .select-xs': { "paddingLeft": "2rem", "paddingRight": "0.5rem" }, ".stats-horizontal": { "gridAutoFlow": "column" }, ".stats-vertical": { "gridAutoFlow": "row" }, ".steps-horizontal": { "gridAutoColumns": "1fr", "display": "inline-grid", "gridAutoFlow": "column", "overflow": "hidden", "overflowX": "auto" }, ".steps-horizontal .step": { "display": "grid", "gridTemplateColumns": "repeat(1, minmax(0, 1fr))", "gridTemplateRows": "repeat(2, minmax(0, 1fr))", "placeItems": "center", "textAlign": "center" }, ".steps-vertical": { "gridAutoRows": "1fr", "gridAutoFlow": "row" }, ".steps-vertical .step": { "display": "grid", "gridTemplateColumns": "repeat(2, minmax(0, 1fr))", "gridTemplateRows": "repeat(1, minmax(0, 1fr))" }, ".tab-md": { "height": "2rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"], "-TabPadding": "1rem" }, ".tab-lg": { "height": "3rem", "fontSize": "1.125rem", "lineHeight": ["1.75rem", "2"], "-TabPadding": "1.25rem" }, ".tab-sm": { "height": "1.5rem", "fontSize": "0.875rem", "lineHeight": ".75rem", "-TabPadding": "0.75rem" }, ".tab-xs": { "height": "1.25rem", "fontSize": "0.75rem", "lineHeight": ".75rem", "-TabPadding": "0.5rem" }, ".textarea-xs": { "paddingLeft": "0.5rem", "paddingRight": "0.5rem", "paddingTop": "0.25rem", "paddingBottom": "0.25rem", "fontSize": "0.75rem", "lineHeight": ["1rem", "1.625"] }, ".textarea-sm": { "paddingLeft": "0.75rem", "paddingRight": "0.75rem", "paddingTop": "0.25rem", "paddingBottom": "0.25rem", "fontSize": "0.875rem", "lineHeight": "2rem" }, ".textarea-md": { "paddingLeft": "1rem", "paddingRight": "1rem", "paddingTop": "0.75rem", "paddingBottom": "0.75rem", "fontSize": "0.875rem", "lineHeight": ["1.25rem", "2"] }, ".textarea-lg": { "paddingLeft": "1.5rem", "paddingRight": "1.5rem", "paddingTop": "1rem", "paddingBottom": "1rem", "fontSize": "1.125rem", "lineHeight": ["1.75rem", "2"] }, ":where(.toast)": { "bottom": "0px", "left": "auto", "right": "0px", "top": "auto", "-TwTranslateX": "0px", "-TwTranslateY": "0px", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".toast:where(.toast-start)": { "left": "0px", "right": "auto", "-TwTranslateX": "0px", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".toast:where(.toast-center)": { "left": "50%", "right": "50%", "-TwTranslateX": "-50%", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".toast:where(.toast-end)": { "left": "auto", "right": "0px", "-TwTranslateX": "0px", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".toast:where(.toast-bottom)": { "bottom": "0px", "top": "auto", "-TwTranslateY": "0px", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".toast:where(.toast-middle)": { "bottom": "auto", "top": "50%", "-TwTranslateY": "-50%", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".toast:where(.toast-top)": { "bottom": "auto", "top": "0px", "-TwTranslateY": "0px", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))" }, ".toggle-xs": { "-Handleoffset": "0.5rem", "height": "1rem", "width": "1.5rem" }, ".toggle-sm": { "-Handleoffset": "0.75rem", "height": "1.25rem", "width": "2rem" }, ".toggle-md": { "-Handleoffset": "1.5rem", "height": "1.5rem", "width": "3rem" }, ".toggle-lg": { "-Handleoffset": "2rem", "height": "2rem", "width": "4rem" }, ".tooltip": { "position": "relative", "display": "inline-block", "-TooltipOffset": "calc(100% + 1px + var(--tooltip-tail, 0px))" }, ".tooltip:before": { "position": "absolute", "pointerEvents": "none", "zIndex": "1", "content": "var(--tw-content)", "-TwContent": "attr(data-tip)" }, ".tooltip:before, .tooltip-top:before": { "transform": "translateX(-50%)", "top": "auto", "left": "50%", "right": "auto", "bottom": "var(--tooltip-offset)" }, ".tooltip-bottom:before": { "transform": "translateX(-50%)", "top": "var(--tooltip-offset)", "left": "50%", "right": "auto", "bottom": "auto" }, ".tooltip-left:before": { "transform": "translateY(-50%)", "top": "50%", "left": "auto", "right": "var(--tooltip-offset)", "bottom": "auto" }, ".tooltip-right:before": { "transform": "translateY(-50%)", "top": "50%", "left": "var(--tooltip-offset)", "right": "auto", "bottom": "auto" } };
  }
});

// node_modules/daisyui/dist/utilities-styled.js
var require_utilities_styled = __commonJS({
  "node_modules/daisyui/dist/utilities-styled.js"(exports, module) {
    module.exports = { ".artboard-demo": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))", "-TwTextOpacity": "1", "color": "hsl(var(--bc) / var(--tw-text-opacity))", "borderRadius": "var(--rounded-box, 1rem)", "boxShadow": "0 1px 3px 0 rgba(0, 0, 0, 0.1),\n      0 1px 2px 0 rgba(0, 0, 0, 0.06)" }, ".avatar.online:before": { "content": '""', "position": "absolute", "zIndex": "10", "display": "block", "borderRadius": "9999px", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--su) / var(--tw-bg-opacity))", "outlineStyle": "solid", "outlineWidth": "2px", "outlineColor": "hsl(var(--b1) / 1)", "width": "15%", "height": "15%", "top": "7%", "right": "7%" }, ".avatar.offline:before": { "content": '""', "position": "absolute", "zIndex": "10", "display": "block", "borderRadius": "9999px", "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b3) / var(--tw-bg-opacity))", "outlineStyle": "solid", "outlineWidth": "2px", "outlineColor": "hsl(var(--b1) / 1)", "width": "15%", "height": "15%", "top": "7%", "right": "7%" }, ".btn-group .btn:not(:first-child):not(:last-child)": { "borderTopLeftRadius": "0", "borderTopRightRadius": "0", "borderBottomLeftRadius": "0", "borderBottomRightRadius": "0" }, ".btn-group .btn:first-child:not(:last-child)": { "marginLeft": "-1px", "marginTop": "-0px", "borderTopLeftRadius": "var(--rounded-btn, 0.5rem)", "borderTopRightRadius": "0", "borderBottomLeftRadius": "var(--rounded-btn, 0.5rem)", "borderBottomRightRadius": "0" }, ".btn-group .btn:last-child:not(:first-child)": { "borderTopLeftRadius": "0", "borderTopRightRadius": "var(--rounded-btn, 0.5rem)", "borderBottomLeftRadius": "0", "borderBottomRightRadius": "var(--rounded-btn, 0.5rem)" }, ".btn-group-horizontal .btn:not(:first-child):not(:last-child)": { "borderTopLeftRadius": "0", "borderTopRightRadius": "0", "borderBottomLeftRadius": "0", "borderBottomRightRadius": "0" }, ".btn-group-horizontal .btn:first-child:not(:last-child)": { "marginLeft": "-1px", "marginTop": "-0px", "borderTopLeftRadius": "var(--rounded-btn, 0.5rem)", "borderTopRightRadius": "0", "borderBottomLeftRadius": "var(--rounded-btn, 0.5rem)", "borderBottomRightRadius": "0" }, ".btn-group-horizontal .btn:last-child:not(:first-child)": { "borderTopLeftRadius": "0", "borderTopRightRadius": "var(--rounded-btn, 0.5rem)", "borderBottomLeftRadius": "0", "borderBottomRightRadius": "var(--rounded-btn, 0.5rem)" }, ".btn-group-vertical .btn:first-child:not(:last-child)": { "marginLeft": "-0px", "marginTop": "-1px", "borderTopLeftRadius": "var(--rounded-btn, 0.5rem)", "borderTopRightRadius": "var(--rounded-btn, 0.5rem)", "borderBottomLeftRadius": "0", "borderBottomRightRadius": "0" }, ".btn-group-vertical .btn:last-child:not(:first-child)": { "borderTopLeftRadius": "0", "borderTopRightRadius": "0", "borderBottomLeftRadius": "var(--rounded-btn, 0.5rem)", "borderBottomRightRadius": "var(--rounded-btn, 0.5rem)" }, ".card-compact .card-body": { "padding": "1rem", "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".card-compact .card-title": { "marginBottom": "0.25rem" }, ".card-normal .card-body": { "padding": "var(--padding-card, 2rem)", "fontSize": "1rem", "lineHeight": "1.5rem" }, ".card-normal .card-title": { "marginBottom": "0.75rem" }, ".divider-horizontal": { "marginLeft": "1rem", "marginRight": "1rem", "marginTop": "0px", "marginBottom": "0px", "height": "auto", "width": "1rem" }, ".divider-vertical": { "marginLeft": "0px", "marginRight": "0px", "marginTop": "1rem", "marginBottom": "1rem", "height": "1rem", "width": "auto" }, ".drawer-open > .drawer-toggle ~ .drawer-side > .drawer-overlay": { "cursor": "default", "backgroundColor": "transparent" }, ".join.join-vertical > :where(*:not(:first-child))": { "marginLeft": "0px", "marginRight": "0px", "marginTop": "-1px" }, ".join.join-horizontal > :where(*:not(:first-child))": { "marginTop": "0px", "marginBottom": "0px", "marginLeft": "-1px" }, ".menu-horizontal > li:not(.menu-title) > details > ul": { "marginLeft": "0px", "marginTop": "1rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem", "paddingRight": "0.5rem" }, ".menu-horizontal > li > details > ul:before": { "content": "none" }, ":where(.menu-horizontal > li:not(.menu-title) > details > ul)": { "-TwBgOpacity": "1", "backgroundColor": "hsl(var(--b1) / var(--tw-bg-opacity))", "-TwShadow": "0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)", "-TwShadowColored": "0 20px 25px -5px var(--tw-shadow-color), 0 8px 10px -6px var(--tw-shadow-color)", "boxShadow": "var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)", "borderRadius": "var(--rounded-box, 1rem)" }, ".menu-vertical > li:not(.menu-title) > details > ul": { "marginLeft": "1rem", "marginTop": "0px", "paddingTop": "0px", "paddingBottom": "0px", "paddingRight": "0px" }, ".menu-xs :where(li:not(.menu-title) > *:not(ul):not(details):not(.menu-title)),\n  .menu-xs :where(li:not(.menu-title) > details > summary:not(.menu-title))": { "borderRadius": "0.25rem", "paddingLeft": "0.5rem", "paddingRight": "0.5rem", "paddingTop": "0.25rem", "paddingBottom": "0.25rem", "fontSize": "0.75rem", "lineHeight": "1rem" }, ".menu-xs .menu-title": { "paddingLeft": "0.5rem", "paddingRight": "0.5rem", "paddingTop": "0.25rem", "paddingBottom": "0.25rem" }, ".menu-sm :where(li:not(.menu-title) > *:not(ul):not(details):not(.menu-title)),\n  .menu-sm :where(li:not(.menu-title) > details > summary:not(.menu-title))": { "paddingLeft": "0.75rem", "paddingRight": "0.75rem", "paddingTop": "0.25rem", "paddingBottom": "0.25rem", "fontSize": "0.875rem", "lineHeight": "1.25rem", "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".menu-sm .menu-title": { "paddingLeft": "0.75rem", "paddingRight": "0.75rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem" }, ".menu-md :where(li:not(.menu-title) > *:not(ul):not(details):not(.menu-title)),\n  .menu-md :where(li:not(.menu-title) > details > summary:not(.menu-title))": { "paddingLeft": "1rem", "paddingRight": "1rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem", "fontSize": "0.875rem", "lineHeight": "1.25rem", "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".menu-md .menu-title": { "paddingLeft": "1rem", "paddingRight": "1rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem" }, ".menu-lg :where(li:not(.menu-title) > *:not(ul):not(details):not(.menu-title)),\n  .menu-lg :where(li:not(.menu-title) > details > summary:not(.menu-title))": { "paddingLeft": "1.5rem", "paddingRight": "1.5rem", "paddingTop": "0.75rem", "paddingBottom": "0.75rem", "fontSize": "1.125rem", "lineHeight": "1.75rem", "borderRadius": "var(--rounded-btn, 0.5rem)" }, ".menu-lg .menu-title": { "paddingLeft": "1.5rem", "paddingRight": "1.5rem", "paddingTop": "0.75rem", "paddingBottom": "0.75rem" }, ".modal-top :where(.modal-box)": { "width": "100%", "maxWidth": "none", "-TwTranslateY": "-2.5rem", "-TwScaleX": "1", "-TwScaleY": "1", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "borderTopLeftRadius": "0px", "borderTopRightRadius": "0px", "borderBottomLeftRadius": "var(--rounded-box, 1rem)", "borderBottomRightRadius": "var(--rounded-box, 1rem)" }, ".modal-middle :where(.modal-box)": { "width": "91.666667%", "maxWidth": "32rem", "-TwTranslateY": "0px", "-TwScaleX": ".9", "-TwScaleY": ".9", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "borderTopLeftRadius": "var(--rounded-box, 1rem)", "borderTopRightRadius": "var(--rounded-box, 1rem)", "borderBottomLeftRadius": "var(--rounded-box, 1rem)", "borderBottomRightRadius": "var(--rounded-box, 1rem)" }, ".modal-bottom :where(.modal-box)": { "width": "100%", "maxWidth": "none", "-TwTranslateY": "2.5rem", "-TwScaleX": "1", "-TwScaleY": "1", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "borderBottomRightRadius": "0px", "borderBottomLeftRadius": "0px", "borderTopLeftRadius": "var(--rounded-box, 1rem)", "borderTopRightRadius": "var(--rounded-box, 1rem)" }, ".stats-horizontal > :not([hidden]) ~ :not([hidden])": { "-TwDivideXReverse": "0", "borderRightWidth": "calc(1px * var(--tw-divide-x-reverse))", "borderLeftWidth": "calc(1px * calc(1 - var(--tw-divide-x-reverse)))", "-TwDivideYReverse": "0", "borderTopWidth": "calc(0px * calc(1 - var(--tw-divide-y-reverse)))", "borderBottomWidth": "calc(0px * var(--tw-divide-y-reverse))" }, ".stats-horizontal": { "overflowX": "auto" }, ".stats-vertical > :not([hidden]) ~ :not([hidden])": { "-TwDivideXReverse": "0", "borderRightWidth": "calc(0px * var(--tw-divide-x-reverse))", "borderLeftWidth": "calc(0px * calc(1 - var(--tw-divide-x-reverse)))", "-TwDivideYReverse": "0", "borderTopWidth": "calc(1px * calc(1 - var(--tw-divide-y-reverse)))", "borderBottomWidth": "calc(1px * var(--tw-divide-y-reverse))" }, ".stats-vertical": { "overflowY": "auto" }, ".steps-horizontal .step": { "gridTemplateRows": "40px 1fr", "gridTemplateColumns": "auto", "minWidth": "4rem" }, ".steps-horizontal .step:before": { "height": "0.5rem", "width": "100%", "-TwTranslateX": "0px", "-TwTranslateY": "0px", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "content": '""', "marginLeft": "-100%" }, ".steps-vertical .step": { "gap": "0.5rem", "gridTemplateColumns": "40px 1fr", "gridTemplateRows": "auto", "minHeight": "4rem", "justifyItems": "start" }, ".steps-vertical .step:before": { "height": "100%", "width": "0.5rem", "-TwTranslateX": "-50%", "-TwTranslateY": "-50%", "transform": "translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))", "marginLeft": "50%" }, '[dir="rtl"] .steps-vertical .step:before': { "marginRight": "auto" }, ".table-xs :not(thead):not(tfoot) tr": { "fontSize": "0.75rem", "lineHeight": "1rem" }, ".table-xs :where(th, td)": { "paddingLeft": "0.5rem", "paddingRight": "0.5rem", "paddingTop": "0.25rem", "paddingBottom": "0.25rem" }, ".table-sm :not(thead):not(tfoot) tr": { "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".table-sm :where(th, td)": { "paddingLeft": "0.75rem", "paddingRight": "0.75rem", "paddingTop": "0.5rem", "paddingBottom": "0.5rem" }, ".table-md :not(thead):not(tfoot) tr": { "fontSize": "0.875rem", "lineHeight": "1.25rem" }, ".table-md :where(th, td)": { "paddingLeft": "1rem", "paddingRight": "1rem", "paddingTop": "0.75rem", "paddingBottom": "0.75rem" }, ".table-lg :not(thead):not(tfoot) tr": { "fontSize": "1rem", "lineHeight": "1.5rem" }, ".table-lg :where(th, td)": { "paddingLeft": "1.5rem", "paddingRight": "1.5rem", "paddingTop": "1rem", "paddingBottom": "1rem" }, ".tooltip": { "position": "relative", "display": "inline-block", "textAlign": "center", "-TooltipTail": "0.1875rem", "-TooltipColor": "hsl(var(--n))", "-TooltipTextColor": "hsl(var(--nc))", "-TooltipTailOffset": "calc(100% + 0.0625rem - var(--tooltip-tail))" }, ".tooltip:before,\n.tooltip:after": { "opacity": "0", "transitionProperty": "color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter", "transitionDelay": "100ms", "transitionDuration": "200ms", "transitionTimingFunction": "cubic-bezier(0.4, 0, 0.2, 1)" }, ".tooltip:after": { "position": ["absolute", "absolute"], "content": '""', "borderStyle": "solid", "borderWidth": "var(--tooltip-tail, 0)", "width": "0", "height": "0", "display": "block" }, ".tooltip:before": { "maxWidth": "20rem", "borderRadius": "0.25rem", "paddingLeft": "0.5rem", "paddingRight": "0.5rem", "paddingTop": "0.25rem", "paddingBottom": "0.25rem", "fontSize": "0.875rem", "lineHeight": "1.25rem", "backgroundColor": "var(--tooltip-color)", "color": "var(--tooltip-text-color)", "width": "max-content" }, ".tooltip.tooltip-open:before,\n.tooltip.tooltip-open:after,\n.tooltip:hover:before,\n.tooltip:hover:after": { "opacity": "1", "transitionDelay": "75ms" }, ".tooltip:has(:focus-visible):after,\n.tooltip:has(:focus-visible):before": { "opacity": "1", "transitionDelay": "75ms" }, ".tooltip:not([data-tip]):hover:before,\n.tooltip:not([data-tip]):hover:after": { "visibility": "hidden", "opacity": "0" }, ".tooltip:after, .tooltip-top:after": { "transform": "translateX(-50%)", "borderColor": "var(--tooltip-color) transparent transparent transparent", "top": "auto", "left": "50%", "right": "auto", "bottom": "var(--tooltip-tail-offset)" }, ".tooltip-bottom:after": { "transform": "translateX(-50%)", "borderColor": "transparent transparent var(--tooltip-color) transparent", "top": "var(--tooltip-tail-offset)", "left": "50%", "right": "auto", "bottom": "auto" }, ".tooltip-left:after": { "transform": "translateY(-50%)", "borderColor": "transparent transparent transparent var(--tooltip-color)", "top": "50%", "left": "auto", "right": "calc(var(--tooltip-tail-offset) + 0.0625rem)", "bottom": "auto" }, ".tooltip-right:after": { "transform": "translateY(-50%)", "borderColor": "transparent var(--tooltip-color) transparent transparent", "top": "50%", "left": "calc(var(--tooltip-tail-offset) + 0.0625rem)", "right": "auto", "bottom": "auto" }, ".tooltip-primary": { "-TooltipColor": "hsl(var(--p))", "-TooltipTextColor": "hsl(var(--pc))" }, ".tooltip-secondary": { "-TooltipColor": "hsl(var(--s))", "-TooltipTextColor": "hsl(var(--sc))" }, ".tooltip-accent": { "-TooltipColor": "hsl(var(--a))", "-TooltipTextColor": "hsl(var(--ac))" }, ".tooltip-info": { "-TooltipColor": "hsl(var(--in))", "-TooltipTextColor": "hsl(var(--inc))" }, ".tooltip-success": { "-TooltipColor": "hsl(var(--su))", "-TooltipTextColor": "hsl(var(--suc))" }, ".tooltip-warning": { "-TooltipColor": "hsl(var(--wa))", "-TooltipTextColor": "hsl(var(--wac))" }, ".tooltip-error": { "-TooltipColor": "hsl(var(--er))", "-TooltipTextColor": "hsl(var(--erc))" } };
  }
});

// node_modules/daisyui/src/theming/themes.js
var require_themes = __commonJS({
  "node_modules/daisyui/src/theming/themes.js"(exports, module) {
    module.exports = {
      "[data-theme=aqua]": {
        "color-scheme": "dark",
        "primary": "#09ecf3",
        "primary-content": "#005355",
        "secondary": "#966fb3",
        "accent": "#ffe999",
        "neutral": "#3b8ac4",
        "base-100": "#345da7",
        "info": "#2563eb",
        "success": "#16a34a",
        "warning": "#d97706",
        "error": "#dc2626"
      },
      "[data-theme=black]": {
        "color-scheme": "dark",
        "primary": "#343232",
        "secondary": "#343232",
        "accent": "#343232",
        "base-100": "#000000",
        "base-200": "#0D0D0D",
        "base-300": "#1A1919",
        "neutral": "#272626",
        "neutral-focus": "#343232",
        "info": "#0000ff",
        "success": "#008000",
        "warning": "#ffff00",
        "error": "#ff0000",
        "--rounded-box": "0",
        "--rounded-btn": "0",
        "--rounded-badge": "0",
        "--animation-btn": "0",
        "--animation-input": "0",
        "--btn-text-case": "lowercase",
        "--btn-focus-scale": "1",
        "--tab-radius": "0"
      },
      "[data-theme=bumblebee]": {
        "color-scheme": "light",
        "primary": "#f9d72f",
        "primary-content": "#181830",
        "secondary": "#e0a82e",
        "secondary-content": "#181830",
        "accent": "#DC8850",
        "neutral": "#181830",
        "base-100": "#ffffff"
      },
      "[data-theme=cmyk]": {
        "color-scheme": "light",
        "primary": "#45AEEE",
        "secondary": "#E8488A",
        "accent": "#FFF232",
        "neutral": "#1a1a1a",
        "base-100": "#ffffff",
        "info": "#4AA8C0",
        "success": "#823290",
        "warning": "#EE8133",
        "error": "#E93F33"
      },
      "[data-theme=corporate]": {
        "color-scheme": "light",
        "primary": "#4b6bfb",
        "secondary": "#7b92b2",
        "accent": "#67cba0",
        "neutral": "#181a2a",
        "neutral-content": "#edf2f7",
        "base-100": "#ffffff",
        "base-content": "#181a2a",
        "--rounded-box": "0.25rem",
        "--rounded-btn": ".125rem",
        "--rounded-badge": ".125rem",
        "--animation-btn": "0",
        "--animation-input": "0",
        "--btn-focus-scale": "1"
      },
      "[data-theme=cupcake]": {
        "color-scheme": "light",
        "primary": "#65c3c8",
        "secondary": "#ef9fbc",
        "accent": "#eeaf3a",
        "neutral": "#291334",
        "base-100": "#faf7f5",
        "base-200": "#efeae6",
        "base-300": "#e7e2df",
        "base-content": "#291334",
        "--rounded-btn": "1.9rem",
        "--tab-border": "2px",
        "--tab-radius": ".5rem"
      },
      "[data-theme=cyberpunk]": {
        "color-scheme": "light",
        "fontFamily": "ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace",
        "primary": "#ff7598",
        "secondary": "#75d1f0",
        "accent": "#c07eec",
        "neutral": "#423f00",
        "neutral-content": "#ffee00",
        "base-100": "#ffee00",
        "--rounded-box": "0",
        "--rounded-btn": "0",
        "--rounded-badge": "0",
        "--tab-radius": "0"
      },
      "[data-theme=dark]": {
        "color-scheme": "dark",
        "primary": "#661AE6",
        "primary-content": "#ffffff",
        "secondary": "#D926AA",
        "secondary-content": "#ffffff",
        "accent": "#1FB2A5",
        "accent-content": "#ffffff",
        "neutral": "#2a323c",
        "neutral-focus": "#242b33",
        "neutral-content": "#A6ADBB",
        "base-100": "#1d232a",
        "base-200": "#191e24",
        "base-300": "#15191e",
        "base-content": "#A6ADBB"
      },
      "[data-theme=dracula]": {
        "color-scheme": "dark",
        "primary": "#ff79c6",
        "secondary": "#bd93f9",
        "accent": "#ffb86c",
        "neutral": "#414558",
        "base-100": "#282a36",
        "base-content": "#f8f8f2",
        "info": "#8be9fd",
        "success": "#50fa7b",
        "warning": "#f1fa8c",
        "error": "#ff5555"
      },
      "[data-theme=emerald]": {
        "color-scheme": "light",
        "primary": "#66cc8a",
        "primary-content": "#223D30",
        "secondary": "#377cfb",
        "secondary-content": "#f9fafb",
        "accent": "#ea5234",
        "accent-content": "#f9fafb",
        "neutral": "#333c4d",
        "neutral-content": "#f9fafb",
        "base-100": "#ffffff",
        "base-content": "#333c4d",
        "--animation-btn": "0",
        "--animation-input": "0",
        "--btn-focus-scale": "1"
      },
      "[data-theme=fantasy]": {
        "color-scheme": "light",
        "primary": "#6e0b75",
        "secondary": "#007ebd",
        "accent": "#f8860d",
        "neutral": "#1f2937",
        "base-100": "#ffffff",
        "base-content": "#1f2937"
      },
      "[data-theme=forest]": {
        "color-scheme": "dark",
        "primary": "#1eb854",
        "primary-content": "#000000",
        "secondary": "#1DB88E",
        "accent": "#1DB8AB",
        "neutral": "#19362D",
        "base-100": "#171212",
        "--rounded-btn": "1.9rem"
      },
      "[data-theme=garden]": {
        "color-scheme": "light",
        "primary": "#F40076",
        "secondary": "#8E4162",
        "accent": "#5c7f67",
        "neutral": "#291E00",
        "neutral-content": "#e9e7e7",
        "base-100": "#e9e7e7",
        "base-content": "#100f0f"
      },
      "[data-theme=halloween]": {
        "color-scheme": "dark",
        "primary": "#f28c18",
        "primary-content": "#131616",
        "secondary": "#6d3a9c",
        "accent": "#51a800",
        "accent-content": "#000000",
        "neutral": "#2F1B05",
        "base-100": "#212121",
        "info": "#2563eb",
        "success": "#16a34a",
        "warning": "#d97706",
        "error": "#dc2626"
      },
      "[data-theme=light]": {
        "color-scheme": "light",
        "primary": "#570df8",
        "primary-content": "#E0D2FE",
        "secondary": "#f000b8",
        "secondary-content": "#FFD1F4",
        "accent": "#1ECEBC",
        "accent-content": "#07312D",
        "neutral": "#2B3440",
        "neutral-content": "#D7DDE4",
        "base-100": "#ffffff",
        "base-200": "#F2F2F2",
        "base-300": "#E5E6E6",
        "base-content": "#1f2937"
      },
      "[data-theme=lofi]": {
        "color-scheme": "light",
        "primary": "#0D0D0D",
        "primary-content": "#ffffff",
        "secondary": "#1A1919",
        "secondary-content": "#ffffff",
        "accent": "#262626",
        "accent-content": "#ffffff",
        "neutral": "#000000",
        "neutral-content": "#ffffff",
        "base-100": "#ffffff",
        "base-200": "#F2F2F2",
        "base-300": "#E6E5E5",
        "base-content": "#000000",
        "info": "#0070F3",
        "info-content": "#ffffff",
        "success": "#21CC51",
        "success-content": "#000000",
        "warning": "#FF6154",
        "warning-content": "#ffffff",
        "error": "#DE1C8D",
        "error-content": "#ffffff",
        "--rounded-box": "0.25rem",
        "--rounded-btn": "0.125rem",
        "--rounded-badge": "0.125rem",
        "--animation-btn": "0",
        "--animation-input": "0",
        "--btn-focus-scale": "1",
        "--tab-radius": "0"
      },
      "[data-theme=luxury]": {
        "color-scheme": "dark",
        "primary": "#ffffff",
        "secondary": "#152747",
        "accent": "#513448",
        "neutral": "#331800",
        "neutral-content": "#FFE7A3",
        "base-100": "#09090b",
        "base-200": "#171618",
        "base-300": "#2e2d2f",
        "base-content": "#dca54c",
        "info": "#66c6ff",
        "success": "#87d039",
        "warning": "#e2d562",
        "error": "#ff6f6f"
      },
      "[data-theme=pastel]": {
        "color-scheme": "light",
        "primary": "#d1c1d7",
        "secondary": "#f6cbd1",
        "accent": "#b4e9d6",
        "neutral": "#70acc7",
        "base-100": "#ffffff",
        "base-200": "#f9fafb",
        "base-300": "#d1d5db",
        "--rounded-btn": "1.9rem"
      },
      "[data-theme=retro]": {
        "color-scheme": "light",
        "primary": "#ef9995",
        "primary-content": "#282425",
        "secondary": "#a4cbb4",
        "secondary-content": "#282425",
        "accent": "#DC8850",
        "accent-content": "#282425",
        "neutral": "#2E282A",
        "neutral-content": "#EDE6D4",
        "base-100": "#e4d8b4",
        "base-200": "#DBCA9A",
        "base-300": "#D4BF87",
        "base-content": "#282425",
        "info": "#2563eb",
        "success": "#16a34a",
        "warning": "#d97706",
        "error": "#dc2626",
        "--rounded-box": "0.4rem",
        "--rounded-btn": "0.4rem",
        "--rounded-badge": "0.4rem"
      },
      "[data-theme=synthwave]": {
        "color-scheme": "dark",
        "primary": "#e779c1",
        "secondary": "#58c7f3",
        "accent": "#f3cc30",
        "neutral": "#221551",
        "neutral-content": "#f9f7fd",
        "base-100": "#1a103d",
        "base-content": "#f9f7fd",
        "info": "#53c0f3",
        "info-content": "#201047",
        "success": "#71ead2",
        "success-content": "#201047",
        "warning": "#f3cc30",
        "warning-content": "#201047",
        "error": "#e24056",
        "error-content": "#f9f7fd"
      },
      "[data-theme=valentine]": {
        "color-scheme": "light",
        "primary": "#e96d7b",
        "secondary": "#a991f7",
        "accent": "#88dbdd",
        "neutral": "#af4670",
        "neutral-content": "#f0d6e8",
        "base-100": "#f0d6e8",
        "base-content": "#632c3b",
        "info": "#2563eb",
        "success": "#16a34a",
        "warning": "#d97706",
        "error": "#dc2626",
        "--rounded-btn": "1.9rem"
      },
      "[data-theme=wireframe]": {
        "color-scheme": "light",
        "fontFamily": 'Chalkboard,comic sans ms,"sanssecondaryerif"',
        "primary": "#b8b8b8",
        "secondary": "#b8b8b8",
        "accent": "#b8b8b8",
        "neutral": "#ebebeb",
        "base-100": "#ffffff",
        "base-200": "#eeeeee",
        "base-300": "#dddddd",
        "info": "#0000ff",
        "success": "#008000",
        "warning": "#a6a659",
        "error": "#ff0000",
        "--rounded-box": "0.2rem",
        "--rounded-btn": "0.2rem",
        "--rounded-badge": "0.2rem",
        "--tab-radius": "0.2rem"
      },
      "[data-theme=autumn]": {
        "color-scheme": "light",
        "primary": "#8C0327",
        "secondary": "#D85251",
        "accent": "#D59B6A",
        "neutral": "#826A5C",
        "base-100": "#f1f1f1",
        "info": "#42ADBB",
        "success": "#499380",
        "warning": "#E97F14",
        "error": "#DF1A2F"
      },
      "[data-theme=business]": {
        "color-scheme": "dark",
        "primary": "#1C4E80",
        "secondary": "#7C909A",
        "accent": "#EA6947",
        "neutral": "#23282E",
        "base-100": "#202020",
        "info": "#0091D5",
        "success": "#6BB187",
        "warning": "#DBAE59",
        "error": "#AC3E31",
        "--rounded-box": "0.25rem",
        "--rounded-btn": ".125rem",
        "--rounded-badge": ".125rem"
      },
      "[data-theme=acid]": {
        "color-scheme": "light",
        "primary": "#FF00F4",
        "secondary": "#FF7400",
        "accent": "#CBFD03",
        "neutral": "#191A3F",
        "base-100": "#fafafa",
        "info": "#3194F6",
        "success": "#5FC992",
        "warning": "#F7DE2D",
        "error": "#E60300",
        "--rounded-box": "1.25rem",
        "--rounded-btn": "1rem",
        "--rounded-badge": "1rem"
      },
      "[data-theme=lemonade]": {
        "color-scheme": "light",
        "primary": "#519903",
        "secondary": "#E9E92E",
        "accent": "#F7F9CA",
        "neutral": "#191A3F",
        "base-100": "#ffffff",
        "info": "#C8E1E7",
        "success": "#DEF29F",
        "warning": "#F7E589",
        "error": "#F2B6B5"
      },
      "[data-theme=night]": {
        "color-scheme": "dark",
        "primary": "#38bdf8",
        "secondary": "#818CF8",
        "accent": "#F471B5",
        "neutral": "#1E293B",
        "neutral-focus": "#273449",
        "base-100": "#0F172A",
        "info": "#0CA5E9",
        "info-content": "#000000",
        "success": "#2DD4BF",
        "warning": "#F4BF50",
        "error": "#FB7085"
      },
      "[data-theme=coffee]": {
        "color-scheme": "dark",
        "primary": "#DB924B",
        "secondary": "#263E3F",
        "accent": "#10576D",
        "neutral": "#120C12",
        "base-100": "#20161F",
        "base-content": "#756E63",
        "info": "#8DCAC1",
        "success": "#9DB787",
        "warning": "#FFD25F",
        "error": "#FC9581"
      },
      "[data-theme=winter]": {
        "color-scheme": "light",
        "primary": "#047AFF",
        "secondary": "#463AA2",
        "accent": "#C148AC",
        "neutral": "#021431",
        "base-100": "#ffffff",
        "base-200": "#F2F7FF",
        "base-300": "#E3E9F4",
        "base-content": "#394E6A",
        "info": "#93E7FB",
        "success": "#81CFD1",
        "warning": "#EFD7BB",
        "error": "#E58B8B"
      }
    };
  }
});

// node_modules/daisyui/src/theming/colorNames.js
var require_colorNames = __commonJS({
  "node_modules/daisyui/src/theming/colorNames.js"(exports, module) {
    module.exports = {
      "primary": "--p",
      "primary-focus": "--pf",
      "primary-content": "--pc",
      "secondary": "--s",
      "secondary-focus": "--sf",
      "secondary-content": "--sc",
      "accent": "--a",
      "accent-focus": "--af",
      "accent-content": "--ac",
      "neutral": "--n",
      "neutral-focus": "--nf",
      "neutral-content": "--nc",
      "base-100": "--b1",
      "base-200": "--b2",
      "base-300": "--b3",
      "base-content": "--bc",
      "info": "--in",
      "info-content": "--inc",
      "success": "--su",
      "success-content": "--suc",
      "warning": "--wa",
      "warning-content": "--wac",
      "error": "--er",
      "error-content": "--erc"
    };
  }
});

// node_modules/daisyui/src/theming/themeDefaults.js
var require_themeDefaults = __commonJS({
  "node_modules/daisyui/src/theming/themeDefaults.js"(exports, module) {
    module.exports = {
      themeOrder: [
        "light",
        "dark",
        "cupcake",
        "bumblebee",
        "emerald",
        "corporate",
        "synthwave",
        "retro",
        "cyberpunk",
        "valentine",
        "halloween",
        "garden",
        "forest",
        "aqua",
        "lofi",
        "pastel",
        "fantasy",
        "wireframe",
        "black",
        "luxury",
        "dracula",
        "cmyk",
        "autumn",
        "business",
        "acid",
        "lemonade",
        "night",
        "coffee",
        "winter"
      ],
      variables: {
        "--rounded-box": "1rem",
        "--rounded-btn": "0.5rem",
        "--rounded-badge": "1.9rem",
        "--animation-btn": "0.25s",
        "--animation-input": ".2s",
        "--btn-text-case": "uppercase",
        "--btn-focus-scale": "0.95",
        "--border-btn": "1px",
        "--tab-border": "1px",
        "--tab-radius": "0.5rem"
      }
    };
  }
});

// node_modules/colord/index.js
var require_colord = __commonJS({
  "node_modules/colord/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var r = { grad: 0.9, turn: 360, rad: 360 / (2 * Math.PI) };
    var t = function(r2) {
      return "string" == typeof r2 ? r2.length > 0 : "number" == typeof r2;
    };
    var n = function(r2, t2, n2) {
      return void 0 === t2 && (t2 = 0), void 0 === n2 && (n2 = Math.pow(10, t2)), Math.round(n2 * r2) / n2 + 0;
    };
    var e = function(r2, t2, n2) {
      return void 0 === t2 && (t2 = 0), void 0 === n2 && (n2 = 1), r2 > n2 ? n2 : r2 > t2 ? r2 : t2;
    };
    var u = function(r2) {
      return (r2 = isFinite(r2) ? r2 % 360 : 0) > 0 ? r2 : r2 + 360;
    };
    var o = function(r2) {
      return { r: e(r2.r, 0, 255), g: e(r2.g, 0, 255), b: e(r2.b, 0, 255), a: e(r2.a) };
    };
    var a = function(r2) {
      return { r: n(r2.r), g: n(r2.g), b: n(r2.b), a: n(r2.a, 3) };
    };
    var s = /^#([0-9a-f]{3,8})$/i;
    var i = function(r2) {
      var t2 = r2.toString(16);
      return t2.length < 2 ? "0" + t2 : t2;
    };
    var h = function(r2) {
      var t2 = r2.r, n2 = r2.g, e2 = r2.b, u2 = r2.a, o2 = Math.max(t2, n2, e2), a2 = o2 - Math.min(t2, n2, e2), s2 = a2 ? o2 === t2 ? (n2 - e2) / a2 : o2 === n2 ? 2 + (e2 - t2) / a2 : 4 + (t2 - n2) / a2 : 0;
      return { h: 60 * (s2 < 0 ? s2 + 6 : s2), s: o2 ? a2 / o2 * 100 : 0, v: o2 / 255 * 100, a: u2 };
    };
    var b = function(r2) {
      var t2 = r2.h, n2 = r2.s, e2 = r2.v, u2 = r2.a;
      t2 = t2 / 360 * 6, n2 /= 100, e2 /= 100;
      var o2 = Math.floor(t2), a2 = e2 * (1 - n2), s2 = e2 * (1 - (t2 - o2) * n2), i2 = e2 * (1 - (1 - t2 + o2) * n2), h2 = o2 % 6;
      return { r: 255 * [e2, s2, a2, a2, i2, e2][h2], g: 255 * [i2, e2, e2, s2, a2, a2][h2], b: 255 * [a2, a2, i2, e2, e2, s2][h2], a: u2 };
    };
    var d = function(r2) {
      return { h: u(r2.h), s: e(r2.s, 0, 100), l: e(r2.l, 0, 100), a: e(r2.a) };
    };
    var g = function(r2) {
      return { h: n(r2.h), s: n(r2.s), l: n(r2.l), a: n(r2.a, 3) };
    };
    var f = function(r2) {
      return b((n2 = (t2 = r2).s, { h: t2.h, s: (n2 *= ((e2 = t2.l) < 50 ? e2 : 100 - e2) / 100) > 0 ? 2 * n2 / (e2 + n2) * 100 : 0, v: e2 + n2, a: t2.a }));
      var t2, n2, e2;
    };
    var p = function(r2) {
      return { h: (t2 = h(r2)).h, s: (u2 = (200 - (n2 = t2.s)) * (e2 = t2.v) / 100) > 0 && u2 < 200 ? n2 * e2 / 100 / (u2 <= 100 ? u2 : 200 - u2) * 100 : 0, l: u2 / 2, a: t2.a };
      var t2, n2, e2, u2;
    };
    var l = /^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s*,\s*([+-]?\d*\.?\d+)%\s*,\s*([+-]?\d*\.?\d+)%\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i;
    var c = /^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s+([+-]?\d*\.?\d+)%\s+([+-]?\d*\.?\d+)%\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i;
    var v = /^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i;
    var m = /^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i;
    var y = { string: [[function(r2) {
      var t2 = s.exec(r2);
      return t2 ? (r2 = t2[1]).length <= 4 ? { r: parseInt(r2[0] + r2[0], 16), g: parseInt(r2[1] + r2[1], 16), b: parseInt(r2[2] + r2[2], 16), a: 4 === r2.length ? n(parseInt(r2[3] + r2[3], 16) / 255, 2) : 1 } : 6 === r2.length || 8 === r2.length ? { r: parseInt(r2.substr(0, 2), 16), g: parseInt(r2.substr(2, 2), 16), b: parseInt(r2.substr(4, 2), 16), a: 8 === r2.length ? n(parseInt(r2.substr(6, 2), 16) / 255, 2) : 1 } : null : null;
    }, "hex"], [function(r2) {
      var t2 = v.exec(r2) || m.exec(r2);
      return t2 ? t2[2] !== t2[4] || t2[4] !== t2[6] ? null : o({ r: Number(t2[1]) / (t2[2] ? 100 / 255 : 1), g: Number(t2[3]) / (t2[4] ? 100 / 255 : 1), b: Number(t2[5]) / (t2[6] ? 100 / 255 : 1), a: void 0 === t2[7] ? 1 : Number(t2[7]) / (t2[8] ? 100 : 1) }) : null;
    }, "rgb"], [function(t2) {
      var n2 = l.exec(t2) || c.exec(t2);
      if (!n2)
        return null;
      var e2, u2, o2 = d({ h: (e2 = n2[1], u2 = n2[2], void 0 === u2 && (u2 = "deg"), Number(e2) * (r[u2] || 1)), s: Number(n2[3]), l: Number(n2[4]), a: void 0 === n2[5] ? 1 : Number(n2[5]) / (n2[6] ? 100 : 1) });
      return f(o2);
    }, "hsl"]], object: [[function(r2) {
      var n2 = r2.r, e2 = r2.g, u2 = r2.b, a2 = r2.a, s2 = void 0 === a2 ? 1 : a2;
      return t(n2) && t(e2) && t(u2) ? o({ r: Number(n2), g: Number(e2), b: Number(u2), a: Number(s2) }) : null;
    }, "rgb"], [function(r2) {
      var n2 = r2.h, e2 = r2.s, u2 = r2.l, o2 = r2.a, a2 = void 0 === o2 ? 1 : o2;
      if (!t(n2) || !t(e2) || !t(u2))
        return null;
      var s2 = d({ h: Number(n2), s: Number(e2), l: Number(u2), a: Number(a2) });
      return f(s2);
    }, "hsl"], [function(r2) {
      var n2 = r2.h, o2 = r2.s, a2 = r2.v, s2 = r2.a, i2 = void 0 === s2 ? 1 : s2;
      if (!t(n2) || !t(o2) || !t(a2))
        return null;
      var h2 = function(r3) {
        return { h: u(r3.h), s: e(r3.s, 0, 100), v: e(r3.v, 0, 100), a: e(r3.a) };
      }({ h: Number(n2), s: Number(o2), v: Number(a2), a: Number(i2) });
      return b(h2);
    }, "hsv"]] };
    var N = function(r2, t2) {
      for (var n2 = 0; n2 < t2.length; n2++) {
        var e2 = t2[n2][0](r2);
        if (e2)
          return [e2, t2[n2][1]];
      }
      return [null, void 0];
    };
    var x = function(r2) {
      return "string" == typeof r2 ? N(r2.trim(), y.string) : "object" == typeof r2 && null !== r2 ? N(r2, y.object) : [null, void 0];
    };
    var M = function(r2, t2) {
      var n2 = p(r2);
      return { h: n2.h, s: e(n2.s + 100 * t2, 0, 100), l: n2.l, a: n2.a };
    };
    var I = function(r2) {
      return (299 * r2.r + 587 * r2.g + 114 * r2.b) / 1e3 / 255;
    };
    var H = function(r2, t2) {
      var n2 = p(r2);
      return { h: n2.h, s: n2.s, l: e(n2.l + 100 * t2, 0, 100), a: n2.a };
    };
    var $ = function() {
      function r2(r3) {
        this.parsed = x(r3)[0], this.rgba = this.parsed || { r: 0, g: 0, b: 0, a: 1 };
      }
      return r2.prototype.isValid = function() {
        return null !== this.parsed;
      }, r2.prototype.brightness = function() {
        return n(I(this.rgba), 2);
      }, r2.prototype.isDark = function() {
        return I(this.rgba) < 0.5;
      }, r2.prototype.isLight = function() {
        return I(this.rgba) >= 0.5;
      }, r2.prototype.toHex = function() {
        return r3 = a(this.rgba), t2 = r3.r, e2 = r3.g, u2 = r3.b, s2 = (o2 = r3.a) < 1 ? i(n(255 * o2)) : "", "#" + i(t2) + i(e2) + i(u2) + s2;
        var r3, t2, e2, u2, o2, s2;
      }, r2.prototype.toRgb = function() {
        return a(this.rgba);
      }, r2.prototype.toRgbString = function() {
        return r3 = a(this.rgba), t2 = r3.r, n2 = r3.g, e2 = r3.b, (u2 = r3.a) < 1 ? "rgba(" + t2 + ", " + n2 + ", " + e2 + ", " + u2 + ")" : "rgb(" + t2 + ", " + n2 + ", " + e2 + ")";
        var r3, t2, n2, e2, u2;
      }, r2.prototype.toHsl = function() {
        return g(p(this.rgba));
      }, r2.prototype.toHslString = function() {
        return r3 = g(p(this.rgba)), t2 = r3.h, n2 = r3.s, e2 = r3.l, (u2 = r3.a) < 1 ? "hsla(" + t2 + ", " + n2 + "%, " + e2 + "%, " + u2 + ")" : "hsl(" + t2 + ", " + n2 + "%, " + e2 + "%)";
        var r3, t2, n2, e2, u2;
      }, r2.prototype.toHsv = function() {
        return r3 = h(this.rgba), { h: n(r3.h), s: n(r3.s), v: n(r3.v), a: n(r3.a, 3) };
        var r3;
      }, r2.prototype.invert = function() {
        return j({ r: 255 - (r3 = this.rgba).r, g: 255 - r3.g, b: 255 - r3.b, a: r3.a });
        var r3;
      }, r2.prototype.saturate = function(r3) {
        return void 0 === r3 && (r3 = 0.1), j(M(this.rgba, r3));
      }, r2.prototype.desaturate = function(r3) {
        return void 0 === r3 && (r3 = 0.1), j(M(this.rgba, -r3));
      }, r2.prototype.grayscale = function() {
        return j(M(this.rgba, -1));
      }, r2.prototype.lighten = function(r3) {
        return void 0 === r3 && (r3 = 0.1), j(H(this.rgba, r3));
      }, r2.prototype.darken = function(r3) {
        return void 0 === r3 && (r3 = 0.1), j(H(this.rgba, -r3));
      }, r2.prototype.rotate = function(r3) {
        return void 0 === r3 && (r3 = 15), this.hue(this.hue() + r3);
      }, r2.prototype.alpha = function(r3) {
        return "number" == typeof r3 ? j({ r: (t2 = this.rgba).r, g: t2.g, b: t2.b, a: r3 }) : n(this.rgba.a, 3);
        var t2;
      }, r2.prototype.hue = function(r3) {
        var t2 = p(this.rgba);
        return "number" == typeof r3 ? j({ h: r3, s: t2.s, l: t2.l, a: t2.a }) : n(t2.h);
      }, r2.prototype.isEqual = function(r3) {
        return this.toHex() === j(r3).toHex();
      }, r2;
    }();
    var j = function(r2) {
      return r2 instanceof $ ? r2 : new $(r2);
    };
    var w = [];
    exports.Colord = $, exports.colord = j, exports.extend = function(r2) {
      r2.forEach(function(r3) {
        w.indexOf(r3) < 0 && (r3($, y), w.push(r3));
      });
    }, exports.getFormat = function(r2) {
      return x(r2)[1];
    }, exports.random = function() {
      return new $({ r: 255 * Math.random(), g: 255 * Math.random(), b: 255 * Math.random() });
    };
  }
});

// node_modules/colord/plugins/mix.js
var require_mix = __commonJS({
  "node_modules/colord/plugins/mix.js"(exports, module) {
    var t = function(t2, a2, n2) {
      return void 0 === a2 && (a2 = 0), void 0 === n2 && (n2 = 1), t2 > n2 ? n2 : t2 > a2 ? t2 : a2;
    };
    var a = function(t2) {
      var a2 = t2 / 255;
      return a2 < 0.04045 ? a2 / 12.92 : Math.pow((a2 + 0.055) / 1.055, 2.4);
    };
    var n = function(t2) {
      return 255 * (t2 > 31308e-7 ? 1.055 * Math.pow(t2, 1 / 2.4) - 0.055 : 12.92 * t2);
    };
    var r = 96.422;
    var o = 100;
    var u = 82.521;
    var e = function(a2) {
      var r2, o2, u2 = { x: 0.9555766 * (r2 = a2).x + -0.0230393 * r2.y + 0.0631636 * r2.z, y: -0.0282895 * r2.x + 1.0099416 * r2.y + 0.0210077 * r2.z, z: 0.0122982 * r2.x + -0.020483 * r2.y + 1.3299098 * r2.z };
      return o2 = { r: n(0.032404542 * u2.x - 0.015371385 * u2.y - 4985314e-9 * u2.z), g: n(-969266e-8 * u2.x + 0.018760108 * u2.y + 41556e-8 * u2.z), b: n(556434e-9 * u2.x - 2040259e-9 * u2.y + 0.010572252 * u2.z), a: a2.a }, { r: t(o2.r, 0, 255), g: t(o2.g, 0, 255), b: t(o2.b, 0, 255), a: t(o2.a) };
    };
    var i = function(n2) {
      var e2 = a(n2.r), i2 = a(n2.g), p2 = a(n2.b);
      return function(a2) {
        return { x: t(a2.x, 0, r), y: t(a2.y, 0, o), z: t(a2.z, 0, u), a: t(a2.a) };
      }(function(t2) {
        return { x: 1.0478112 * t2.x + 0.0228866 * t2.y + -0.050127 * t2.z, y: 0.0295424 * t2.x + 0.9904844 * t2.y + -0.0170491 * t2.z, z: -92345e-7 * t2.x + 0.0150436 * t2.y + 0.7521316 * t2.z, a: t2.a };
      }({ x: 100 * (0.4124564 * e2 + 0.3575761 * i2 + 0.1804375 * p2), y: 100 * (0.2126729 * e2 + 0.7151522 * i2 + 0.072175 * p2), z: 100 * (0.0193339 * e2 + 0.119192 * i2 + 0.9503041 * p2), a: n2.a }));
    };
    var p = 216 / 24389;
    var h = 24389 / 27;
    var f = function(t2) {
      var a2 = i(t2), n2 = a2.x / r, e2 = a2.y / o, f2 = a2.z / u;
      return n2 = n2 > p ? Math.cbrt(n2) : (h * n2 + 16) / 116, { l: 116 * (e2 = e2 > p ? Math.cbrt(e2) : (h * e2 + 16) / 116) - 16, a: 500 * (n2 - e2), b: 200 * (e2 - (f2 = f2 > p ? Math.cbrt(f2) : (h * f2 + 16) / 116)), alpha: a2.a };
    };
    var c = function(a2, n2, i2) {
      var c2, y = f(a2), x = f(n2);
      return function(t2) {
        var a3 = (t2.l + 16) / 116, n3 = t2.a / 500 + a3, i3 = a3 - t2.b / 200;
        return e({ x: (Math.pow(n3, 3) > p ? Math.pow(n3, 3) : (116 * n3 - 16) / h) * r, y: (t2.l > 8 ? Math.pow((t2.l + 16) / 116, 3) : t2.l / h) * o, z: (Math.pow(i3, 3) > p ? Math.pow(i3, 3) : (116 * i3 - 16) / h) * u, a: t2.alpha });
      }({ l: t((c2 = { l: y.l * (1 - i2) + x.l * i2, a: y.a * (1 - i2) + x.a * i2, b: y.b * (1 - i2) + x.b * i2, alpha: y.alpha * (1 - i2) + x.alpha * i2 }).l, 0, 400), a: c2.a, b: c2.b, alpha: t(c2.alpha) });
    };
    module.exports = function(t2) {
      function a2(t3, a3, n2) {
        void 0 === n2 && (n2 = 5);
        for (var r2 = [], o2 = 1 / (n2 - 1), u2 = 0; u2 <= n2 - 1; u2++)
          r2.push(t3.mix(a3, o2 * u2));
        return r2;
      }
      t2.prototype.mix = function(a3, n2) {
        void 0 === n2 && (n2 = 0.5);
        var r2 = a3 instanceof t2 ? a3 : new t2(a3), o2 = c(this.toRgb(), r2.toRgb(), n2);
        return new t2(o2);
      }, t2.prototype.tints = function(t3) {
        return a2(this, "#fff", t3);
      }, t2.prototype.shades = function(t3) {
        return a2(this, "#000", t3);
      }, t2.prototype.tones = function(t3) {
        return a2(this, "#808080", t3);
      };
    };
  }
});

// node_modules/colord/plugins/names.js
var require_names = __commonJS({
  "node_modules/colord/plugins/names.js"(exports, module) {
    module.exports = function(e, f) {
      var a = { white: "#ffffff", bisque: "#ffe4c4", blue: "#0000ff", cadetblue: "#5f9ea0", chartreuse: "#7fff00", chocolate: "#d2691e", coral: "#ff7f50", antiquewhite: "#faebd7", aqua: "#00ffff", azure: "#f0ffff", whitesmoke: "#f5f5f5", papayawhip: "#ffefd5", plum: "#dda0dd", blanchedalmond: "#ffebcd", black: "#000000", gold: "#ffd700", goldenrod: "#daa520", gainsboro: "#dcdcdc", cornsilk: "#fff8dc", cornflowerblue: "#6495ed", burlywood: "#deb887", aquamarine: "#7fffd4", beige: "#f5f5dc", crimson: "#dc143c", cyan: "#00ffff", darkblue: "#00008b", darkcyan: "#008b8b", darkgoldenrod: "#b8860b", darkkhaki: "#bdb76b", darkgray: "#a9a9a9", darkgreen: "#006400", darkgrey: "#a9a9a9", peachpuff: "#ffdab9", darkmagenta: "#8b008b", darkred: "#8b0000", darkorchid: "#9932cc", darkorange: "#ff8c00", darkslateblue: "#483d8b", gray: "#808080", darkslategray: "#2f4f4f", darkslategrey: "#2f4f4f", deeppink: "#ff1493", deepskyblue: "#00bfff", wheat: "#f5deb3", firebrick: "#b22222", floralwhite: "#fffaf0", ghostwhite: "#f8f8ff", darkviolet: "#9400d3", magenta: "#ff00ff", green: "#008000", dodgerblue: "#1e90ff", grey: "#808080", honeydew: "#f0fff0", hotpink: "#ff69b4", blueviolet: "#8a2be2", forestgreen: "#228b22", lawngreen: "#7cfc00", indianred: "#cd5c5c", indigo: "#4b0082", fuchsia: "#ff00ff", brown: "#a52a2a", maroon: "#800000", mediumblue: "#0000cd", lightcoral: "#f08080", darkturquoise: "#00ced1", lightcyan: "#e0ffff", ivory: "#fffff0", lightyellow: "#ffffe0", lightsalmon: "#ffa07a", lightseagreen: "#20b2aa", linen: "#faf0e6", mediumaquamarine: "#66cdaa", lemonchiffon: "#fffacd", lime: "#00ff00", khaki: "#f0e68c", mediumseagreen: "#3cb371", limegreen: "#32cd32", mediumspringgreen: "#00fa9a", lightskyblue: "#87cefa", lightblue: "#add8e6", midnightblue: "#191970", lightpink: "#ffb6c1", mistyrose: "#ffe4e1", moccasin: "#ffe4b5", mintcream: "#f5fffa", lightslategray: "#778899", lightslategrey: "#778899", navajowhite: "#ffdead", navy: "#000080", mediumvioletred: "#c71585", powderblue: "#b0e0e6", palegoldenrod: "#eee8aa", oldlace: "#fdf5e6", paleturquoise: "#afeeee", mediumturquoise: "#48d1cc", mediumorchid: "#ba55d3", rebeccapurple: "#663399", lightsteelblue: "#b0c4de", mediumslateblue: "#7b68ee", thistle: "#d8bfd8", tan: "#d2b48c", orchid: "#da70d6", mediumpurple: "#9370db", purple: "#800080", pink: "#ffc0cb", skyblue: "#87ceeb", springgreen: "#00ff7f", palegreen: "#98fb98", red: "#ff0000", yellow: "#ffff00", slateblue: "#6a5acd", lavenderblush: "#fff0f5", peru: "#cd853f", palevioletred: "#db7093", violet: "#ee82ee", teal: "#008080", slategray: "#708090", slategrey: "#708090", aliceblue: "#f0f8ff", darkseagreen: "#8fbc8f", darkolivegreen: "#556b2f", greenyellow: "#adff2f", seagreen: "#2e8b57", seashell: "#fff5ee", tomato: "#ff6347", silver: "#c0c0c0", sienna: "#a0522d", lavender: "#e6e6fa", lightgreen: "#90ee90", orange: "#ffa500", orangered: "#ff4500", steelblue: "#4682b4", royalblue: "#4169e1", turquoise: "#40e0d0", yellowgreen: "#9acd32", salmon: "#fa8072", saddlebrown: "#8b4513", sandybrown: "#f4a460", rosybrown: "#bc8f8f", darksalmon: "#e9967a", lightgoldenrodyellow: "#fafad2", snow: "#fffafa", lightgrey: "#d3d3d3", lightgray: "#d3d3d3", dimgray: "#696969", dimgrey: "#696969", olivedrab: "#6b8e23", olive: "#808000" }, r = {};
      for (var d in a)
        r[a[d]] = d;
      var l = {};
      e.prototype.toName = function(f2) {
        if (!(this.rgba.a || this.rgba.r || this.rgba.g || this.rgba.b))
          return "transparent";
        var d2, i, o = r[this.toHex()];
        if (o)
          return o;
        if (null == f2 ? void 0 : f2.closest) {
          var n = this.toRgb(), t = 1 / 0, b = "black";
          if (!l.length)
            for (var c in a)
              l[c] = new e(a[c]).toRgb();
          for (var g in a) {
            var u = (d2 = n, i = l[g], Math.pow(d2.r - i.r, 2) + Math.pow(d2.g - i.g, 2) + Math.pow(d2.b - i.b, 2));
            u < t && (t = u, b = g);
          }
          return b;
        }
      };
      f.string.push([function(f2) {
        var r2 = f2.toLowerCase(), d2 = "transparent" === r2 ? "#0000" : a[r2];
        return d2 ? new e(d2).toRgb() : null;
      }, "name"]);
    };
  }
});

// node_modules/colord/plugins/lch.js
var require_lch = __commonJS({
  "node_modules/colord/plugins/lch.js"(exports, module) {
    var r = { grad: 0.9, turn: 360, rad: 360 / (2 * Math.PI) };
    var t = function(r2) {
      return "string" == typeof r2 ? r2.length > 0 : "number" == typeof r2;
    };
    var a = function(r2, t2, a2) {
      return void 0 === t2 && (t2 = 0), void 0 === a2 && (a2 = Math.pow(10, t2)), Math.round(a2 * r2) / a2 + 0;
    };
    var n = function(r2, t2, a2) {
      return void 0 === t2 && (t2 = 0), void 0 === a2 && (a2 = 1), r2 > a2 ? a2 : r2 > t2 ? r2 : t2;
    };
    var u = function(r2) {
      var t2 = r2 / 255;
      return t2 < 0.04045 ? t2 / 12.92 : Math.pow((t2 + 0.055) / 1.055, 2.4);
    };
    var h = function(r2) {
      return 255 * (r2 > 31308e-7 ? 1.055 * Math.pow(r2, 1 / 2.4) - 0.055 : 12.92 * r2);
    };
    var o = 96.422;
    var e = 100;
    var c = 82.521;
    var i = function(r2) {
      var t2, a2, u2 = { x: 0.9555766 * (t2 = r2).x + -0.0230393 * t2.y + 0.0631636 * t2.z, y: -0.0282895 * t2.x + 1.0099416 * t2.y + 0.0210077 * t2.z, z: 0.0122982 * t2.x + -0.020483 * t2.y + 1.3299098 * t2.z };
      return a2 = { r: h(0.032404542 * u2.x - 0.015371385 * u2.y - 4985314e-9 * u2.z), g: h(-969266e-8 * u2.x + 0.018760108 * u2.y + 41556e-8 * u2.z), b: h(556434e-9 * u2.x - 2040259e-9 * u2.y + 0.010572252 * u2.z), a: r2.a }, { r: n(a2.r, 0, 255), g: n(a2.g, 0, 255), b: n(a2.b, 0, 255), a: n(a2.a) };
    };
    var l = function(r2) {
      var t2 = u(r2.r), a2 = u(r2.g), h2 = u(r2.b);
      return function(r3) {
        return { x: n(r3.x, 0, o), y: n(r3.y, 0, e), z: n(r3.z, 0, c), a: n(r3.a) };
      }(function(r3) {
        return { x: 1.0478112 * r3.x + 0.0228866 * r3.y + -0.050127 * r3.z, y: 0.0295424 * r3.x + 0.9904844 * r3.y + -0.0170491 * r3.z, z: -92345e-7 * r3.x + 0.0150436 * r3.y + 0.7521316 * r3.z, a: r3.a };
      }({ x: 100 * (0.4124564 * t2 + 0.3575761 * a2 + 0.1804375 * h2), y: 100 * (0.2126729 * t2 + 0.7151522 * a2 + 0.072175 * h2), z: 100 * (0.0193339 * t2 + 0.119192 * a2 + 0.9503041 * h2), a: r2.a }));
    };
    var b = 216 / 24389;
    var d = 24389 / 27;
    var f = function(r2) {
      return { l: n(r2.l, 0, 100), c: r2.c, h: (t2 = r2.h, (t2 = isFinite(t2) ? t2 % 360 : 0) > 0 ? t2 : t2 + 360), a: r2.a };
      var t2;
    };
    var p = function(r2) {
      return { l: a(r2.l, 2), c: a(r2.c, 2), h: a(r2.h, 2), a: a(r2.a, 3) };
    };
    var v = function(r2) {
      var a2 = r2.l, n2 = r2.c, u2 = r2.h, h2 = r2.a, o2 = void 0 === h2 ? 1 : h2;
      if (!t(a2) || !t(n2) || !t(u2))
        return null;
      var e2 = f({ l: Number(a2), c: Number(n2), h: Number(u2), a: Number(o2) });
      return M(e2);
    };
    var y = function(r2) {
      var t2 = function(r3) {
        var t3 = l(r3), a2 = t3.x / o, n3 = t3.y / e, u3 = t3.z / c;
        return a2 = a2 > b ? Math.cbrt(a2) : (d * a2 + 16) / 116, { l: 116 * (n3 = n3 > b ? Math.cbrt(n3) : (d * n3 + 16) / 116) - 16, a: 500 * (a2 - n3), b: 200 * (n3 - (u3 = u3 > b ? Math.cbrt(u3) : (d * u3 + 16) / 116)), alpha: t3.a };
      }(r2), n2 = a(t2.a, 3), u2 = a(t2.b, 3), h2 = Math.atan2(u2, n2) / Math.PI * 180;
      return { l: t2.l, c: Math.sqrt(n2 * n2 + u2 * u2), h: h2 < 0 ? h2 + 360 : h2, a: t2.alpha };
    };
    var M = function(r2) {
      return t2 = { l: r2.l, a: r2.c * Math.cos(r2.h * Math.PI / 180), b: r2.c * Math.sin(r2.h * Math.PI / 180), alpha: r2.a }, n2 = t2.a / 500 + (a2 = (t2.l + 16) / 116), u2 = a2 - t2.b / 200, i({ x: (Math.pow(n2, 3) > b ? Math.pow(n2, 3) : (116 * n2 - 16) / d) * o, y: (t2.l > 8 ? Math.pow((t2.l + 16) / 116, 3) : t2.l / d) * e, z: (Math.pow(u2, 3) > b ? Math.pow(u2, 3) : (116 * u2 - 16) / d) * c, a: t2.alpha });
      var t2, a2, n2, u2;
    };
    var x = /^lch\(\s*([+-]?\d*\.?\d+)%\s+([+-]?\d*\.?\d+)\s+([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i;
    var s = function(t2) {
      var a2 = x.exec(t2);
      if (!a2)
        return null;
      var n2, u2, h2 = f({ l: Number(a2[1]), c: Number(a2[2]), h: (n2 = a2[3], u2 = a2[4], void 0 === u2 && (u2 = "deg"), Number(n2) * (r[u2] || 1)), a: void 0 === a2[5] ? 1 : Number(a2[5]) / (a2[6] ? 100 : 1) });
      return M(h2);
    };
    module.exports = function(r2, t2) {
      r2.prototype.toLch = function() {
        return p(y(this.rgba));
      }, r2.prototype.toLchString = function() {
        return r3 = p(y(this.rgba)), t3 = r3.l, a2 = r3.c, n2 = r3.h, (u2 = r3.a) < 1 ? "lch(" + t3 + "% " + a2 + " " + n2 + " / " + u2 + ")" : "lch(" + t3 + "% " + a2 + " " + n2 + ")";
        var r3, t3, a2, n2, u2;
      }, t2.string.push([s, "lch"]), t2.object.push([v, "lch"]);
    };
  }
});

// node_modules/colord/plugins/hwb.js
var require_hwb = __commonJS({
  "node_modules/colord/plugins/hwb.js"(exports, module) {
    var r = { grad: 0.9, turn: 360, rad: 360 / (2 * Math.PI) };
    var n = function(r2) {
      return "string" == typeof r2 ? r2.length > 0 : "number" == typeof r2;
    };
    var t = function(r2, n2, t2) {
      return void 0 === n2 && (n2 = 0), void 0 === t2 && (t2 = Math.pow(10, n2)), Math.round(t2 * r2) / t2 + 0;
    };
    var u = function(r2, n2, t2) {
      return void 0 === n2 && (n2 = 0), void 0 === t2 && (t2 = 1), r2 > t2 ? t2 : r2 > n2 ? r2 : n2;
    };
    var a = function(r2) {
      return { h: (n2 = r2.h, (n2 = isFinite(n2) ? n2 % 360 : 0) > 0 ? n2 : n2 + 360), w: u(r2.w, 0, 100), b: u(r2.b, 0, 100), a: u(r2.a) };
      var n2;
    };
    var e = function(r2) {
      return { h: t(r2.h), w: t(r2.w), b: t(r2.b), a: t(r2.a, 3) };
    };
    var o = function(r2) {
      return { h: function(r3) {
        var n2 = r3.r, t2 = r3.g, u2 = r3.b, a2 = r3.a, e2 = Math.max(n2, t2, u2), o2 = e2 - Math.min(n2, t2, u2), b2 = o2 ? e2 === n2 ? (t2 - u2) / o2 : e2 === t2 ? 2 + (u2 - n2) / o2 : 4 + (n2 - t2) / o2 : 0;
        return { h: 60 * (b2 < 0 ? b2 + 6 : b2), s: e2 ? o2 / e2 * 100 : 0, v: e2 / 255 * 100, a: a2 };
      }(r2).h, w: Math.min(r2.r, r2.g, r2.b) / 255 * 100, b: 100 - Math.max(r2.r, r2.g, r2.b) / 255 * 100, a: r2.a };
    };
    var b = function(r2) {
      return function(r3) {
        var n2 = r3.h, t2 = r3.s, u2 = r3.v, a2 = r3.a;
        n2 = n2 / 360 * 6, t2 /= 100, u2 /= 100;
        var e2 = Math.floor(n2), o2 = u2 * (1 - t2), b2 = u2 * (1 - (n2 - e2) * t2), i2 = u2 * (1 - (1 - n2 + e2) * t2), h2 = e2 % 6;
        return { r: 255 * [u2, b2, o2, o2, i2, u2][h2], g: 255 * [i2, u2, u2, b2, o2, o2][h2], b: 255 * [o2, o2, i2, u2, u2, b2][h2], a: a2 };
      }({ h: r2.h, s: 100 === r2.b ? 0 : 100 - r2.w / (100 - r2.b) * 100, v: 100 - r2.b, a: r2.a });
    };
    var i = function(r2) {
      var t2 = r2.h, u2 = r2.w, e2 = r2.b, o2 = r2.a, i2 = void 0 === o2 ? 1 : o2;
      if (!n(t2) || !n(u2) || !n(e2))
        return null;
      var h2 = a({ h: Number(t2), w: Number(u2), b: Number(e2), a: Number(i2) });
      return b(h2);
    };
    var h = /^hwb\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s+([+-]?\d*\.?\d+)%\s+([+-]?\d*\.?\d+)%\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i;
    var d = function(n2) {
      var t2 = h.exec(n2);
      if (!t2)
        return null;
      var u2, e2, o2 = a({ h: (u2 = t2[1], e2 = t2[2], void 0 === e2 && (e2 = "deg"), Number(u2) * (r[e2] || 1)), w: Number(t2[3]), b: Number(t2[4]), a: void 0 === t2[5] ? 1 : Number(t2[5]) / (t2[6] ? 100 : 1) });
      return b(o2);
    };
    module.exports = function(r2, n2) {
      r2.prototype.toHwb = function() {
        return e(o(this.rgba));
      }, r2.prototype.toHwbString = function() {
        return r3 = e(o(this.rgba)), n3 = r3.h, t2 = r3.w, u2 = r3.b, (a2 = r3.a) < 1 ? "hwb(" + n3 + " " + t2 + "% " + u2 + "% / " + a2 + ")" : "hwb(" + n3 + " " + t2 + "% " + u2 + "%)";
        var r3, n3, t2, u2, a2;
      }, n2.string.push([d, "hwb"]), n2.object.push([i, "hwb"]);
    };
  }
});

// node_modules/colord/plugins/lab.js
var require_lab = __commonJS({
  "node_modules/colord/plugins/lab.js"(exports, module) {
    var a = function(a2) {
      return "string" == typeof a2 ? a2.length > 0 : "number" == typeof a2;
    };
    var t = function(a2, t2, o2) {
      return void 0 === t2 && (t2 = 0), void 0 === o2 && (o2 = Math.pow(10, t2)), Math.round(o2 * a2) / o2 + 0;
    };
    var o = function(a2, t2, o2) {
      return void 0 === t2 && (t2 = 0), void 0 === o2 && (o2 = 1), a2 > o2 ? o2 : a2 > t2 ? a2 : t2;
    };
    var r = function(a2) {
      var t2 = a2 / 255;
      return t2 < 0.04045 ? t2 / 12.92 : Math.pow((t2 + 0.055) / 1.055, 2.4);
    };
    var h = function(a2) {
      return 255 * (a2 > 31308e-7 ? 1.055 * Math.pow(a2, 1 / 2.4) - 0.055 : 12.92 * a2);
    };
    var n = 96.422;
    var p = 100;
    var M = 82.521;
    var u = function(a2) {
      var t2, r2, n2 = { x: 0.9555766 * (t2 = a2).x + -0.0230393 * t2.y + 0.0631636 * t2.z, y: -0.0282895 * t2.x + 1.0099416 * t2.y + 0.0210077 * t2.z, z: 0.0122982 * t2.x + -0.020483 * t2.y + 1.3299098 * t2.z };
      return r2 = { r: h(0.032404542 * n2.x - 0.015371385 * n2.y - 4985314e-9 * n2.z), g: h(-969266e-8 * n2.x + 0.018760108 * n2.y + 41556e-8 * n2.z), b: h(556434e-9 * n2.x - 2040259e-9 * n2.y + 0.010572252 * n2.z), a: a2.a }, { r: o(r2.r, 0, 255), g: o(r2.g, 0, 255), b: o(r2.b, 0, 255), a: o(r2.a) };
    };
    var e = function(a2) {
      var t2 = r(a2.r), h2 = r(a2.g), u2 = r(a2.b);
      return function(a3) {
        return { x: o(a3.x, 0, n), y: o(a3.y, 0, p), z: o(a3.z, 0, M), a: o(a3.a) };
      }(function(a3) {
        return { x: 1.0478112 * a3.x + 0.0228866 * a3.y + -0.050127 * a3.z, y: 0.0295424 * a3.x + 0.9904844 * a3.y + -0.0170491 * a3.z, z: -92345e-7 * a3.x + 0.0150436 * a3.y + 0.7521316 * a3.z, a: a3.a };
      }({ x: 100 * (0.4124564 * t2 + 0.3575761 * h2 + 0.1804375 * u2), y: 100 * (0.2126729 * t2 + 0.7151522 * h2 + 0.072175 * u2), z: 100 * (0.0193339 * t2 + 0.119192 * h2 + 0.9503041 * u2), a: a2.a }));
    };
    var w = 216 / 24389;
    var b = 24389 / 27;
    var i = function(t2) {
      var r2 = t2.l, h2 = t2.a, n2 = t2.b, p2 = t2.alpha, M2 = void 0 === p2 ? 1 : p2;
      if (!a(r2) || !a(h2) || !a(n2))
        return null;
      var u2 = function(a2) {
        return { l: o(a2.l, 0, 400), a: a2.a, b: a2.b, alpha: o(a2.alpha) };
      }({ l: Number(r2), a: Number(h2), b: Number(n2), alpha: Number(M2) });
      return l(u2);
    };
    var l = function(a2) {
      var t2 = (a2.l + 16) / 116, o2 = a2.a / 500 + t2, r2 = t2 - a2.b / 200;
      return u({ x: (Math.pow(o2, 3) > w ? Math.pow(o2, 3) : (116 * o2 - 16) / b) * n, y: (a2.l > 8 ? Math.pow((a2.l + 16) / 116, 3) : a2.l / b) * p, z: (Math.pow(r2, 3) > w ? Math.pow(r2, 3) : (116 * r2 - 16) / b) * M, a: a2.alpha });
    };
    module.exports = function(a2, r2) {
      a2.prototype.toLab = function() {
        return o2 = e(this.rgba), h2 = o2.y / p, u2 = o2.z / M, r3 = (r3 = o2.x / n) > w ? Math.cbrt(r3) : (b * r3 + 16) / 116, a3 = { l: 116 * (h2 = h2 > w ? Math.cbrt(h2) : (b * h2 + 16) / 116) - 16, a: 500 * (r3 - h2), b: 200 * (h2 - (u2 = u2 > w ? Math.cbrt(u2) : (b * u2 + 16) / 116)), alpha: o2.a }, { l: t(a3.l, 2), a: t(a3.a, 2), b: t(a3.b, 2), alpha: t(a3.alpha, 3) };
        var a3, o2, r3, h2, u2;
      }, a2.prototype.delta = function(r3) {
        void 0 === r3 && (r3 = "#FFF");
        var h2 = r3 instanceof a2 ? r3 : new a2(r3), n2 = function(a3, t2) {
          var o2 = a3.l, r4 = a3.a, h3 = a3.b, n3 = t2.l, p2 = t2.a, M2 = t2.b, u2 = 180 / Math.PI, e2 = Math.PI / 180, w2 = Math.pow(Math.pow(r4, 2) + Math.pow(h3, 2), 0.5), b2 = Math.pow(Math.pow(p2, 2) + Math.pow(M2, 2), 0.5), i2 = (o2 + n3) / 2, l2 = Math.pow((w2 + b2) / 2, 7), c = 0.5 * (1 - Math.pow(l2 / (l2 + Math.pow(25, 7)), 0.5)), f = r4 * (1 + c), y = p2 * (1 + c), v = Math.pow(Math.pow(f, 2) + Math.pow(h3, 2), 0.5), x = Math.pow(Math.pow(y, 2) + Math.pow(M2, 2), 0.5), z = (v + x) / 2, s = 0 === f && 0 === h3 ? 0 : Math.atan2(h3, f) * u2, d = 0 === y && 0 === M2 ? 0 : Math.atan2(M2, y) * u2;
          s < 0 && (s += 360), d < 0 && (d += 360);
          var g = d - s, m = Math.abs(d - s);
          m > 180 && d <= s ? g += 360 : m > 180 && d > s && (g -= 360);
          var N = s + d;
          m <= 180 ? N /= 2 : N = (s + d < 360 ? N + 360 : N - 360) / 2;
          var F = 1 - 0.17 * Math.cos(e2 * (N - 30)) + 0.24 * Math.cos(2 * e2 * N) + 0.32 * Math.cos(e2 * (3 * N + 6)) - 0.2 * Math.cos(e2 * (4 * N - 63)), L = n3 - o2, I = x - v, P = 2 * Math.sin(e2 * g / 2) * Math.pow(v * x, 0.5), j = 1 + 0.015 * Math.pow(i2 - 50, 2) / Math.pow(20 + Math.pow(i2 - 50, 2), 0.5), k = 1 + 0.045 * z, q = 1 + 0.015 * z * F, A = 30 * Math.exp(-1 * Math.pow((N - 275) / 25, 2)), B = -2 * Math.pow(l2 / (l2 + Math.pow(25, 7)), 0.5) * Math.sin(2 * e2 * A);
          return Math.pow(Math.pow(L / 1 / j, 2) + Math.pow(I / 1 / k, 2) + Math.pow(P / 1 / q, 2) + B * I * P / (1 * k * 1 * q), 0.5);
        }(this.toLab(), h2.toLab()) / 100;
        return o(t(n2, 3));
      }, r2.object.push([i, "lab"]);
    };
  }
});

// node_modules/colord/plugins/xyz.js
var require_xyz = __commonJS({
  "node_modules/colord/plugins/xyz.js"(exports, module) {
    var r = function(r2) {
      return "string" == typeof r2 ? r2.length > 0 : "number" == typeof r2;
    };
    var n = function(r2, n2, t2) {
      return void 0 === n2 && (n2 = 0), void 0 === t2 && (t2 = Math.pow(10, n2)), Math.round(t2 * r2) / t2 + 0;
    };
    var t = function(r2, n2, t2) {
      return void 0 === n2 && (n2 = 0), void 0 === t2 && (t2 = 1), r2 > t2 ? t2 : r2 > n2 ? r2 : n2;
    };
    var u = function(r2) {
      var n2 = r2 / 255;
      return n2 < 0.04045 ? n2 / 12.92 : Math.pow((n2 + 0.055) / 1.055, 2.4);
    };
    var o = function(r2) {
      return 255 * (r2 > 31308e-7 ? 1.055 * Math.pow(r2, 1 / 2.4) - 0.055 : 12.92 * r2);
    };
    var a = 96.422;
    var e = 100;
    var y = 82.521;
    var x = function(r2) {
      return { x: t(r2.x, 0, a), y: t(r2.y, 0, e), z: t(r2.z, 0, y), a: t(r2.a) };
    };
    var z = function(n2) {
      var t2 = n2.x, u2 = n2.y, o2 = n2.z, a2 = n2.a, e2 = void 0 === a2 ? 1 : a2;
      if (!r(t2) || !r(u2) || !r(o2))
        return null;
      var y2 = x({ x: Number(t2), y: Number(u2), z: Number(o2), a: Number(e2) });
      return i(y2);
    };
    var i = function(r2) {
      var n2, u2, a2 = { x: 0.9555766 * (n2 = r2).x + -0.0230393 * n2.y + 0.0631636 * n2.z, y: -0.0282895 * n2.x + 1.0099416 * n2.y + 0.0210077 * n2.z, z: 0.0122982 * n2.x + -0.020483 * n2.y + 1.3299098 * n2.z };
      return u2 = { r: o(0.032404542 * a2.x - 0.015371385 * a2.y - 4985314e-9 * a2.z), g: o(-969266e-8 * a2.x + 0.018760108 * a2.y + 41556e-8 * a2.z), b: o(556434e-9 * a2.x - 2040259e-9 * a2.y + 0.010572252 * a2.z), a: r2.a }, { r: t(u2.r, 0, 255), g: t(u2.g, 0, 255), b: t(u2.b, 0, 255), a: t(u2.a) };
    };
    module.exports = function(r2, t2) {
      r2.prototype.toXyz = function() {
        return function(r4) {
          return { x: n(r4.x, 2), y: n(r4.y, 2), z: n(r4.z, 2), a: n(r4.a, 3) };
        }((t3 = u((r3 = this.rgba).r), o2 = u(r3.g), a2 = u(r3.b), x({ x: 1.0478112 * (e2 = { x: 100 * (0.4124564 * t3 + 0.3575761 * o2 + 0.1804375 * a2), y: 100 * (0.2126729 * t3 + 0.7151522 * o2 + 0.072175 * a2), z: 100 * (0.0193339 * t3 + 0.119192 * o2 + 0.9503041 * a2), a: r3.a }).x + 0.0228866 * e2.y + -0.050127 * e2.z, y: 0.0295424 * e2.x + 0.9904844 * e2.y + -0.0170491 * e2.z, z: -92345e-7 * e2.x + 0.0150436 * e2.y + 0.7521316 * e2.z, a: e2.a })));
        var r3, t3, o2, a2, e2;
      }, t2.object.push([z, "xyz"]);
    };
  }
});

// node_modules/daisyui/src/theming/functions.js
var require_functions = __commonJS({
  "node_modules/daisyui/src/theming/functions.js"(exports, module) {
    var colorNames = require_colorNames();
    var themeDefaults = require_themeDefaults();
    var { colord, getFormat, extend } = require_colord();
    var mixPlugin = require_mix();
    var namesPlugin = require_names();
    var lchPlugin = require_lch();
    var hwbPlugin = require_hwb();
    var labPlugin = require_lab();
    var xyzPlugin = require_xyz();
    extend([mixPlugin, namesPlugin, lchPlugin, hwbPlugin, labPlugin, xyzPlugin]);
    module.exports = {
      changeColorValuesToObject: function(input) {
        const [h, s, l] = input.match(/\d+(\.\d+)?%|\d+(\.\d+)?/g).map(parseFloat);
        return { h, s, l, a: 1 };
      },
      turnColorValuesToString: function(input) {
        const [h, s, l] = input.match(/\d+(\.\d+)?%|\d+(\.\d+)?/g).map(parseFloat);
        return `${h} ${s}% ${l}%`;
      },
      generateForegroundColorFrom: function(input, percentage = 0.8) {
        const str = colord(input).mix(colord(input).isDark() ? "white" : "black", percentage).toHslString();
        return this.turnColorValuesToString(str);
      },
      generateDarkenColorFrom: function(input, percentage = 0.07) {
        const str = colord(input).darken(percentage).toHslString();
        return this.turnColorValuesToString(str);
      },
      convertColorFormat: function(input, colorFunction = "hsl") {
        if (typeof input !== "object" || input === null) {
          return input;
        }
        const resultObj = {};
        Object.entries(input).forEach(([rule, value]) => {
          if (colorNames.hasOwnProperty(rule)) {
            const hslArray = colord(value).toHsl();
            resultObj[colorNames[rule]] = `${hslArray.h} ${hslArray.s}% ${hslArray.l}%`;
          } else {
            resultObj[rule] = value;
          }
          if (!Object.hasOwn(input, "primary-focus")) {
            resultObj["--pf"] = this.generateDarkenColorFrom(input["primary"]);
          }
          if (!Object.hasOwn(input, "secondary-focus")) {
            resultObj["--sf"] = this.generateDarkenColorFrom(input["secondary"]);
          }
          if (!Object.hasOwn(input, "accent-focus")) {
            resultObj["--af"] = this.generateDarkenColorFrom(input["accent"]);
          }
          if (!Object.hasOwn(input, "neutral-focus")) {
            resultObj["--nf"] = this.generateDarkenColorFrom(input["neutral"]);
          }
          if (!Object.hasOwn(input, "base-100")) {
            resultObj["--b1"] = "100 0 0";
          }
          if (!Object.hasOwn(input, "base-200")) {
            resultObj["--b2"] = this.generateDarkenColorFrom(input["base-100"]);
          }
          if (!Object.hasOwn(input, "base-300")) {
            if (Object.hasOwn(input, "base-200")) {
              resultObj["--b3"] = this.generateDarkenColorFrom(input["base-200"]);
            } else {
              resultObj["--b3"] = this.generateDarkenColorFrom(input["base-100"], 0.14);
            }
          }
          if (!Object.hasOwn(input, "info")) {
            resultObj["--in"] = "198 93% 60%";
          }
          if (!Object.hasOwn(input, "success")) {
            resultObj["--su"] = "158 64% 52%";
          }
          if (!Object.hasOwn(input, "warning")) {
            resultObj["--wa"] = "43 96% 56%";
          }
          if (!Object.hasOwn(input, "error")) {
            resultObj["--er"] = "0 91% 71%";
          }
          if (!Object.hasOwn(input, "base-content")) {
            resultObj["--bc"] = this.generateForegroundColorFrom(input["base-100"]);
          }
          if (!Object.hasOwn(input, "primary-content")) {
            resultObj["--pc"] = this.generateForegroundColorFrom(input["primary"]);
          }
          if (!Object.hasOwn(input, "secondary-content")) {
            resultObj["--sc"] = this.generateForegroundColorFrom(input["secondary"]);
          }
          if (!Object.hasOwn(input, "accent-content")) {
            resultObj["--ac"] = this.generateForegroundColorFrom(input["accent"]);
          }
          if (!Object.hasOwn(input, "neutral-content")) {
            resultObj["--nc"] = this.generateForegroundColorFrom(input["neutral"]);
          }
          if (!Object.hasOwn(input, "info-content")) {
            if (Object.hasOwn(input, "info")) {
              resultObj["--inc"] = this.generateForegroundColorFrom(input["info"]);
            } else {
              resultObj["--inc"] = "198 100% 12%";
            }
          }
          if (!Object.hasOwn(input, "success-content")) {
            if (Object.hasOwn(input, "success")) {
              resultObj["--suc"] = this.generateForegroundColorFrom(input["success"]);
            } else {
              resultObj["--suc"] = "158 100% 10%";
            }
          }
          if (!Object.hasOwn(input, "warning-content")) {
            if (Object.hasOwn(input, "warning")) {
              resultObj["--wac"] = this.generateForegroundColorFrom(input["warning"]);
            } else {
              resultObj["--wac"] = "43 100% 11%";
            }
          }
          if (!Object.hasOwn(input, "error-content")) {
            if (Object.hasOwn(input, "error")) {
              resultObj["--erc"] = this.generateForegroundColorFrom(input["error"]);
            } else {
              resultObj["--erc"] = "0 100% 14%";
            }
          }
          Object.entries(themeDefaults.variables).forEach((item) => {
            const [variable, value2] = item;
            if (!Object.hasOwn(input, variable)) {
              resultObj[variable] = value2;
            }
          });
          if (!colorNames.hasOwnProperty(rule)) {
            resultObj[rule] = value;
          }
        });
        return resultObj;
      },
      injectThemes: function(addBase, config, themes, colorFunction) {
        const includedThemesObj = {};
        Object.entries(themes).forEach(([theme, value]) => {
          if (colorFunction === "lch") {
            includedThemesObj[theme] = this.convertColorFormat(value);
          }
          if (colorFunction === "hsl") {
            includedThemesObj[theme] = this.convertColorFormat(value, "hsl");
          }
        });
        if (Array.isArray(config("daisyui.themes"))) {
          config("daisyui.themes").forEach((item) => {
            if (typeof item === "object" && item !== null) {
              Object.entries(item).forEach(([customThemeName, customThemevalue]) => {
                includedThemesObj["[data-theme=" + customThemeName + "]"] = this.convertColorFormat(customThemevalue);
              });
            }
          });
        }
        let themeOrder = [];
        if (Array.isArray(config("daisyui.themes"))) {
          config("daisyui.themes").forEach((theme) => {
            if (typeof theme === "object" && theme !== null) {
              Object.keys(theme).forEach((customThemeName) => {
                themeOrder.push(customThemeName);
              });
            } else if (Object.hasOwn(includedThemesObj, "[data-theme=" + theme + "]")) {
              themeOrder.push(theme);
            }
          });
        } else if (config("daisyui.themes") === true) {
          themeOrder = themeDefaults.themeOrder;
        } else {
          themeOrder = ["light", "dark"];
        }
        const themesToInject = {};
        themeOrder.forEach((themeName, index) => {
          if (index === 0) {
            themesToInject[":root"] = includedThemesObj["[data-theme=" + themeName + "]"];
          } else if (index === 1) {
            if (config("daisyui.darkTheme")) {
              if (themeOrder[0] !== config("daisyui.darkTheme") && themeOrder.includes(config("daisyui.darkTheme"))) {
                themesToInject["@media (prefers-color-scheme: dark)"] = {
                  [":root"]: includedThemesObj[`[data-theme=${config("daisyui.darkTheme")}]`]
                };
              }
            } else if (config("daisyui.darkTheme") === false) {
            } else {
              if (themeOrder[0] !== "dark" && themeOrder.includes("dark")) {
                themesToInject["@media (prefers-color-scheme: dark)"] = {
                  [":root"]: includedThemesObj["[data-theme=dark]"]
                };
              }
            }
            themesToInject["[data-theme=" + themeOrder[0] + "]"] = includedThemesObj["[data-theme=" + themeOrder[0] + "]"];
            themesToInject["[data-theme=" + themeOrder[1] + "]"] = includedThemesObj["[data-theme=" + themeOrder[1] + "]"];
          } else {
            themesToInject["[data-theme=" + themeName + "]"] = includedThemesObj["[data-theme=" + themeName + "]"];
          }
        });
        if (colorFunction === "lch") {
          addBase({ "@supports (color: lch(0 0 0))": themesToInject });
        }
        if (colorFunction === "hsl") {
          addBase(themesToInject);
        }
        return {
          includedThemesObj,
          themeOrder
        };
      }
    };
  }
});

// node_modules/tailwindcss/lib/util/createPlugin.js
var require_createPlugin = __commonJS({
  "node_modules/tailwindcss/lib/util/createPlugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function() {
        return _default;
      }
    });
    function createPlugin(plugin, config) {
      return {
        handler: plugin,
        config
      };
    }
    createPlugin.withOptions = function(pluginFunction, configFunction = () => ({})) {
      const optionsFunction = function(options) {
        return {
          __options: options,
          handler: pluginFunction(options),
          config: configFunction(options)
        };
      };
      optionsFunction.__isOptionsFunction = true;
      optionsFunction.__pluginFunction = pluginFunction;
      optionsFunction.__configFunction = configFunction;
      return optionsFunction;
    };
    var _default = createPlugin;
  }
});

// node_modules/tailwindcss/lib/public/create-plugin.js
var require_create_plugin = __commonJS({
  "node_modules/tailwindcss/lib/public/create-plugin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function() {
        return _default;
      }
    });
    var _createPlugin = _interop_require_default(require_createPlugin());
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : {
        default: obj
      };
    }
    var _default = _createPlugin.default;
  }
});

// node_modules/tailwindcss/plugin.js
var require_plugin = __commonJS({
  "node_modules/tailwindcss/plugin.js"(exports, module) {
    var createPlugin = require_create_plugin();
    module.exports = (createPlugin.__esModule ? createPlugin : { default: createPlugin }).default;
  }
});

// node_modules/daisyui/src/index.js
var require_src = __commonJS({
  "node_modules/daisyui/src/index.js"(exports, module) {
    var tailwindColors = require_colors2();
    var postcssJs = require_postcss_js();
    var postcssPrefix = require_addPrefix();
    var daisyuiInfo = require_package();
    var colors = require_theming();
    var utilities = require_utilities();
    var base = require_base();
    var unstyled = require_unstyled();
    var unstyledRtl = require_unstyled_rtl();
    var styled = require_styled();
    var styledRtl = require_styled_rtl();
    var utilitiesUnstyled = require_utilities_unstyled();
    var utilitiesStyled = require_utilities_styled();
    var themes = require_themes();
    var colorFunctions = require_functions();
    var mainFunction = ({ addBase, addComponents, config }) => {
      let logs = false;
      if (config("daisyui.logs") != false) {
        logs = true;
      }
      if (logs) {
        console.log();
        console.log("╭── 🌼\x1B[35m daisyUI " + daisyuiInfo.version, "\x1B[0m" + daisyuiInfo.homepage);
      }
      if (config("daisyui.base") != false) {
        addBase(base);
      }
      let file = styled;
      if (config("daisyui.styled") == false && config("daisyui.rtl") != true) {
        file = unstyled;
      } else if (config("daisyui.styled") == false && config("daisyui.rtl") == true) {
        file = unstyledRtl;
      } else if (config("daisyui.styled") != false && config("daisyui.rtl") != true) {
        file = styled;
      } else if (config("daisyui.styled") !== false && config("daisyui.rtl") == true) {
        file = styledRtl;
      }
      const prefix = config("daisyui.prefix");
      let postcssJsProcess;
      if (prefix) {
        try {
          postcssJsProcess = postcssJs.sync(postcssPrefix({ prefix, ignore: [] }));
        } catch (error) {
          logs && console.error(`Error occurred and prevent applying the "prefix" option:`, error);
        }
      }
      const shouldApplyPrefix = prefix && postcssJsProcess;
      if (shouldApplyPrefix) {
        file = postcssJsProcess(file);
      }
      addComponents(file);
      const themeInjectorHsl = colorFunctions.injectThemes(addBase, config, themes, "hsl");
      themeInjectorHsl;
      if (config("daisyui.utils") != false) {
        addComponents(utilities, { variants: ["responsive"] });
        let toAdd = utilitiesUnstyled;
        if (shouldApplyPrefix) {
          toAdd = postcssJsProcess(toAdd);
        }
        addComponents(toAdd, { variants: ["responsive"] });
        toAdd = utilitiesStyled;
        if (shouldApplyPrefix) {
          toAdd = postcssJsProcess(toAdd);
        }
        addComponents(toAdd, { variants: ["responsive"] });
      }
      if (logs) {
        console.log("│");
        if (config("daisyui.styled") == false) {
          console.log(
            "├──",
            "daisyui.styled",
            "\x1B[0mconfig is",
            "\x1B[2mfalse\x1B[0m",
            "– your components will have no design decisions\n│"
          );
        }
        if (config("daisyui.utils") == false) {
          console.log(
            "├──",
            "daisyui.utils",
            "\x1B[0mconfig is",
            "\x1B[2mfalse\x1B[0m",
            "– daisyUI modifier utility classes are disabled\n│"
          );
        }
        if (config("daisyui.prefix") && config("daisyui.prefix") !== "") {
          console.log(
            "├──",
            "\x1B[2mprefix\x1B[0m",
            "is enabled, daisyUI classnames must use",
            `\x1B[2m${config("daisyui.prefix")}`,
            "\x1B[0mprefix. like:",
            `\x1B[2m${config("daisyui.prefix")}btn`,
            "\x1B[0m\n│   https://daisyui.com/docs/config\n│"
          );
        }
        if (config("daisyui.rtl") == true) {
          console.log(
            "├──",
            "Using RTL, make sure you're using",
            "\x1B[2m<html dir=rtl>\x1B[0m",
            "and you have",
            "\x1B[2mtailwindcss-flip\x1B[0m",
            "plugin",
            "\n│   https://daisyui.com/docs/config\n│"
          );
        }
        if (themeInjectorHsl.themeOrder.length > 0) {
          console.log(
            "├──",
            `\x1B[2m${themeInjectorHsl.themeOrder.length}\x1B[0m ${themeInjectorHsl.themeOrder.length > 1 ? "themes are" : "theme is"} enabled. How to add more themes:
│   https://daisyui.com/docs/themes
│`
          );
        }
        if (themeInjectorHsl.themeOrder.length === 0) {
          console.log(
            "├──",
            `All themes are disabled in config. How to add themes:
│   https://daisyui.com/docs/themes
│`
          );
        }
        let messages = [
          `\x1B[32m💚 Support daisyUI project\x1B[0m: ${daisyuiInfo.funding.url}`,
          `\x1B[32m⭐️ Star daisyUI project on GitHub\x1B[0m: https://github.com/saadeghi/daisyui`
        ];
        console.log("╰── " + messages[Math.floor(Math.random() * messages.length)]);
        console.log();
      }
    };
    module.exports = require_plugin()(mainFunction, {
      theme: {
        extend: {
          colors: {
            ...colors,
            // adding all Tailwind `neutral` shades here so they don't get overridden by daisyUI `neutral` color
            "neutral-50": tailwindColors.neutral[50],
            "neutral-100": tailwindColors.neutral[100],
            "neutral-200": tailwindColors.neutral[200],
            "neutral-300": tailwindColors.neutral[300],
            "neutral-400": tailwindColors.neutral[400],
            "neutral-500": tailwindColors.neutral[500],
            "neutral-600": tailwindColors.neutral[600],
            "neutral-700": tailwindColors.neutral[700],
            "neutral-800": tailwindColors.neutral[800],
            "neutral-900": tailwindColors.neutral[900],
            "neutral-950": tailwindColors.neutral[950]
          }
        }
      }
    });
  }
});
export default require_src();
/*! Bundled license information:

cssesc/cssesc.js:
  (*! https://mths.be/cssesc v3.0.0 by @mathias *)
*/
//# sourceMappingURL=daisyui.js.map
